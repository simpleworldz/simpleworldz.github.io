<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木漏れ日</title>
  
  
  <link href="https://www.itaru.xyz/atom.xml" rel="self"/>
  
  <link href="https://www.itaru.xyz/"/>
  <updated>2022-03-05T08:44:09.535Z</updated>
  <id>https://www.itaru.xyz/</id>
  
  <author>
    <name>itaru</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode 优秀解决方案 - 202202</title>
    <link href="https://www.itaru.xyz/blogs/b4dc71b.html"/>
    <id>https://www.itaru.xyz/blogs/b4dc71b.html</id>
    <published>2022-03-05T08:30:12.000Z</published>
    <updated>2022-03-05T08:44:09.535Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Flatten-Binary-Tree-to-Linked-List-Medium"><a href="#Flatten-Binary-Tree-to-Linked-List-Medium" class="headerlink" title="Flatten Binary Tree to Linked List - Medium"></a><a href="https://leetcode.com/problems/flatten-binary-tree-to-linked-list/">Flatten Binary Tree to Linked List</a> - Medium</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> TreeNode prev = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatten</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    flatten(root.right);</span><br><span class="line">    flatten(root.left);</span><br><span class="line">    root.right = prev;</span><br><span class="line">    root.left = <span class="keyword">null</span>;</span><br><span class="line">    prev = root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Longest-Consecutive-Sequence-Medium-M"><a href="#Longest-Consecutive-Sequence-Medium-M" class="headerlink" title="Longest Consecutive Sequence - Medium M"></a><a href="https://leetcode.com/problems/longest-consecutive-sequence/">Longest Consecutive Sequence</a> - Medium M</h3><p>此解决方案的要点在于 set 的 Contains 方法时间复杂度为 O(1)，C# <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.hashset-1.contains?view=net-6.0#:~:text=This%20method%20is%20an%20O(1)%20operation.">HashSet<T>.Contains(T)</a> 同样是。<br><a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2.containskey?view=net-6.0">Dictionary&lt;TKey,TValue&gt;.ContainsKey(TKey)</a> 为 O(1)，<a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2.containsvalue?view=net-6.0">Dictionary&lt;TKey,TValue&gt;.ContainsValue(TValue)</a> 为 O(n)。<a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.contains?view=net-6.0">List<T>.Contains(T)</a> 为 O(n)</p><p><code>if x - 1 not in nums</code> 也是个亮点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestConsecutive</span>(<span class="params">self, nums</span>):</span></span><br><span class="line">    nums = <span class="built_in">set</span>(nums)</span><br><span class="line">    best = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> nums:</span><br><span class="line">        <span class="keyword">if</span> x - <span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> nums:</span><br><span class="line">            y = x + <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> y <span class="keyword">in</span> nums:</span><br><span class="line">                y += <span class="number">1</span></span><br><span class="line">            best = <span class="built_in">max</span>(best, y - x)</span><br><span class="line">    <span class="keyword">return</span> best</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">LongestConsecutive</span>(<span class="params"><span class="built_in">int</span>[] nums</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> len = nums.Length;</span><br><span class="line">        <span class="built_in">int</span> longest = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">set</span> = <span class="keyword">new</span> HashSet&lt;<span class="built_in">int</span>&gt;(nums);</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="keyword">var</span> item <span class="keyword">in</span> <span class="keyword">set</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">set</span>.Contains(item - <span class="number">1</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">int</span> num = item;</span><br><span class="line">                <span class="keyword">while</span>(<span class="keyword">set</span>.Contains(++num));</span><br><span class="line">                longest = Math.Max(longest,num - item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> longest;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Single-Number-Easy"><a href="#Single-Number-Easy" class="headerlink" title="Single Number - Easy"></a><a href="https://leetcode.com/problems/single-number/">Single Number</a> - Easy</h3><p>^= 异或</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">SingleNumber</span>(<span class="params"><span class="built_in">int</span>[] nums</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> single = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            single ^= nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不用异或的方法：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">SingleNumber</span>(<span class="params"><span class="built_in">int</span>[] nums</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> HashSet(nums);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">int</span> <span class="title">HashSet</span>(<span class="params"><span class="built_in">int</span>[] nums</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">set</span> = <span class="keyword">new</span> HashSet&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> num <span class="keyword">in</span> nums)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">set</span>.Contains(num))</span><br><span class="line">                <span class="keyword">set</span>.Remove(num);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">set</span>.Add(num);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">set</span>.First();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Copy-List-with-Random-Pointer-Medium"><a href="#Copy-List-with-Random-Pointer-Medium" class="headerlink" title="Copy List with Random Pointer - Medium"></a><a href="https://leetcode.com/problems/copy-list-with-random-pointer/">Copy List with Random Pointer</a> - Medium</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">CopyRandomList</span>(<span class="params">Node head</span>)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> clones = <span class="keyword">new</span> Dictionary&lt;Node, Node&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> dummy = <span class="keyword">new</span> Node(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">var</span> cur = dummy;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(head != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> newNode = GetNode(clones, head);</span><br><span class="line">            newNode.random = GetNode(clones, head.random);</span><br><span class="line">            </span><br><span class="line">            cur.next = newNode;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">GetNode</span>(<span class="params">Dictionary&lt;Node, Node&gt; clones, Node n</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!clones.ContainsKey(n))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> clone = <span class="keyword">new</span> Node(n.val);</span><br><span class="line">            clones.Add(n, clone);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> clones[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    Dictionary&lt;Node, Node&gt; mappingNodes = <span class="keyword">new</span> Dictionary&lt;Node, Node&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">CopyRandomList</span>(<span class="params">Node head</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(mappingNodes.ContainsKey(head))&#123;</span><br><span class="line">            <span class="keyword">return</span> mappingNodes[head];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> copiedNode = <span class="keyword">new</span> Node(head.val);</span><br><span class="line">        </span><br><span class="line">        mappingNodes.Add(head, copiedNode);</span><br><span class="line">        </span><br><span class="line">        copiedNode.next = CopyRandomList(head.next);</span><br><span class="line">        copiedNode.random = CopyRandomList(head.random);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> copiedNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>感觉接下来这个方法更好理解：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> Node <span class="title">CopyRandomList</span>(<span class="params">Node head</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">var</span> map = <span class="keyword">new</span> Dictionary&lt;Node, Node&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> node = head;</span><br><span class="line">        <span class="keyword">while</span>(node != <span class="literal">null</span>)&#123;</span><br><span class="line">            map.Add(node, <span class="keyword">new</span> Node(node.val));</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//now again iterating from begining of existing linked list</span></span><br><span class="line">        node = head;</span><br><span class="line">        <span class="keyword">while</span>(node != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//in c# dictionary key can&#x27;t be null</span></span><br><span class="line">            map[node].next = node.next != <span class="literal">null</span>? map[node.next] : <span class="literal">null</span>;</span><br><span class="line">            map[node].random = node.random !=<span class="literal">null</span>? map[node.random] : <span class="literal">null</span>;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> map[head];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Word-Break-Medium"><a href="#Word-Break-Medium" class="headerlink" title="Word Break - Medium"></a><a href="https://leetcode.com/problems/word-break/">Word Break</a> - Medium</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">WordBreak</span>(<span class="params"><span class="built_in">string</span> s, IList&lt;<span class="built_in">string</span>&gt; wordDict</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">bool</span>[] dp = <span class="keyword">new</span> <span class="built_in">bool</span>[s.Length+<span class="number">1</span>];</span><br><span class="line">       </span><br><span class="line">       dp[<span class="number">0</span>] = <span class="literal">true</span> ;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; s.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[i] == <span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">foreach</span>(<span class="built_in">string</span> word <span class="keyword">in</span> wordDict)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>((word.Length+i) &lt;= s.Length &amp;&amp; word == s.Substring(i, word.Length))</span><br><span class="line">                    &#123;</span><br><span class="line">                        dp[word.Length+i] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">          </span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;                </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[dp.Length<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Linked-List-Cycle-Easy"><a href="#Linked-List-Cycle-Easy" class="headerlink" title="Linked List Cycle - Easy"></a><a href="https://leetcode.com/problems/linked-list-cycle/">Linked List Cycle</a> - Easy</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">HasCycle</span>(<span class="params">ListNode head</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//var fast = new ListNode();</span></span><br><span class="line">        <span class="comment">//var slow = new ListNode();</span></span><br><span class="line">        </span><br><span class="line">        ListNode fast = head.next;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(fast != slow )&#123;</span><br><span class="line">            <span class="keyword">if</span>(fast == <span class="literal">null</span> || fast.next == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LRU-Cache-Medium"><a href="#LRU-Cache-Medium" class="headerlink" title="LRU Cache - Medium"></a><a href="https://leetcode.com/problems/lru-cache/">LRU Cache</a> - Medium</h3><p><a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.linkedlist-1?view=net-6.0">LinkedList</a> 是个双向链表 <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.linkedlist-1.remove?view=net-6.0">Remove()</a> 有两个重载，时间复杂度分别为 O(1) 和 O(n)</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LRUCache</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> capacity = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LinkedList</span>&lt;<span class="title">int</span>[]&gt; list</span> = <span class="keyword">new</span> LinkedList&lt;<span class="built_in">int</span>[]&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Dictionary</span>&lt;<span class="title">int</span>, <span class="title">LinkedListNode</span>&lt;<span class="title">int</span>[]&gt;&gt; dict</span> = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">int</span>, LinkedListNode&lt;<span class="built_in">int</span>[]&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span>(<span class="params"><span class="built_in">int</span> capacity</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Get</span>(<span class="params"><span class="built_in">int</span> key</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dict.ContainsKey(key))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        </span><br><span class="line">        Reorder(dict[key]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dict[key].Value[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Put</span>(<span class="params"><span class="built_in">int</span> key, <span class="built_in">int</span> <span class="keyword">value</span></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dict.ContainsKey(key))</span><br><span class="line">            dict[key].Value[<span class="number">1</span>] = <span class="keyword">value</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dict.Count == <span class="keyword">this</span>.capacity)</span><br><span class="line">            &#123;</span><br><span class="line">                dict.Remove(list.Last.Value[<span class="number">0</span>]);</span><br><span class="line">                list.RemoveLast();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            dict.Add(key, <span class="keyword">new</span> LinkedListNode&lt;<span class="built_in">int</span>[]&gt;(<span class="keyword">new</span> <span class="built_in">int</span>[] &#123; key, <span class="keyword">value</span> &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Reorder(dict[key]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Reorder</span>(<span class="params">LinkedListNode&lt;<span class="built_in">int</span>[]&gt; node</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (node.Previous != <span class="literal">null</span>)</span><br><span class="line">            list.Remove(node);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (list.First != node)</span><br><span class="line">            list.AddFirst(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">2022 年 2 月份做过的 LeetCode 算法题中值得记录的解决方法</summary>
    
    
    
    <category term="算法" scheme="https://www.itaru.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://www.itaru.xyz/categories/%E7%AE%97%E6%B3%95/LeetCode/"/>
    
    
    <category term="算法" scheme="https://www.itaru.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://www.itaru.xyz/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>hexo 3000 端口被占用</title>
    <link href="https://www.itaru.xyz/blogs/17748c8d.html"/>
    <id>https://www.itaru.xyz/blogs/17748c8d.html</id>
    <published>2022-02-26T09:31:38.000Z</published>
    <updated>2022-02-26T10:12:04.483Z</updated>
    
    <content type="html"><![CDATA[<p>安装了 Docker Desktop 后的第二天，使用 hexo server（hexo s） 命令报了 <code>Error: listen EACCES: permission denied 0.0.0.0:3000</code> 错误。</p><h3 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h3><p>Docker Desktop 启用了 Hyper-V，而 Hyper-V 会随机保留一些端口备用，导致这些端口被占用。既然是随机的，那么重启电脑是有可能解决问题的。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//禁用 Hyper-V</span><br><span class="line"><span class="meta">$</span><span class="bash"> dism.exe /Online /Disable-Feature:Microsoft-Hyper-V</span></span><br><span class="line">//添加需要排除的端口范围（startport 开始端口，numberofports 排除的个数）</span><br><span class="line">//以下示例排除 3000 - 3009 10 个端口</span><br><span class="line"><span class="meta">$</span><span class="bash"> netsh int ipv4 add excludedportrange protocol=tcp startport=3000 numberofports=10</span></span><br><span class="line">//重新启用 Hyper-V</span><br><span class="line"><span class="meta">$</span><span class="bash"> dism.exe /Online /Enable-Feature:Microsoft-Hyper-V /All</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>该方法只是禁止 Hyper-V 占用特定的端口，指不定哪次它占用了其他你需要使用的端口。</p></div><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ol><li><a href="https://howiezhao.github.io/2021/06/01/win10-port-is-already-in-use-problem/">Windows 10 中莫名其妙的“端口被占用”问题解决</a></li><li><a href="https://www.manongdao.com/article-2287898.html">Win10 各种端口占用问题的解决办法</a></li><li><a href="https://github.com/docker/for-win/issues/3171">Unable to bind ports: Docker-for-Windows &amp; Hyper-V excluding but not using important port ranges</a></li></ol><p>参考文献 2、3 中有一些其他的解决方案，但我没有测试。</p>]]></content>
    
    
    <summary type="html">错误信息为，Error: listen EACCES: permission denied 0.0.0.0:3000</summary>
    
    
    
    <category term="博客搭建" scheme="https://www.itaru.xyz/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    <category term="hexo" scheme="https://www.itaru.xyz/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/hexo/"/>
    
    
    <category term="博客搭建" scheme="https://www.itaru.xyz/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    <category term="hexo" scheme="https://www.itaru.xyz/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>深入探讨 async/await</title>
    <link href="https://www.itaru.xyz/blogs/5910e909.html"/>
    <id>https://www.itaru.xyz/blogs/5910e909.html</id>
    <published>2022-02-13T07:25:35.000Z</published>
    <updated>2022-02-13T07:29:55.072Z</updated>
    
    <content type="html"><![CDATA[<p>async/await 引入于 C# 5.0 和 .NET Framework 4.5，简化了异步编程的复杂度。async/await 用起来简单，许多人虽然会用，但对其一知半解。此文配合示例对 async/await 进行较深入的探讨，让你对 async/await 有更深的理解。</p><p>让我们从什么是同步方法和异步方法来开始这篇博客。</p><p>同步：工作<code>完成后</code>重新获得控制权。执行的方法在这之前被阻塞。<br>异步：工作<code>开始后</code>立即返回控制权。</p><h3 id="async-await-执行流程"><a href="#async-await-执行流程" class="headerlink" title="async await 执行流程"></a>async await 执行流程</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">DoSomethingAsync</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// await 之前可能会有一些其他的操作</span></span><br><span class="line">    <span class="comment">// 这里使用 Task.Delay(100) 代替实际要异步执行的操作</span></span><br><span class="line">    <span class="keyword">await</span> Task.Delay(<span class="number">100</span>);</span><br><span class="line">    <span class="comment">// 剩余部分，即延续（ContinueWith，可以理解为回调）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>检查 awaitable（await 表达式中的方法）以查看它<code>是否完成</code>。如果已完成，该方法将继续像任何其他方法一样同步运行。 </li><li>如果 await 检测到 awaitable 未完成，它会异步执行。它告诉 awaitable 在调用完成后运行方法的其余部分，然后返回到调用它的异步方法. </li><li>过了一会儿，当 awaitable 完成时，运行 async 方法的剩余部分。除非另有说明，否则 async 方法的剩余部分将在 await 返回<code>之前捕获的上下文中执行</code>。</li></ol><p>如果需要更具体的流程，请看这里：<a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/task-asynchronous-programming-model#BKMK_WhatHappensUnderstandinganAsyncMethod">What happens in an async method</a></p><p>几个注意点：</p><ul><li>async 方法处于暂停状态，直到 awaitable 完成，但线程未被此调用阻塞（它是异步的）。</li><li>Context（上下文）是执行剩余部分，而 await 部分的执行，得看他内部实现。</li><li>等待完成的几种方法 .Result、Wait() 等。</li></ul><h3 id="await-并不创建线程"><a href="#await-并不创建线程" class="headerlink" title="await 并不创建线程"></a>await 并不创建线程</h3><p>await 并不创建线程，await 并不会让同步方法异步执行，如果你放一个同步方法在里面，还是会同步执行。换句话说，await 中的方法本就是异步方法（当然，你非要放个同步方法进去也不会编译出错或抛异常），await 只是让编码变得简单。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Main() ThreadId: <span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> demo = <span class="keyword">new</span> AsyncDemo();</span><br><span class="line">        <span class="keyword">var</span> task = demo.SyncAsync();</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Main() ThreadId: <span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">AsyncDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">SyncAsync</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;SyncAsync() ThreadId: <span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);</span><br><span class="line">        <span class="keyword">await</span> SyncMethod();</span><br><span class="line">        <span class="comment">//await Task.Run(() =&gt; SyncMethod());</span></span><br><span class="line">        Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;SyncAsync() ThreadId: <span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Task <span class="title">SyncMethod</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;SyncMethod() ThreadId: <span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);</span><br><span class="line">        Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;SyncMethod() ThreadId: <span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SyncMethod 是个同步方法，以上代码输出：</p><p><img src="https://ih.itaru.xyz/images/20220129215224.png" alt="20220129215224"></p><p><a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.run?view=net-6.0">Task.Run</a>：将指定的工作放入 ThreadPool 中排队运行，并为该工作返回一个任务或 Task&lt;TResult&gt; 句柄。<br>改为 await Task.Run(() =&gt; SyncMethod()) 后，输出：</p><p><img src="https://ih.itaru.xyz/images/20220129215128.png" alt="20220129215128"></p><p>HttpClient 的示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HttpClientTest</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> stopWatch = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">    HttpClient hc = <span class="keyword">new</span> HttpClient();</span><br><span class="line">    stopWatch.Start();</span><br><span class="line">    <span class="keyword">var</span> message = hc.GetAsync(<span class="string">&quot;https://www.itaru.xyz/&quot;</span>);<span class="comment">//启动任务</span></span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Start: <span class="subst">&#123;stopWatch.ElapsedMilliseconds&#125;</span>&quot;</span>);</span><br><span class="line">    <span class="comment">//Thread.Sleep(3000);//主线程等待</span></span><br><span class="line">    stopWatch.Restart();</span><br><span class="line">    <span class="keyword">var</span> str = message.Result;<span class="comment">//获取结果</span></span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Result: <span class="subst">&#123;stopWatch.ElapsedMilliseconds&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释掉 Thread.Sleep(3000)，输出：</p><p><img src="https://ih.itaru.xyz/images/20220127220530.png" alt="20220127220530"></p><p>取消 Thread.Sleep(3000) 的注释，输出：</p><p><img src="https://ih.itaru.xyz/images/20220127215446.png" alt="20220127215446"></p><p>Thread.Sleep(3000) 这段时间 GetAsync 在后台运行，可见 GetAsync 本身就带异步功能。</p><p>补充：<a href="#await-%E5%B9%B6%E4%B8%8D%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B-%E7%BB%AD">await 并不创建线程 续</a> 中有说明原因，但建议按顺序往下看。</p><h3 id="何时返回调用方法"><a href="#何时返回调用方法" class="headerlink" title="何时返回调用方法"></a>何时返回调用方法</h3><p>遇到 await 后立刻返回调用方法吗？请看以下例子：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Main() ThreadId: <span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> demo = <span class="keyword">new</span> AsyncDemo();</span><br><span class="line">        <span class="keyword">var</span> task = demo.WhenReturnAsync();</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Main() ThreadId: <span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">AsyncDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">WhenReturnAsync</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;WhenReturnAsync() ThreadId: <span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);</span><br><span class="line">        <span class="keyword">await</span> WhenReturnMethodAsync();</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;WhenReturnAsync() ThreadId: <span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">async</span> Task <span class="title">WhenReturnMethodAsync</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;WhenReturnMethodAsync() ThreadId: <span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);</span><br><span class="line">        <span class="keyword">await</span> Task.Delay(<span class="number">1000</span>);</span><br><span class="line">        Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;WhenReturnMethodAsync() ThreadId: <span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="https://ih.itaru.xyz/images/20220208193834.png" alt="20220208193834"></p><p>第一个 WhenReturnMethodAsync 先于第二个 Main 输出，说明并不是 WhenReturnAsync 遇到 await 后立即返回，而是进入 WhenReturnMethodAsync 遇到了 await Task.Delay(1000) 时返回。<br>第二个 WhenReturnMethodAsync 先于第二个 WhenReturnAsync 输出（并且它们在同一线程中执行），说明 WhenReturnAsync 方法的延续是整个 WhenReturnMethodAsync 方法执行完成后才执行的。</p><p>补充：那么“遇到 await 后立即返回”这句话有错吗？其实是没错的。<a href="#%E4%BD%95%E6%97%B6%E8%BF%94%E5%9B%9E%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95-%E7%BB%AD">何时返回调用方法 续</a> 中有说明，但建议按顺序往下看。</p><h3 id="当-awaitable-已完成"><a href="#当-awaitable-已完成" class="headerlink" title="当 awaitable 已完成"></a>当 awaitable 已完成</h3><p>当 awaitable（await 表达式中的任务）已完成，则不返回到调用方法，该方法如同同步方法。这种机制可以节省暂停并返回的花销。详见 <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/task-asynchronous-programming-model#:~:text=If%20GetStringAsync%20(and%20therefore%20getStringTask)%20completes%20before%20GetUrlContentLengthAsync%20awaits%20it,%20control%20remains%20in%20GetUrlContentLengthAsync.">Note</a>。</p><p>使用 <a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.fromresult?view=net-6.0">Task.FromResult()</a> 模仿已完成的任务。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Main() ThreadId: <span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> demo = <span class="keyword">new</span> AsyncDemo();</span><br><span class="line">        <span class="keyword">var</span> task = demo.CompletedAsync();</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Main() ThreadId: <span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">AsyncDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">CompletedAsync</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;CompletedAsync() ThreadId: <span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);</span><br><span class="line">        <span class="keyword">await</span> Task.FromResult(<span class="number">10</span>);</span><br><span class="line">        Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;CompletedAsync() ThreadId: <span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="https://ih.itaru.xyz/images/20220206090441.png" alt="20220206090441"></p><p>补充：<a href="#%E5%BD%93-awaitable-%E5%B7%B2%E5%AE%8C%E6%88%90-%E7%BB%AD">当 awaitable 已完成 续</a>中有另一个例子，但建议按顺序往下看。</p><h3 id="由谁执行延续"><a href="#由谁执行延续" class="headerlink" title="由谁执行延续"></a>由谁执行延续</h3><p>这篇问答举了个很好的例子：<a href="https://stackoverflow.com/questions/17661428/async-stay-on-the-current-thread">async - stay on the current thread?</a></p><p>大意是，提问者进行了测试，发现在 Console 和 ASP.NET 中，执行完 awaitable 后，延续（ContinueWith：await 后剩余的部分，可以理解为回调）都是在另一个线程中执行的。而在 GUI APP 中，延续是在同一个线程中执行的（即调用 async 方法的那个线程）。于是提问者就凌乱了，不同的环境，相同的方法，执行流程却大相径庭。</p><p>原因是 awaitable 执行前会捕获当前<a href="https://blog.stephencleary.com/2012/02/async-and-await.html#:~:text=behind%20this%20design.-,Context,-In%20the%20overview">上下文</a>，该上下文用于执行延续。</p><p>await 捕获当前上下文并使用它来恢复异步方法。如果 UI 上下文中，则该上下文是单个 UI 线程，并且异步方法将在该线程上恢复。否则，规则有点复杂。特别是，控制台应用程序不提供任何上下文，此时默认情况下异步方法在线程池上恢复。</p><div class="note no-icon flat"><p>GUI 框架的两条法则</p><ol><li>不要在 UI 线程中执行任何长耗时的操作。</li><li>不要在 UI 线程以外访问 UI 的控件。</li></ol></div><p>如果你不想在“主”上下文中执行延续，可以使用<code>.ConfigureAwait(false)</code>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> MethodAsync().ConfigureAwait(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h3 id="多个-await"><a href="#多个-await" class="headerlink" title="多个 await"></a>多个 await</h3><p>我一开始是这么使用多个 await 的：</p><p>将<a href="#%E4%BD%95%E6%97%B6%E8%BF%94%E5%9B%9E%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95">何时返回调用方法</a> 示例中的 WhenReturnAsync 改一改，并添加一个 WhenReturnMethod2Async 方法。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">WhenReturnAsync</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;WhenReturnAsync() ThreadId: <span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);</span><br><span class="line">    <span class="keyword">await</span> WhenReturnMethodAsync();</span><br><span class="line">    <span class="keyword">await</span> WhenReturnMethod2Async();</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;WhenReturnAsync() ThreadId: <span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">WhenReturnMethod2Async</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;WhenReturnMethod2Async() ThreadId: <span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);</span><br><span class="line">    <span class="keyword">await</span> Task.Delay(<span class="number">1000</span>);</span><br><span class="line">    Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;WhenReturnMethod2Async() ThreadId: <span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="https://ih.itaru.xyz/images/20220210194316.png" alt="20220210194316"></p><p>输出显示 WhenReturnMethod2Async 是在 WhenReturnMethodAsync 方法完全执行完成后再执行的。但如果要省时间，WhenReturnMethod2Async 完全可以在 WhenReturnMethodAsync 调用 await Task.Delay(1000) 后立即执行。虽然和预期不同，但我一开始只当机制就是这样的，虽然困惑，但也没太深究。</p><p>直到我遇到以下 MVC 示例：</p><p>示例出自 <a href="https://www.c-sharpcorner.com/article/async-await-and-asynchronous-programming-in-mvc/#:~:text=Add%20GetListAsync()%20ActionResult%20in%20Home%20Controller.">Async, Await And Asynchronous Programming In MVC</a>，改动了一下：</p><!-- [Using Asynchronous Methods in ASP.NET MVC 4](https://docs.microsoft.com/en-us/aspnet/mvc/overview/performance/using-asynchronous-methods-in-aspnet-mvc-4#:~:text=The%20following%20changes%20were%20applied%20to%20allow%20the%20GizmosAsync%20to%20be%20asynchronous) --><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AsyncTestController</span> : <span class="title">Controller</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">GetListAsync</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> watch = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">        watch.Start();</span><br><span class="line">        Response.Write(<span class="string">&quot;&lt;br/&gt;GetListAsync----&quot;</span> + Thread.CurrentThread.ManagedThreadId);</span><br><span class="line">        <span class="keyword">var</span> country = GetCountryAsync();</span><br><span class="line">        <span class="keyword">var</span> state = GetStateAsync();</span><br><span class="line">        <span class="keyword">var</span> city = GetCityAsync();</span><br><span class="line">        <span class="keyword">var</span> content = <span class="keyword">await</span> country;</span><br><span class="line">        <span class="keyword">var</span> count = <span class="keyword">await</span> state;</span><br><span class="line">        <span class="keyword">var</span> name = <span class="keyword">await</span> city;</span><br><span class="line">        Response.Write(<span class="string">&quot;&lt;br/&gt;GetListAsync----&quot;</span> + Thread.CurrentThread.ManagedThreadId);</span><br><span class="line">        watch.Stop();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;br/&gt;&quot;</span> + watch.ElapsedMilliseconds + <span class="string">&quot; ms&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">GetCountryAsync</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Response.Write(<span class="string">&quot;&lt;br/&gt;GetCountryAsync----&quot;</span> + Thread.CurrentThread.ManagedThreadId);</span><br><span class="line">        <span class="keyword">await</span> Task.Delay(<span class="number">3000</span>); </span><br><span class="line">        Response.Write(<span class="string">&quot;&lt;br/&gt;GetCountryAsync----&quot;</span> + Thread.CurrentThread.ManagedThreadId);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;India&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">GetStateAsync</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Response.Write(<span class="string">&quot;&lt;br/&gt;GetStateAsync----&quot;</span> + Thread.CurrentThread.ManagedThreadId);</span><br><span class="line">        <span class="keyword">await</span> Task.Delay(<span class="number">5000</span>);</span><br><span class="line">        Response.Write(<span class="string">&quot;&lt;br/&gt;GetStateAsync----&quot;</span> + Thread.CurrentThread.ManagedThreadId);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Gujarat&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">GetCityAsync</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Response.Write(<span class="string">&quot;&lt;br/&gt;GetCityAsync----&quot;</span> + Thread.CurrentThread.ManagedThreadId);</span><br><span class="line">        <span class="keyword">await</span> Task.Delay(<span class="number">6000</span>);  </span><br><span class="line">        Response.Write(<span class="string">&quot;&lt;br/&gt;GetCityAsync----&quot;</span> + Thread.CurrentThread.ManagedThreadId);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Junagadh&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="https://ih.itaru.xyz/images/20220210193049.png" alt="20220210193049"></p><p>多刷新几次，会发现输出有时会不同：</p><p><img src="https://ih.itaru.xyz/images/20220210193101.png" alt="20220210193101"></p><p><img src="https://ih.itaru.xyz/images/20220210193112.png" alt="20220210193112"></p><p>对比以上两个示例，Console 和 MVC（ASP.NET）中执行顺序不同，会是上下文不同的原因吗？但仔细观察后发现，两个示例有些区别。<br>将 Console 中的 WhenReturnAsync 改改：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">WhenReturnAsync</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;WhenReturnAsync() ThreadId: <span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> async1 = WhenReturnMethodAsync();</span><br><span class="line">    <span class="keyword">var</span> async2 = WhenReturnMethod2Async();</span><br><span class="line">    <span class="keyword">await</span> async1;</span><br><span class="line">    <span class="keyword">await</span> async2;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;WhenReturnAsync() ThreadId: <span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出1：</p><p><img src="https://ih.itaru.xyz/images/20220211082648.png" alt="20220211082648"></p><p>多调试几遍，也可能出现以下输出：</p><p>输出2：<br><img src="https://ih.itaru.xyz/images/20220210195646.png" alt="20220210195646"></p><p>输出3：<br><img src="https://ih.itaru.xyz/images/20220211082658.png" alt="20220211082658"></p><p>第二个示例和第三个示例结果能对上。这样一来，以上 3 个示例都合理了。</p><p>解释下第三个示例中，</p><ol><li>Mian 调用 WhenReturnAsync 方法。</li><li>进入 WhenReturnMethodAsync 遇到 await 后立即返回 WhenReturnAsync，同时创建一个线程执行 awaitable。</li><li>进入 WhenReturnMethod2Async 遇到 await 后立即返回 WhenReturnAsync，同时创建另一个线程执行 awaitable。</li><li>WhenReturnAsync 遇到第一个 await，返回 Main。WhenReturnAsync 则等待 async1 完成。</li><li>WhenReturnAsync 中 async1 完成后继续等待 async2 完成（但此时 async2 可能已经完成）。</li></ol><div class="note warning flat"><p>这个例子中会创建一个线程去执行 awaitable，但是异步并非都是需要另一个线程的，线程只是实现异步的其中一种方式。</p></div><p>那么，结果为什么会多样的？</p><p>因为 WhenReturnMethodAsync 和 WhenReturnMethod2Async 都是 await Task.Delay(1000)。前文举的例子可以看出，仅包含一个 await 时，执行 awaitable 的线程会被用于执行延续</p><div class="note info no-icon flat"><p>这个不是绝对的，比如 GUI 中就不同，见<a href="#%E7%94%B1%E8%B0%81%E6%89%A7%E8%A1%8C%E5%BB%B6%E7%BB%AD">由谁执行延续</a>一节。<br>那如果是 Console 或者 ASP.NET 中的 IO bound 任务呢？CPU 往往会将 IO bound 任务分配给底层 IO 设备，不耗用 CPU 线程，但操作完成后，会短暂借用线程池中的线程去执行延续及其他的一些剩余部分。详情：<a href="https://blog.stephencleary.com/2013/11/there-is-no-thread.html">There Is No Thread</a></p></div><p>。<code>WhenReturnMethodAsync 和 WhenReturnMethod2Async 的完成先后顺序不同，会出现不同的结果</code>。</p><ul><li>输出1：WhenReturnMethodAsync 先于 WhenReturnMethod2Async 完成，则遇到 await async2 时会等待，等待完成后由 WhenReturnMethod2Async 创建的线程执行延续。</li><li>输出2：WhenReturnMethod2Async 先于 WhenReturnMethodAsync 完成，await async1 之后的步骤都由 WhenReturnMethodAsync 创建的线程同步执行（见<a href="#%E5%BD%93-awaitable-%E5%B7%B2%E5%AE%8C%E6%88%90">当 awaitable 已完成</a>一节）。</li><li>输出3：WhenReturnMethodAsync 先于 WhenReturnMethod2Async 完成，但它们又几乎同时完成，执行 await async2 时 WhenReturnMethod2Async 也已经完成了。那么和输出2 一样，await async1 之后的步骤也是都由 WhenReturnMethodAsync 创建的线程同步执行。</li></ul><h3 id="知识串联"><a href="#知识串联" class="headerlink" title="知识串联"></a>知识串联</h3><p>写完<a href="#%E5%A4%9A%E4%B8%AA-await">多个 await</a> 这一节，对更前面的章节又有了新的感悟，这里为前面几个章节写几个续。</p><h4 id="当-awaitable-已完成-续"><a href="#当-awaitable-已完成-续" class="headerlink" title="当 awaitable 已完成 续"></a>当 awaitable 已完成 续</h4><p>原先在 <a href="#%E5%BD%93-awaitable-%E5%B7%B2%E5%AE%8C%E6%88%90">当 awaitable 已完成</a>这一节，找不到 awaitable 已完成的比较现实的例子，只用了 Task.FromResult() 这个我自己都觉得说服力不够的例子。现在想来上节中的 WhenReturnMethod2Async 中的 <code>await Task.Delay(1000)</code> 改为 <code>await Task.Delay(500)</code>，不就是当遇到 await 时，awaitable 已经完成的例子吗？</p><p>改完后输出始终如下，上节输出2的解释看来没错。</p><p><img src="https://ih.itaru.xyz/images/20220211152653.png" alt="20220211152653"></p><p>那么顺便验证下输出1的解释吧，WhenReturnMethodAsync 中使用的 <code>await Task.Delay(500)</code>，WhenReturnMethod2Async 中使用的 <code>await Task.Delay(1000)</code>。</p><p>输出始终如下，符合上节输出1（看输出左侧的方法，线程 ID 只是用来区分是不是同一个线程）。</p><p><img src="https://ih.itaru.xyz/images/20220211153036.png" alt="20220211153036"></p><h4 id="何时返回调用方法-续"><a href="#何时返回调用方法-续" class="headerlink" title="何时返回调用方法 续"></a>何时返回调用方法 续</h4><p>需要给 <a href="#%E4%BD%95%E6%97%B6%E8%BF%94%E5%9B%9E%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95">何时返回调用方法</a> 打个补丁。就是如果将 WhenReturnAsync 改成如下，其实结果是一样的。但下面这个写法可以体现<code>遇到 await 后立即返回</code>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">WhenReturnAsync</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;WhenReturnAsync() ThreadId: <span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> async1 = WhenReturnMethodAsync();</span><br><span class="line">    <span class="keyword">await</span> async1;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;WhenReturnAsync() ThreadId: <span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以得出这样的结论：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> WhenReturnMethodAsync();</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">var</span> async1 = WhenReturnMethodAsync();</span><br><span class="line"><span class="keyword">await</span> async1;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> WhenReturnMethodAsync();</span><br><span class="line"><span class="keyword">await</span> WhenReturnMethod2Async();</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">var</span> async1 = WhenReturnMethodAsync();</span><br><span class="line"><span class="keyword">await</span> async1;</span><br><span class="line"><span class="keyword">var</span> async2 = WhenReturnMethod2Async();</span><br><span class="line"><span class="keyword">await</span> async2;</span><br></pre></td></tr></table></figure><p>而当有多个 await 时，正确的写法应该是（至少大部分情况下，我们想要的是）:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> async1 = WhenReturnMethodAsync();</span><br><span class="line"><span class="keyword">var</span> async2 = WhenReturnMethod2Async();</span><br><span class="line"><span class="keyword">await</span> async1;</span><br><span class="line"><span class="keyword">await</span> async2;</span><br></pre></td></tr></table></figure><h4 id="await-并不创建线程-续"><a href="#await-并不创建线程-续" class="headerlink" title="await 并不创建线程 续"></a>await 并不创建线程 续</h4><p>上一小节中的：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> WhenReturnMethodAsync();</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">var</span> async1 = WhenReturnMethodAsync();</span><br><span class="line"><span class="keyword">await</span> async1;</span><br></pre></td></tr></table></figure><p>加上 <code>当 awaitable 已完成</code> 这一节，就能很容易理解 <code>await 并不创建线程</code>。当 WhenReturnMethodAsync 是同步方法时，WhenReturnMethodAsync 完成后才会遇到 await async1。</p><h3 id="命名约定"><a href="#命名约定" class="headerlink" title="命名约定"></a>命名约定</h3><p><a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/task-asynchronous-programming-model#BKMK_NamingConvention">按照惯例</a>，通常返回<code>可等待类型的方法（例如，Task、Task&lt;T&gt;、ValueTask、ValueTask&lt;T&gt;）的名称应以“Async”结尾</code>。启动异步操作但不返回可等待类型的方法的名称不应以“Async”结尾，但可能以“Begin”、“Start”或其他一些动词开头，以表明此方法不返回或抛出操作的结果。</p><p>如果某一约定中的事件、基类或接口协议建议用其他名称，则可以忽略上述约定。例如，不应重命名常用事件处理程序（如 OnButtonClick）。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/task-asynchronous-programming-model">Task asynchronous programming model</a><br><a href="https://www.hexacta.com/task-run-vs-async-await/">TASK.RUN VS ASYNC AWAIT</a><br><a href="https://stackoverflow.com/questions/17661428/async-stay-on-the-current-thread">async - stay on the current thread?</a><br><a href="https://blog.stephencleary.com/2012/02/async-and-await.html">Async and Await</a><br><a href="https://blog.stephencleary.com/2013/11/there-is-no-thread.html">There Is No Thread</a><br><a href="https://www.c-sharpcorner.com/article/async-await-and-asynchronous-programming-in-mvc/">Async, Await And Asynchronous Programming In MVC</a></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>写得太长了，其余关于 Task.Run()、Task.Yeild()、IO bound 与 CPU bound、异常处理等内容，等有时间了，在另一篇文章写了。</p>]]></content>
    
    
    <summary type="html">async/await 引入于 C# 5.0 和 .NET Framework 4.5，简化了异步编程的复杂度。此文配合示例对 async/await进行较深入的探讨，让你对 async/await 有更深的理解。</summary>
    
    
    
    <category term="C#" scheme="https://www.itaru.xyz/categories/C/"/>
    
    <category term="异步" scheme="https://www.itaru.xyz/categories/C/%E5%BC%82%E6%AD%A5/"/>
    
    
    <category term="C#" scheme="https://www.itaru.xyz/tags/C/"/>
    
    <category term="异步" scheme="https://www.itaru.xyz/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 优秀解决方案 - 202201</title>
    <link href="https://www.itaru.xyz/blogs/924496a1.html"/>
    <id>https://www.itaru.xyz/blogs/924496a1.html</id>
    <published>2022-02-03T12:09:22.000Z</published>
    <updated>2022-02-13T07:30:48.984Z</updated>
    
    <content type="html"><![CDATA[<h3 id="3Sum-Medium"><a href="#3Sum-Medium" class="headerlink" title="3Sum  - Medium"></a>3Sum  - Medium</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; ThreeSum(<span class="built_in">int</span>[] n) &#123;        </span><br><span class="line">        <span class="keyword">if</span> (n.Count() &lt; <span class="number">3</span>) <span class="keyword">return</span> <span class="keyword">new</span> List&lt;IList&lt;<span class="built_in">int</span>&gt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> list = <span class="keyword">new</span> List&lt;IList&lt;<span class="built_in">int</span>&gt;&gt;();</span><br><span class="line"></span><br><span class="line">        Array.Sort(n);</span><br><span class="line">        <span class="keyword">var</span> length = n.Count();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> j = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">var</span> k = length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; k) &#123;</span><br><span class="line">                <span class="keyword">var</span> sum = n[i] + n[j] + n[k];          </span><br><span class="line">                <span class="keyword">if</span> (sum == <span class="number">0</span>) </span><br><span class="line">                &#123;</span><br><span class="line">                    list.Add(<span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt; &#123; n[i], n[j++], n[k--] &#125;);</span><br><span class="line">                    <span class="keyword">while</span> (j &lt; k &amp;&amp; n[j] == n[j<span class="number">-1</span>]) j++;</span><br><span class="line">                    <span class="keyword">while</span> (k &gt; j &amp;&amp; n[k] == n[k+<span class="number">1</span>]) k--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) j++;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; <span class="number">0</span>) k--;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> (i &lt; length - <span class="number">2</span> &amp;&amp; n[i+<span class="number">1</span>] == n[i]) i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Remove-Nth-Node-From-End-of-List-Medium"><a href="#Remove-Nth-Node-From-End-of-List-Medium" class="headerlink" title="Remove Nth Node From End of List  - Medium"></a>Remove Nth Node From End of List  - Medium</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public int val;</span></span><br><span class="line"><span class="comment"> *     public ListNode next;</span></span><br><span class="line"><span class="comment"> *     public ListNode(int val=0, ListNode next=null) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.next = next;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">RemoveNthFromEnd</span>(<span class="params">ListNode head, <span class="built_in">int</span> n</span>)</span> &#123;</span><br><span class="line">         ListNode fake = <span class="keyword">new</span> ListNode(<span class="number">0</span>, head);</span><br><span class="line"></span><br><span class="line">           ListNode low = fake;</span><br><span class="line">           ListNode high = fake;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i&lt;=n; i++)&#123;</span><br><span class="line">               high = high.next;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           <span class="keyword">while</span>(high != <span class="literal">null</span>)&#123;</span><br><span class="line">               low = low.next;</span><br><span class="line">               high = high.next;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           low.next = low.next.next;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> fake.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Valid-Parentheses-Easy-M"><a href="#Valid-Parentheses-Easy-M" class="headerlink" title="Valid Parentheses - Easy M"></a>Valid Parentheses - Easy M</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsValid</span>(<span class="params"><span class="built_in">string</span> s</span>)</span> </span><br><span class="line">    &#123;</span><br><span class="line">        Stack&lt;<span class="built_in">char</span>&gt; t = <span class="keyword">new</span> Stack&lt;<span class="built_in">char</span>&gt;();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">char</span> c <span class="keyword">in</span> s)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span> || c == <span class="string">&#x27;&#123;&#x27;</span> || c == <span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">                t.Push(c);</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                 t.TryPop(<span class="keyword">out</span> <span class="built_in">char</span> cc);</span><br><span class="line">                 &#123;</span><br><span class="line">                     <span class="keyword">switch</span> (cc)</span><br><span class="line">                     &#123;</span><br><span class="line">                         <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                             <span class="keyword">if</span> (c != <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">                                 <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                             <span class="keyword">break</span>;</span><br><span class="line">                         <span class="keyword">case</span> <span class="string">&#x27;&#123;&#x27;</span>:</span><br><span class="line">                             <span class="keyword">if</span> (c != <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">                                 <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                             <span class="keyword">break</span>;</span><br><span class="line">                         <span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span>:</span><br><span class="line">                             <span class="keyword">if</span> (c != <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">                                 <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                             <span class="keyword">break</span>;</span><br><span class="line">                         <span class="literal">default</span>:</span><br><span class="line">                             <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t.Count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TryPop 用的比较好点，但为何比下面这个快了一倍？ 68ms vs 106ms。下面这个解法更简洁。<br>Stack<T> 源码中 <a href="https://referencesource.microsoft.com/#System/compmod/system/collections/generic/stack.cs,83b1a3864aaa7198,references">Push</a> 等操作会计数（_size），而 <a href="https://referencesource.microsoft.com/#System/compmod/system/collections/generic/stack.cs,47350acaee6be7b6,references">Count</a> 是直接返回 _size 的。所以Count 不耗时的。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsValid</span>(<span class="params"><span class="built_in">string</span> s</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> stack = <span class="keyword">new</span> Stack&lt;<span class="built_in">char</span>&gt;();</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="built_in">char</span> c <span class="keyword">in</span> s)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span>(c)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span>(stack.Count == <span class="number">0</span> || stack.Pop() != <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span>(stack.Count == <span class="number">0</span> || stack.Pop() != <span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;]&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span>(stack.Count == <span class="number">0</span> || stack.Pop() != <span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="literal">default</span>:</span><br><span class="line">                    stack.Push(c);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.Count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Merge-Two-Sorted-Lists-Easy-M"><a href="#Merge-Two-Sorted-Lists-Easy-M" class="headerlink" title="Merge Two Sorted Lists  - Easy M"></a>Merge Two Sorted Lists  - Easy M</h3><p>循环比递归快，但递归比较优雅。</p><p>第一次提交：84 ms；第二次提交：116 ms。Accepted Solutions Runtime Distribution 中和这个几乎一模一样的：68 ms。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public int val;</span></span><br><span class="line"><span class="comment"> *     public ListNode next;</span></span><br><span class="line"><span class="comment"> *     public ListNode(int val=0, ListNode next=null) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.next = next;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">MergeTwoLists</span>(<span class="params">ListNode list1, ListNode list2</span>)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        ListNode preHead = <span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">        ListNode prevNode = preHead;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(list1 != <span class="literal">null</span> &amp;&amp; list2 != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(list1.val &lt; list2.val)</span><br><span class="line">            &#123;</span><br><span class="line">                prevNode.next = list1;</span><br><span class="line">                list1 = list1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                prevNode.next = list2;</span><br><span class="line">                list2 = list2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            prevNode = prevNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        prevNode.next = list1 == <span class="literal">null</span> ? list2 : list1;</span><br><span class="line">        <span class="keyword">return</span> preHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一次提交：156 ms；第二次提交：147 ms。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public int val;</span></span><br><span class="line"><span class="comment"> *     public ListNode next;</span></span><br><span class="line"><span class="comment"> *     public ListNode(int val=0, ListNode next=null) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.next = next;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">MergeTwoLists</span>(<span class="params">ListNode list1, ListNode list2</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(list1 == <span class="literal">null</span>) <span class="keyword">return</span> list2;</span><br><span class="line">        <span class="keyword">if</span>(list2 == <span class="literal">null</span>) <span class="keyword">return</span> list1;</span><br><span class="line">        <span class="keyword">if</span>(list1.val &lt; list2.val)</span><br><span class="line">        &#123;</span><br><span class="line">            list1.next = MergeTwoLists(list1.next, list2);</span><br><span class="line">            <span class="keyword">return</span>  list1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            list2.next = MergeTwoLists(list1, list2.next);</span><br><span class="line">            <span class="keyword">return</span>  list2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Generate-Parentheses-Medium"><a href="#Generate-Parentheses-Medium" class="headerlink" title="Generate Parentheses - Medium"></a>Generate Parentheses - Medium</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; ans = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            ans.add(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; n; ++c)</span><br><span class="line">                <span class="keyword">for</span> (String left: generateParenthesis(c))</span><br><span class="line">                    <span class="keyword">for</span> (String right: generateParenthesis(n-<span class="number">1</span>-c))</span><br><span class="line">                        ans.add(<span class="string">&quot;(&quot;</span> + left + <span class="string">&quot;)&quot;</span> + right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Fibonacci-Number-Easy-M"><a href="#Fibonacci-Number-Easy-M" class="headerlink" title="Fibonacci Number - Easy M"></a>Fibonacci Number - Easy M</h3><p>36 ms, faster than 59.43%，递归 + 缓存，感觉写得挺简洁的。虽然时间复杂度和代码清晰度都比不上循环。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="built_in">int</span>[] cache;<span class="comment">// = new int[31];</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Solution</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        cache =  <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">31</span>];</span><br><span class="line">        cache[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Fib</span>(<span class="params"><span class="built_in">int</span> n</span>)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(cache[n] != <span class="number">0</span> || n == <span class="number">0</span>) <span class="keyword">return</span> cache[n];</span><br><span class="line">        <span class="keyword">return</span> cache[n] = Fib(n - <span class="number">1</span>) + Fib(n - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Search-in-Rotated-Sorted-Array-Medium"><a href="#Search-in-Rotated-Sorted-Array-Medium" class="headerlink" title="Search in Rotated Sorted Array - Medium"></a>Search in Rotated Sorted Array - Medium</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Search</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> target</span>)</span> &#123;</span><br><span class="line">       <span class="built_in">int</span> start = <span class="number">0</span>, end = nums.Length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">      <span class="built_in">int</span> mid = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt;= nums[start]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (target &gt;= nums[start] &amp;&amp; target &lt; nums[mid]) end = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> start = mid + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target &lt;= nums[end] &amp;&amp; target &gt; nums[mid]) start = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> end = mid - <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Find-First-and-Last-Position-of-Element-in-Sorted-Array-Medium-M"><a href="#Find-First-and-Last-Position-of-Element-in-Sorted-Array-Medium-M" class="headerlink" title="Find First and Last Position of Element in Sorted Array - Medium M"></a>Find First and Last Position of Element in Sorted Array - Medium M</h3><p>简洁，新颖。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span>[] <span class="title">SearchRange</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> target</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> start = Rank(nums, <span class="number">0</span>, nums.Length - <span class="number">1</span>, target - <span class="number">0.5</span>);</span><br><span class="line">        <span class="built_in">int</span> end = Rank(nums, start, nums.Length - <span class="number">1</span>, target + <span class="number">0.5</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(start &gt; end) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">int</span>[]&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">int</span>[]&#123;start,end&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">int</span> <span class="title">Rank</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> lo, <span class="built_in">int</span> hi, <span class="built_in">double</span> d</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(lo &gt; hi) <span class="keyword">return</span> lo;</span><br><span class="line">        <span class="built_in">int</span> mid = lo + (hi - lo)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(d &lt; nums[mid]) <span class="keyword">return</span> Rank(nums, lo, mid - <span class="number">1</span>, d);</span><br><span class="line">        <span class="keyword">return</span> Rank(nums, mid + <span class="number">1</span>, hi, d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Combination-Sum-Medium-M"><a href="#Combination-Sum-Medium-M" class="headerlink" title="Combination Sum - Medium M"></a>Combination Sum - Medium M</h3><p>linq 版</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; result;</span><br><span class="line">    <span class="keyword">public</span> IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; CombinationSum(<span class="built_in">int</span>[] candidates, <span class="built_in">int</span> target) &#123;</span><br><span class="line">        result = <span class="keyword">new</span> List&lt;IList&lt;<span class="built_in">int</span>&gt;&gt;();</span><br><span class="line">        FindCombination(candidates, <span class="number">0</span>, target, <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">FindCombination</span>(<span class="params"><span class="built_in">int</span>[] candidates, <span class="built_in">int</span> min, <span class="built_in">int</span> max, List&lt;<span class="built_in">int</span>&gt; list</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(max == <span class="number">0</span>) </span><br><span class="line">            result.Add(<span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;(list));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span>(<span class="keyword">var</span> item <span class="keyword">in</span> candidates.Where(e =&gt; e &gt;= min &amp;&amp; e &lt;= max))</span><br><span class="line">        &#123;</span><br><span class="line">            list.Add(item);</span><br><span class="line">            FindCombination(candidates,item , max - item, list);</span><br><span class="line">            list.Remove(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非 linq 版</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; CombinationSum(<span class="built_in">int</span>[] candidates, <span class="built_in">int</span> target)</span><br><span class="line">&#123;</span><br><span class="line">    List&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; result = <span class="keyword">new</span> List&lt;IList&lt;<span class="built_in">int</span>&gt;&gt;();</span><br><span class="line">    List&lt;<span class="built_in">int</span>&gt; combination = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">    Array.Sort(candidates);</span><br><span class="line">    CombinationSum(result, candidates, combination, target, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CombinationSum</span>(<span class="params">IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; result, <span class="built_in">int</span>[] candidates, IList&lt;<span class="built_in">int</span>&gt; combination, <span class="built_in">int</span> target, <span class="built_in">int</span> start</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (target == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        result.Add(<span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;(combination));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = start; i != candidates.Length &amp;&amp; target &gt;= candidates[i]; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        combination.Add(candidates[i]);</span><br><span class="line">        CombinationSum(result, candidates, combination, target - candidates[i], i);</span><br><span class="line">        combination.Remove(combination.Last());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Merge-k-Sorted-Lists-Hard"><a href="#Merge-k-Sorted-Lists-Hard" class="headerlink" title="Merge k Sorted Lists - Hard"></a>Merge k Sorted Lists - Hard</h3><p>使用元组 Tuple 或者 ValueTuple。最好的方法是优先队列，但是 C# <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.priorityqueue-2?view=net-6.0">优先队列</a>在 .NET 6 才有。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">MergeKLists</span>(<span class="params">ListNode[] lists</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (lists == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ss = <span class="keyword">new</span> SortedSet&lt;(<span class="built_in">int</span> Value, <span class="built_in">int</span> Index, ListNode Node)&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; lists.Length; i++)</span><br><span class="line">        <span class="keyword">if</span> (lists[i] != <span class="literal">null</span>)</span><br><span class="line">            ss.Add((lists[i].val, i, lists[i]));</span><br><span class="line"></span><br><span class="line">    ListNode head = <span class="keyword">new</span> ListNode(), tail = head;</span><br><span class="line">    <span class="keyword">while</span> (ss.Count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> min = ss.Min;</span><br><span class="line">        ss.Remove(min);</span><br><span class="line"></span><br><span class="line">        tail.next = min.Node;</span><br><span class="line">        tail = tail.next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> next = min.Node.next;</span><br><span class="line">        <span class="keyword">if</span> (next != <span class="literal">null</span>)</span><br><span class="line">            ss.Add((next.val, min.Index, next));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Jump-Game-II-Medium"><a href="#Jump-Game-II-Medium" class="headerlink" title="Jump Game II - Medium"></a>Jump Game II - Medium</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Jump</span>(<span class="params"><span class="built_in">int</span>[] nums</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> jumps = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> farthest = <span class="built_in">int</span>.MinValue;</span><br><span class="line">        <span class="built_in">int</span> currentJumpEnd = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>; i &lt; nums.Length<span class="number">-1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">farthest = Math.Max(farthest, i + nums[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i == currentJumpEnd)</span><br><span class="line">&#123;</span><br><span class="line">jumps++;</span><br><span class="line">currentJumpEnd = farthest;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> jumps;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Permutations-Medium"><a href="#Permutations-Medium" class="headerlink" title="Permutations - Medium"></a>Permutations - Medium</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; Permute(<span class="built_in">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">var</span> results = <span class="keyword">new</span> List&lt;IList&lt;<span class="built_in">int</span>&gt;&gt;();</span><br><span class="line">        PermuteForward(nums, <span class="number">0</span>, results);</span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PermuteForward</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> start, List&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; results</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (start == nums.Length) &#123;</span><br><span class="line">            results.Add(<span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;(nums));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = start; i &lt; nums.Length; i++) &#123;</span><br><span class="line">            <span class="comment">// swap first with a later index</span></span><br><span class="line">            Swap(nums, start, i);</span><br><span class="line">            PermuteForward(nums, start + <span class="number">1</span>, results);</span><br><span class="line">            <span class="comment">// backtrack</span></span><br><span class="line">            Swap(nums, i, start);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Swap</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> i, <span class="built_in">int</span> j</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> temp = nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Merge-Intervals-Medium"><a href="#Merge-Intervals-Medium" class="headerlink" title="Merge Intervals - Medium"></a>Merge Intervals - Medium</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span>[][] Merge(<span class="built_in">int</span>[][] intervals) &#123;</span><br><span class="line">            Array.Sort(intervals, (a, b) =&gt; a[<span class="number">0</span>].CompareTo(b[<span class="number">0</span>]));</span><br><span class="line"><span class="keyword">var</span> merged = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>[]&gt;();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> interval <span class="keyword">in</span> intervals)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (merged.Count == <span class="number">0</span> || merged.Last()[<span class="number">1</span>] &lt; interval[<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line">merged.Add(interval);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">merged.Last()[<span class="number">1</span>] = Math.Max(merged.Last()[<span class="number">1</span>], interval[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> merged.ToArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Unique-Paths-Medium-M"><a href="#Unique-Paths-Medium-M" class="headerlink" title="Unique Paths - Medium M"></a>Unique Paths - Medium M</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">UniquePaths</span>(<span class="params"><span class="built_in">int</span> m, <span class="built_in">int</span> n</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span>[,] memo = <span class="keyword">new</span> <span class="built_in">int</span>[m + <span class="number">1</span>, n + <span class="number">1</span>];</span><br><span class="line">        memo[<span class="number">0</span>, <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                memo[i, j] = memo[i - <span class="number">1</span>, j] + memo[i, j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> memo[m, n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="First-Missing-Positive-Hard"><a href="#First-Missing-Positive-Hard" class="headerlink" title="First Missing Positive - Hard"></a>First Missing Positive - Hard</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">FirstMissingPositive</span>(<span class="params"><span class="built_in">int</span>[] nums</span>)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          nums can contain duplicates /negative numbers/unosorted</span></span><br><span class="line"><span class="comment">          We need to implement it in O(n) time with constant space</span></span><br><span class="line"><span class="comment">          Algorithm</span></span><br><span class="line"><span class="comment">          1. We will set all numbers&lt;=0 as nums.Length(out of bound)</span></span><br><span class="line"><span class="comment">          2. When i encounter a num in nums i will go to num-1 index to mark it as negative </span></span><br><span class="line"><span class="comment">          3. Iterate through an array and return the index of the first positive number </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="built_in">int</span> n=nums.Length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="keyword">if</span>(nums[i]&lt;=<span class="number">0</span>)</span><br><span class="line">           &#123;</span><br><span class="line">              nums[i]=n+<span class="number">1</span>;               </span><br><span class="line">           &#125;      </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="built_in">int</span> absVal=Math.Abs(nums[i]);</span><br><span class="line">           <span class="built_in">int</span> idx=absVal<span class="number">-1</span>;</span><br><span class="line">           <span class="keyword">if</span>(idx&lt;n)</span><br><span class="line">           &#123;</span><br><span class="line">             nums[idx]=-Math.Abs(nums[idx]);  </span><br><span class="line">           &#125;                                 </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span>(nums[i]&gt;<span class="number">0</span>)</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">return</span> i+<span class="number">1</span>;  </span><br><span class="line">          &#125;            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> n+<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Minimum-Path-Sum-Medium-M"><a href="#Minimum-Path-Sum-Medium-M" class="headerlink" title="Minimum Path Sum - Medium M"></a>Minimum Path Sum - Medium M</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">MinPathSum</span>(<span class="params"><span class="built_in">int</span>[][] grid</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> m = grid.Length, n = grid[<span class="number">0</span>].Length; </span><br><span class="line">        <span class="keyword">var</span> memo = <span class="keyword">new</span> <span class="built_in">int</span>[m + <span class="number">1</span>, n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">2</span>; i &lt;= m; i++)</span><br><span class="line">            memo[i, <span class="number">0</span>] = <span class="built_in">int</span>.MaxValue;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">            memo[<span class="number">0</span>, i] = <span class="built_in">int</span>.MaxValue;</span><br><span class="line">        memo[<span class="number">1</span>, <span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                memo[i, j] = Math.Min(memo[i - <span class="number">1</span>, j], memo[i, j - <span class="number">1</span>]) + grid[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> memo[m, n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个解决方案没有前一个看着舒服，但是给了我一个启示：<code>可以用内嵌方法</code>。适合解决需要递归和记录 memo 的例子。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">MinPathSum</span>(<span class="params"><span class="built_in">int</span>[][] grid</span>)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">int</span> m = grid.Length;</span><br><span class="line">        <span class="built_in">int</span> n = grid[<span class="number">0</span>].Length;</span><br><span class="line">        <span class="keyword">var</span> memo = <span class="keyword">new</span> <span class="built_in">int</span>?[m,n];</span><br><span class="line">        <span class="keyword">return</span> dfs(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="built_in">int</span> <span class="title">dfs</span>(<span class="params"><span class="built_in">int</span> row, <span class="built_in">int</span> col</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(row == m &amp;&amp; col == n)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(row &gt;= m || col &gt;= n)</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">int</span>.MaxValue;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(memo[row,col].HasValue)</span><br><span class="line">                <span class="keyword">return</span> memo[row,col].Value;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">int</span> ans = grid[row][col];</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> sumRight = dfs(row, col+<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">int</span> sumDown = dfs(row + <span class="number">1</span>, col);</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">int</span>  minSum = Math.Min(sumRight, sumDown);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(minSum != <span class="built_in">int</span>.MaxValue)</span><br><span class="line">                ans +=  minSum;</span><br><span class="line"></span><br><span class="line">            memo[row,col] = ans;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Climbing-Stairs-Easy"><a href="#Climbing-Stairs-Easy" class="headerlink" title="Climbing Stairs - Easy"></a>Climbing Stairs - Easy</h3><p>GET 新技巧 <code>(i, j) = (j, i + j)</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">ClimbStairs</span>(<span class="params"><span class="built_in">int</span> n</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">4</span>) <span class="keyword">return</span> n;</span><br><span class="line">        n -= <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">int</span> i = <span class="number">1</span>, j = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (n-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            (i, j) = (j, i + j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Trapping-Rain-Water-Hard"><a href="#Trapping-Rain-Water-Hard" class="headerlink" title="Trapping Rain Water - Hard"></a>Trapping Rain Water - Hard</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Trap</span>(<span class="params"><span class="built_in">int</span>[] height</span>)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">int</span> left =<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> right = height.Length;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">int</span> maxLeft=height[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">int</span> maxRight=height[height.Length<span class="number">-1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">int</span> totalSum =<span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(maxLeft &lt; maxRight)</span><br><span class="line">            &#123;</span><br><span class="line">                left++;</span><br><span class="line">                maxLeft = Math.Max(maxLeft,height[left]);</span><br><span class="line">                totalSum += maxLeft - height[left];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                right--;</span><br><span class="line">                maxRight = Math.Max(maxRight,height[right]);</span><br><span class="line">                totalSum += maxRight - height[right];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> totalSum;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Sort-Colors-Medium"><a href="#Sort-Colors-Medium" class="headerlink" title="Sort Colors - Medium"></a>Sort Colors - Medium</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SortColors</span>(<span class="params"><span class="built_in">int</span>[] nums</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.Length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> right = nums.Length - <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">int</span> cursorIndex = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (cursorIndex &lt;= right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[cursorIndex] == <span class="number">1</span>)</span><br><span class="line">                cursorIndex++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[cursorIndex] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                SwapNum(nums, cursorIndex, left);</span><br><span class="line">                left++;</span><br><span class="line">                cursorIndex++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[cursorIndex] == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                SwapNum(nums, cursorIndex, right);</span><br><span class="line">                right--;           </span><br><span class="line">            &#125;            </span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SwapNum</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> i, <span class="built_in">int</span> j</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> temp = nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Unique-Binary-Search-Trees-Medium"><a href="#Unique-Binary-Search-Trees-Medium" class="headerlink" title="Unique Binary Search Trees - Medium"></a>Unique Binary Search Trees - Medium</h3><p>递归</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">NumTrees</span>(<span class="params"><span class="built_in">int</span> n</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span>[] memo = <span class="keyword">new</span> <span class="built_in">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        memo[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> GetNumTrees(memo, n);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">GetNumTrees</span>(<span class="params"><span class="built_in">int</span>[] memo, <span class="built_in">int</span> n</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(memo[n] != <span class="number">0</span>) <span class="keyword">return</span> memo[n];</span><br><span class="line">        <span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += GetNumTrees(memo, i) * GetNumTrees(memo, n - <span class="number">1</span> - i);</span><br><span class="line">        &#125;</span><br><span class="line">        memo[n] = sum;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>循环</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">NumTrees</span>(<span class="params"><span class="built_in">int</span> n</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span>[] memo = <span class="keyword">new</span> <span class="built_in">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        memo[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                memo[i] += memo[j] * memo[i - <span class="number">1</span> - j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> memo[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Binary-Tree-Inorder-Traversal-Easy"><a href="#Binary-Tree-Inorder-Traversal-Easy" class="headerlink" title="Binary Tree Inorder Traversal - Easy"></a>Binary Tree Inorder Traversal - Easy</h3><p>递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        helper(root, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode root, List&lt;Integer&gt; res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            helper(root.left, res);</span><br><span class="line">            res.add(root.val);</span><br><span class="line">            helper(root.right, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Stack 迭代</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        TreeNode curr = root;</span><br><span class="line">        <span class="keyword">while</span> (curr != <span class="keyword">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (curr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(curr);</span><br><span class="line">                curr = curr.left;</span><br><span class="line">            &#125;</span><br><span class="line">            curr = stack.pop();</span><br><span class="line">            res.add(curr.val);</span><br><span class="line">            curr = curr.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Morris Traversal: Space complexity: O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        TreeNode curr = root;</span><br><span class="line">        TreeNode pre;</span><br><span class="line">        <span class="keyword">while</span> (curr != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (curr.left == <span class="keyword">null</span>) &#123;</span><br><span class="line">                res.add(curr.val);</span><br><span class="line">                curr = curr.right; <span class="comment">// move to next right node</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// has a left subtree</span></span><br><span class="line">                pre = curr.left;</span><br><span class="line">                <span class="keyword">while</span> (pre.right != <span class="keyword">null</span>) &#123; <span class="comment">// find rightmost</span></span><br><span class="line">                    pre = pre.right;</span><br><span class="line">                &#125;</span><br><span class="line">                pre.right = curr; <span class="comment">// put cur after the pre node</span></span><br><span class="line">                TreeNode temp = curr; <span class="comment">// store cur node</span></span><br><span class="line">                curr = curr.left; <span class="comment">// move cur to the top of the new tree</span></span><br><span class="line">                temp.left = <span class="keyword">null</span>; <span class="comment">// original cur left be null, avoid infinite loops</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Validate-Binary-Search-Tree-Medium"><a href="#Validate-Binary-Search-Tree-Medium" class="headerlink" title="Validate Binary Search Tree - Medium"></a>Validate Binary Search Tree - Medium</h3><p>GET 新技能：comp &lt; (comp = node.val)</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     public int val;</span></span><br><span class="line"><span class="comment"> *     public TreeNode left;</span></span><br><span class="line"><span class="comment"> *     public TreeNode right;</span></span><br><span class="line"><span class="comment"> *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsValidBST</span>(<span class="params">TreeNode root</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">long</span> comp = <span class="built_in">long</span>.MinValue;</span><br><span class="line">        <span class="keyword">return</span> GetIsValidBST(root);</span><br><span class="line">        <span class="function"><span class="built_in">bool</span> <span class="title">GetIsValidBST</span>(<span class="params">TreeNode node</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(node != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> GetIsValidBST(node.left) </span><br><span class="line">                    &amp;&amp; comp &lt; (comp = node.val)</span><br><span class="line">                    &amp;&amp; GetIsValidBST(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Reverse-Nodes-in-k-Group-Hard"><a href="#Reverse-Nodes-in-k-Group-Hard" class="headerlink" title="Reverse Nodes in k-Group - Hard"></a>Reverse Nodes in k-Group - Hard</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">ReverseKGroup</span>(<span class="params">ListNode head, <span class="built_in">int</span> k</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> node = head;</span><br><span class="line">        <span class="keyword">var</span> l = k;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(node != <span class="literal">null</span> &amp;&amp; --l &gt; <span class="number">0</span>) node = node.next;</span><br><span class="line">        <span class="keyword">if</span>(l &gt; <span class="number">0</span>) <span class="keyword">return</span> head;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> tail = node.next;</span><br><span class="line">        node.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">var</span> rev = Reverse(<span class="literal">null</span>, head);</span><br><span class="line">        head.next = ReverseKGroup(tail, k);</span><br><span class="line">        <span class="keyword">return</span> rev;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">ListNode <span class="title">Reverse</span>(<span class="params">ListNode left, ListNode right</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(right == <span class="literal">null</span>) <span class="keyword">return</span> left;</span><br><span class="line">        <span class="keyword">var</span> temp = right.next;</span><br><span class="line">        right.next = left;</span><br><span class="line">        <span class="comment">//left = right;</span></span><br><span class="line">        <span class="comment">//right = temp;</span></span><br><span class="line">        <span class="comment">//return Reverse(left, right);</span></span><br><span class="line">        <span class="keyword">return</span> Reverse(right, temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseKGroup</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        ListNode curr = head, prev = <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (curr == <span class="keyword">null</span>) <span class="keyword">return</span> reverseKGroup(prev, i); <span class="comment">// We need to reset the nodes that have been reversed</span></span><br><span class="line">            ListNode tmp = curr.next;</span><br><span class="line">            curr.next = prev;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        head.next = reverseKGroup(curr, k);</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Search-a-2D-Matrix-Medium-M"><a href="#Search-a-2D-Matrix-Medium-M" class="headerlink" title="Search a 2D Matrix - Medium M"></a>Search a 2D Matrix - Medium M</h3><p>BinarySearch Runtime: 181 ms, faster than 9.26% 这是没想到的。</p><p>O(log m*n)</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">SearchMatrix</span>(<span class="params"><span class="built_in">int</span>[][] matrix, <span class="built_in">int</span> target</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> m = matrix.Length;</span><br><span class="line">        <span class="built_in">int</span> n = matrix[<span class="number">0</span>].Length;</span><br><span class="line">        <span class="built_in">int</span> start = <span class="number">0</span>, end = m * n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(start &lt;= end)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> mid = start + (end - start)/<span class="number">2</span>;</span><br><span class="line">            <span class="built_in">int</span> midValue = matrix[mid / n][mid % n];</span><br><span class="line">            <span class="keyword">if</span>(midValue &gt; target) end = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(midValue &lt; target) start = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有更简便的。</p><p>最大为：O(log m+n)</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">SearchMatrix</span>(<span class="params"><span class="built_in">int</span>[][] matrix, <span class="built_in">int</span> target</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> r = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> c = matrix[<span class="number">0</span>].Length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (r &lt; matrix.Length &amp;&amp; c &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[r][c] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (matrix[r][c] &gt; target) &#123;</span><br><span class="line">                c--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Symmetric-Tree-Easy"><a href="#Symmetric-Tree-Easy" class="headerlink" title="Symmetric Tree - Easy"></a>Symmetric Tree - Easy</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsSymmetric</span>(<span class="params">TreeNode root</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> IsEquals(root.left, root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsEquals</span>(<span class="params">TreeNode left, TreeNode right</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(left == <span class="literal">null</span> &amp;&amp; right == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(left == <span class="literal">null</span> || right == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> left.val == right.val </span><br><span class="line">            &amp;&amp; IsEquals(left.left, right.right)</span><br><span class="line">            &amp;&amp; IsEquals(left.right, right.left);;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Maximum-Depth-of-Binary-Tree-Easy"><a href="#Maximum-Depth-of-Binary-Tree-Easy" class="headerlink" title="Maximum Depth of Binary Tree - Easy"></a>Maximum Depth of Binary Tree - Easy</h3><p>这解法也太神了！</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">MaxDepth</span>(<span class="params">TreeNode root</span>)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> Math.Max(MaxDepth(root.left), MaxDepth(root.right)) + <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal-Medium-M"><a href="#Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal-Medium-M" class="headerlink" title="Construct Binary Tree from Preorder and Inorder Traversal - Medium M"></a>Construct Binary Tree from Preorder and Inorder Traversal - Medium M</h3><p>常规解法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">BuildTree</span>(<span class="params"><span class="built_in">int</span>[] preorder, <span class="built_in">int</span>[] inorder</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> len = preorder.Length;</span><br><span class="line">        <span class="keyword">return</span> BuildTree(preorder, inorder, <span class="number">0</span>, len - <span class="number">1</span>, <span class="number">0</span>, len - <span class="number">1</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode <span class="title">BuildTree</span>(<span class="params"><span class="built_in">int</span>[] preorder, <span class="built_in">int</span>[] inorder, <span class="built_in">int</span> pStart, <span class="built_in">int</span> pEnd, <span class="built_in">int</span> iStart, <span class="built_in">int</span> iEnd</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(pStart &gt; pEnd) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">value</span> = preorder[pStart];</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(inorder[iStart + i] != <span class="keyword">value</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TreeNode(</span><br><span class="line">        <span class="keyword">value</span>,</span><br><span class="line">        BuildTree(preorder, inorder, pStart + <span class="number">1</span>, pStart + i, iStart, iStart + i - <span class="number">1</span>),</span><br><span class="line">        BuildTree(preorder, inorder, pStart + i + <span class="number">1</span>, pEnd, iStart + i + <span class="number">1</span>, iEnd)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GET 新技能：<code>IndexMap</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> preorderIndex;</span><br><span class="line">    Map&lt;Integer, Integer&gt; inorderIndexMap;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">        preorderIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// build a hashmap to store value -&gt; its index relations</span></span><br><span class="line">        inorderIndexMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inorder.length; i++) &#123;</span><br><span class="line">            inorderIndexMap.put(inorder[i], i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arrayToTree(preorder, <span class="number">0</span>, preorder.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">arrayToTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// if there are no elements to construct the tree</span></span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// select the preorder_index element as the root and increment it</span></span><br><span class="line">        <span class="keyword">int</span> rootValue = preorder[preorderIndex++];</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(rootValue);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// build left and right subtree</span></span><br><span class="line">        <span class="comment">// excluding inorderIndexMap[rootValue] element because it&#x27;s the root</span></span><br><span class="line">        root.left = arrayToTree(preorder, left, inorderIndexMap.get(rootValue) - <span class="number">1</span>);</span><br><span class="line">        root.right = arrayToTree(preorder, inorderIndexMap.get(rootValue) + <span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">2022 年 1 月份做过的 LeetCode 算法题中值得记录的解决方法</summary>
    
    
    
    <category term="算法" scheme="https://www.itaru.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://www.itaru.xyz/categories/%E7%AE%97%E6%B3%95/LeetCode/"/>
    
    
    <category term="算法" scheme="https://www.itaru.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://www.itaru.xyz/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>PicGo 上传失败 服务端出错 请重试</title>
    <link href="https://www.itaru.xyz/blogs/ede6a05e.html"/>
    <id>https://www.itaru.xyz/blogs/ede6a05e.html</id>
    <published>2022-01-28T14:21:57.000Z</published>
    <updated>2022-01-28T14:25:37.889Z</updated>
    
    <content type="html"><![CDATA[<p>我使用的是 vscode + PicGo插件 + GitHub。</p><p>如果是原先使用得好好的，某一刻开始，怎么重试都报错。那可能是 token 过期了。</p><p>去 <a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a> 检查下，如果过期了可以重新<a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#github%E5%9B%BE%E5%BA%8A">设置一个</a>。</p><hr><p>吐槽：</p><p>就离谱，一页 10 条，有 8 条是一样的。</p><p><img src="https://ih.itaru.xyz/images/20220128221150.png" alt="20220128221150"></p>]]></content>
    
    
    <summary type="html">PicGo 上传时报错：上传失败，服务端出错，请重试！记录下解决方法。</summary>
    
    
    
    <category term="博客搭建" scheme="https://www.itaru.xyz/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    <category term="图床" scheme="https://www.itaru.xyz/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%9B%BE%E5%BA%8A/"/>
    
    
    <category term="博客搭建" scheme="https://www.itaru.xyz/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    <category term="图床" scheme="https://www.itaru.xyz/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>EF DB-First 学习笔记</title>
    <link href="https://www.itaru.xyz/blogs/db29be24.html"/>
    <id>https://www.itaru.xyz/blogs/db29be24.html</id>
    <published>2022-01-21T14:24:43.000Z</published>
    <updated>2022-02-13T07:33:59.671Z</updated>
    
    <content type="html"><![CDATA[<p>教程网址：<a href="https://www.entityframeworktutorial.net/entityframework6/introduction.aspx">EF 6 DB-First - EntityFrameworkTutorial</a></p><p>在数据库优先开发方法中，您可以使用集成在 Visual Studio 中的 EDM 向导或执行 EF 命令为现有数据库生成上下文和实体。</p><h3 id="EDM-的其他查看方式"><a href="#EDM-的其他查看方式" class="headerlink" title="EDM 的其他查看方式"></a>EDM 的其他查看方式</h3><ol><li>右键 edmx -&gt; 打开方式 -&gt; 可以选择其他打开方式，如 xml 编辑器 等。</li><li>双击 demx（会打开 Diagram 窗口） -&gt; Diagram 窗口中右键 -&gt; 模型浏览器（<a href="https://www.entityframeworktutorial.net/model-browser-in-entity-framework.aspx">Model Browser</a>）<br>注：模型浏览器中的 .Store 代表存储模型 SSDL。</li></ol><p><img src="https://ih.itaru.xyz/images/20220120222215.png" alt="20220120222215"></p><h3 id="实体之间的关系"><a href="#实体之间的关系" class="headerlink" title="实体之间的关系"></a>实体之间的关系</h3><ol><li>一对一关系</li><li>一对多关系</li><li>多对多关系 //可能需要创建中间表</li></ol><h3 id="EF-中的查询方式"><a href="#EF-中的查询方式" class="headerlink" title="EF 中的查询方式"></a>EF 中的查询方式</h3><ol><li>LINQ-to-Entities</li><li><a href="https://www.entityframeworktutorial.net/Querying-with-EDM.aspx#:~:text=Entity%20SQL%20is%20another%20way%20to%20create%20a%20query">Entity SQL</a> //不是很清楚该在什么情况下使用</li><li>Native SQL</li></ol><h3 id="EF-查询"><a href="#EF-查询" class="headerlink" title="EF 查询"></a>EF 查询</h3><ul><li><code>如果 linq 中使用字面量，生成的 sql 的条件也是字面量的；如果使用参数，生成的 sql 也是</code><a href="https://www.entityframeworktutorial.net/querying-entity-graph-in-entity-framework.aspx#:~:text=Parameterized%20Query">参数化</a><code>的。</code></li><li>EF Core 生成的 sql 语句貌似比 EF 6 的简洁（易读）。</li><li>较少用但挺有用的方法：Find()</li><li>较少用但挺有用的查询方式：嵌套查询（<a href="https://www.entityframeworktutorial.net/querying-entity-graph-in-entity-framework.aspx#:~:text=Nested%20queries">Nested queries</a>）</li><li>返回集合结果：ToList、ToArray、ToDictionary、ToLookup。</li></ul><h3 id="EF-加载方式"><a href="#EF-加载方式" class="headerlink" title="EF 加载方式"></a>EF 加载方式</h3><h4 id="Eager-Loading"><a href="#Eager-Loading" class="headerlink" title="Eager Loading"></a>Eager Loading</h4><p><code>预加载是</code>对一种类型的实体进行查询的同时加载相关联的实体（导航属性）的加载方式。</p><p>Students.Include(s =&gt; s.Standard)（或者 Students.Include(“Standard”)）<br>Students.Include(s =&gt; <code>s.Standard.Teachers</code>)。</p><h4 id="Lazy-Loading"><a href="#Lazy-Loading" class="headerlink" title="Lazy Loading"></a>Lazy Loading</h4><p><code>延迟加载</code>是查询时不加载相关联的数据，您特别请求它时才会加载。</p><p>延迟加载规则： </p><ol><li>context.Configuration.ProxyCreationEnabled 应为 true。<a href="https://www.itaru.xyz/blogs/d23db665.html#Entity-%E7%9A%84%E7%B1%BB%E5%9E%8B#:~:text=POCO%20%E5%AE%9E%E4%BD%93%E5%BA%94%E6%BB%A1%E8%B6%B3%E4%BB%A5%E4%B8%8B%E8%A6%81%E6%B1%82%E6%89%8D%E8%83%BD%E6%88%90%E4%B8%BA%20POCO%20%E4%BB%A3%E7%90%86">实体应符合 Dynamic Proxy 要求。</a></li><li>context.Configuration.LazyLoadingEnabled 应为 true。this.Configuration.LazyLoadingEnabled = false 时，全局都不可以延迟加载。</li><li>导航属性（Navigation property）应定义为 public、virtual。如果属性未定义为 virtual，则上下文无法进行延迟加载。去掉 virtual 可关闭特定属性的延迟加载功能<code>（也可能会因为不符合 Dynamic Proxy 要求而使其所属的整个实体不能延迟加载，没有测试）</code>。</li></ol><h4 id="Explicit-Loading"><a href="#Explicit-Loading" class="headerlink" title="Explicit Loading"></a>Explicit Loading</h4><p>即使禁用延迟加载，仍然可以延迟加载相关实体，但必须通过显式调用来完成。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">context.Entry(student).Reference(s =&gt; s.StudentAddress).Load(); <span class="comment">// 加载 StudentAddress</span></span><br><span class="line">context.Entry(student).Collection(s =&gt; s.StudentCourses).Load(); <span class="comment">// 加载 Courses 集合</span></span><br><span class="line"></span><br><span class="line">context.Entry(student).Collection(s =&gt; s.StudentCourses).Query().Where(sc =&gt; sc.CourseName </span><br><span class="line">== <span class="string">&quot;Maths&quot;</span>).FirstOrDefault(); <span class="comment">// Query 允许我们进一步拼接语句。</span></span><br></pre></td></tr></table></figure><h4 id="三种加载方式的示例"><a href="#三种加载方式的示例" class="headerlink" title="三种加载方式的示例"></a>三种加载方式的示例</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> context = <span class="keyword">new</span> SchoolDBEntities())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//Eager Loading</span></span><br><span class="line">    <span class="keyword">var</span> student = context.Students.Include(s =&gt; s.Standard).Where(s =&gt; s.StudentName == <span class="string">&quot;Bill&quot;</span>)</span><br><span class="line">    .FirstOrDefault&lt;Student&gt;();</span><br><span class="line">    <span class="comment">//Lazy Loading</span></span><br><span class="line">    <span class="keyword">var</span> student = context.Students.Where(s =&gt; s.StudentName == <span class="string">&quot;Bill&quot;</span>).FirstOrDefault&lt;Student&gt;();</span><br><span class="line">    StudentAddress address = student.StudentAddress;</span><br><span class="line">    <span class="comment">//Explicit Loading</span></span><br><span class="line">    <span class="comment">//当禁用 Lazy Loading 时，无法直接用 student.StudentAddress，得先 Load() 或 Query()</span></span><br><span class="line">    <span class="keyword">var</span> student = context.Students.Where(s =&gt; s.StudentName == <span class="string">&quot;Bill&quot;</span>).FirstOrDefault&lt;Student&gt;();</span><br><span class="line">    context.Entry(student).Reference(s =&gt; s.StudentAddress).Load();</span><br><span class="line">    StudentAddress address = student.StudentAddress;</span><br><span class="line">    context.Entry(student).Collection(s =&gt; s.Courses).Query().Where(sc =&gt; sc.CourseName</span><br><span class="line">    == <span class="string">&quot;Maths&quot;</span>).FirstOrDefault();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他参考资料：<br><a href="https://blog.csdn.net/u010028869/article/details/48531863">EF学习和使用（五）Lazy Loading and Eager Loading</a><br><a href="https://blog.csdn.net/u010028869/article/details/48791983">EF学习和使用（六）显式加载、按需加载</a></p><h4 id="执行原始-SQL-语句"><a href="#执行原始-SQL-语句" class="headerlink" title="执行原始 SQL 语句"></a>执行原始 SQL 语句</h4><ol><li>DbSet.SqlQuery()<br>使用 DbSet.SqlQuery() 方法编写返回实体实例的原始 SQL 查询。结果实体将由上下文跟踪，就好像它们是由 LINQ 查询返回的一样。</li><li>DbContext.Database.SqlQuery()<br>Database 类代表底层数据库，并提供各种处理数据库的方法。Database.SqlQuery() 方法可以返回任何类型的值。</li><li>DbContext.Database.ExecuteSqlCommand()<br>Database.ExecuteSqlCommnad() 方法用于插入、更新和删除等命令。</li></ol><h3 id="Attach-Disconnected-Entities"><a href="#Attach-Disconnected-Entities" class="headerlink" title="Attach Disconnected Entities"></a>Attach Disconnected Entities</h3><p>Entity（实体）指单个实体， Entity Graph（实体图）指实体及实体中包含的其他实体（如 Student 实体和与其用导航属性关联的 Teather 实体）。</p><ol><li><p>DbContext.Entry()<br>DbContext 类的 Entry() 方法返回指定实体的 DbEntityEntry 实例。DbEntityEntry 对象提供有关指定实体的各种信息以及对实体执行操作的能力。还可以使用 State 属性更改指定实体的 EntityState。</p></li><li><p>DbSet.Add()<br>DbSet.Add() 方法将整个实体图附加到上下文并自动将 Added 状态应用于所有实体。</p></li><li><p>DbSet.Attach()<br>DbSet.Attach() 方法将整个实体图附加到上下文，整个实体图的状态为 Unchanged。</p></li></ol><p><a href="https://www.entityframeworktutorial.net/EntityFramework5/attach-disconnected-entity-graph.aspx#:~:text=The%20following%20table%20lists%20the%20behaviour%20of%20the%20Entry()%20method">导航属性中的 Entities 也会跟着更改状态</a>。</p><p>DbChangeTracker 类为您提供有关上下文跟踪的当前实体的所有信息。</p><h3 id="异步查询和保存"><a href="#异步查询和保存" class="headerlink" title="异步查询和保存"></a>异步查询和保存</h3><p>async await 在 EF 中的应用。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">async</span> Task&lt;Student&gt; <span class="title">GetStudent</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Student student = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> context = <span class="keyword">new</span> SchoolDBEntities())</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Start GetStudent...&quot;</span>);</span><br><span class="line">              </span><br><span class="line">        student = <span class="keyword">await</span> (context.Students.Where(s =&gt; s.StudentID == <span class="number">1</span>).FirstOrDefaultAsync&lt;Student&gt;());</span><br><span class="line">            </span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Finished GetStudent...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> student;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Add-Remove-多个实体"><a href="#Add-Remove-多个实体" class="headerlink" title="Add/Remove 多个实体"></a>Add/Remove 多个实体</h3><p>AddRange() RemoveRange()</p><p>EF Core 通过在单个数据库交互中对所有实体执行 INSERT 和 DELETE 命令来提高 AddRange 和 RemoveRange 方法的性能。</p><div class="note warning simple"><p>EF 6 的批量添加和删除（以及 更新）并不是在单个语句中执行的，即添加 100 条，会有 100 个插入语句。有很多优化的第三方库，但得注意是否收费的，收费的试用期过后将无法使用。</p></div><h3 id="EF-中的并发"><a href="#EF-中的并发" class="headerlink" title="EF 中的并发"></a>EF 中的并发</h3><p>Entity Framework <a href="https://www.itaru.xyz/blogs/d23db665.html#EF-%E9%BB%98%E8%AE%A4%E9%87%87%E7%94%A8%E4%B9%90%E8%A7%82%E5%B9%B6%E5%8F%91">默认采用乐观并发</a>。EF 将实体数据保存到数据库中，假设自加载实体以来未更改相同的数据。如果它发现数据已更改，则会引发异常，您必须先解决冲突，然后尝试再次保存。</p><div class="note info simple"><p>按我的多年的经验，并不会抛异常啊。可能数据冲突抛异常的前提是实现了下文描述的 rowversion(timestamp)。</p></div><p>要在 EF 6 Database-First 中处理并发，请在 SQL Server 的表中创建具有 <code>rowversion(timestamp)</code> 数据类型的列。rowversion(timestamp) 数据类型只是一个递增的二进制数，对于在包含 rowversion 列的表上执行的每个插入和更新操作，它都会递增。</p><p>如果您已经有 EDM，则通过右键单击设计器来更新它 -&gt; 从数据库更新模型 -&gt; 刷新学生表。</p><p>EF API 将在每个 UPDATE 命令的 WHERE 子句中包含 RowVersion 列，如果 rowversion 值与数据库中的现有值不同，则会抛出 <code>DbUpdateConcurrencyException</code>。</p><h3 id="DbEntityEntry"><a href="#DbEntityEntry" class="headerlink" title="DbEntityEntry"></a>DbEntityEntry</h3><p><a href="https://www.entityframeworktutorial.net/entityframework6/dbentityentry.aspx">DbEntityEntry</a> 是一个重要的类，可用于检索有关实体的各种信息。<br><code>DbEntityEntry studentEntry = dbcontext.Entry(entity)</code><br>DbEntityEntry 使您能够访问实体状态以及给定实体的所有属性的<code>当前值</code>和<code>原始值</code>。</p><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>您可以像使用表一样使用视图。首先您必须将数据库视图添加到 EDM。</p><p>它将视图视为一个实体。因此，您可以像使用普通实体一样使用它，除了 CUD（创建、更新、删除）操作。</p><h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><p>EF API 为目标数据库中的每个存储过程和用户定义函数 (UDF) 创建一个函数而不是 EDM 中的实体。</p><p>可用直接像调用方法一样调用存储过程，返回的数据默认是自动创建的复杂类型（<a href="#EDM-%E7%9A%84%E5%85%B6%E4%BB%96%E6%9F%A5%E7%9C%8B%E6%96%B9%E5%BC%8F">模型浏览器</a>中可以查看），可以更改绑定为别的实体。<a href="https://www.entityframeworktutorial.net/stored-procedure-in-entity-framework.aspx">Stored Procedure in Entity Framework</a></p><p>可以给实体绑定增删改存储过程，这样当跟踪状态为增删改时，直接调用绑定的存储过程，而不是生成并执行 INSERT DELETE UPDATE 语句。<a href="https://www.entityframeworktutorial.net/EntityFramework5/CRUD-using-stored-procedures.aspx">CRUD Operations using Stored Procedure in Entity Framework</a></p><h3 id="表值函数"><a href="#表值函数" class="headerlink" title="表值函数"></a>表值函数</h3><p>表值函数类似于存储过程，除了一个关键区别：TVF 的结果是<code>可组合</code>的（连接之类的），这意味着它可以在 LINQ-to-Entity 查询中使用。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用存储过程</span></span><br><span class="line">List&lt;Course&gt; courses = context.GetCoursesByStudentId(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//调用表值函数</span></span><br><span class="line">List&lt;Course&gt; courses = context.GetCourseListByStudentID(<span class="number">1</span>).ToList&lt;Course&gt;();</span><br></pre></td></tr></table></figure><h3 id="Validate-Entity"><a href="#Validate-Entity" class="headerlink" title="Validate Entity"></a>Validate Entity</h3><p>您可以为任何实体编写自定义服务器端验证。为此，<a href="https://www.entityframeworktutorial.net/EntityFramework4.3/validate-entity-in-entity-framework.aspx">请覆盖 DbContext 的 ValidateEntity 方法</a>，当调用 DbContext.SaveChanges 时会进行验证。</p><h3 id="使用代码配置-EF"><a href="#使用代码配置-EF" class="headerlink" title="使用代码配置 EF"></a>使用代码配置 EF</h3><p>Entity Framework 6 引入了<a href="https://www.entityframeworktutorial.net/entityframework6/code-based-configuration.aspx">基于代码的配置</a>。之前是在 app.config 的 <code>&lt;entityframework&gt;</code> 中配置实体框架相关设置，而现在也可以用代码来配置。但是，<code>app.config 优先于基于代码的配置</code>。换句话说，如果在代码和 app.config 中都设置了配置选项，则使用 app.config 中的设置。</p><h3 id="拦截数据库命令"><a href="#拦截数据库命令" class="headerlink" title="拦截数据库命令"></a>拦截数据库命令</h3><p>EF 6 通过实现 IDbCommandInterceptor 接口拦截上下文。IDbCommandInterceptor 接口包括拦截 DbContext 实例并允许您在上下文执行命令（或查询）之前或之后执行自定义逻辑的方法。DbContext 使用 ADO.NET 方法（例如 ExecuteNonQuery、ExecuteScalar 和 ExecuteReader）执行命令和查询，您可以通过实现 NonQueryExecuted 和 NonQueryExecuting 等方法来拦截它们。</p><p>除了拦截，还可以进行记录日志等操作，类似 MVC 中的过滤器。</p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>在 Entity Framework 中，SaveChanges() 方法在内部创建一个事务并将所有 INSERT、UPDATE 和 DELETE 操作包装在里面。每次调用 SaveChanges()，都创建一个单独的事务，执行 CRUD 操作，然后提交事务。</p><p>EF 6 和 EF Core 允许我们使用以下方法创建或使用<a href="https://www.entityframeworktutorial.net/entityframework6/transaction-in-entity-framework.aspx#:~:text=Multiple%20SaveChanges%20in%20a%20Single%20Transaction">具有多个 SaveChanges() 调用的单个事务</a>：</p><ul><li><p>DbContext.Database.BeginTransaction()<br>可以在 DbContext.Database.BeginTransaction() 方法中指定不同的隔离级别。</p></li><li><p>DbContext.Database.UseTransaction()<br>DbContext.Database.UseTransaction() 方法允许我们使用在上下文对象范围之外创建的现有事务。如果我们使用 UseTransaction() 方法，那么上下文将不会创建内部事务对象，而是使用提供的事务。</p></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>实体中的属性可以<a href="https://www.entityframeworktutorial.net/EntityFramework5/enum-in-entity-framework5.aspx">绑定 Enum </a>，如果要在枚举中使用位运算符，请选择“设置标志（Flags）属性”。</li><li>MS SQL Server 2008 引入了两种空间数据类型，地理和几何。 geography 类型表示圆形地球坐标系中的数据，而 geometry 表示欧几里得（平面）坐标系中的数据。<a href="https://www.entityframeworktutorial.net/EntityFramework5/spatial-datatype-in-entity-framework5.aspx">这两种类型同样可以映射到实体</a>。</li><li>可将可视化设计器中的 <a href="https://www.entityframeworktutorial.net/EntityFramework5/multiple-diagrams-in-entity-framework5.aspx">Diagram 拆分成多个</a>。可以给 Diagram 中的实体更改颜色（让其更易分辨），还可以显示属性的类型等。</li><li>可以使用自带的 <code>DbContext.Database.Log</code>，或者寻找第三方工具，将 EF 执行的 sql 记录下来。</li></ul>]]></content>
    
    
    <summary type="html">在数据库优先开发方法中，您可以使用集成在 Visual Studio 中的 EDM 向导或执行 EF 命令为现有数据库生成上下文和实体。</summary>
    
    
    
    <category term="C#" scheme="https://www.itaru.xyz/categories/C/"/>
    
    <category term="EF" scheme="https://www.itaru.xyz/categories/C/EF/"/>
    
    
    <category term="C#" scheme="https://www.itaru.xyz/tags/C/"/>
    
    <category term="EF" scheme="https://www.itaru.xyz/tags/EF/"/>
    
  </entry>
  
  <entry>
    <title>EF Basics 学习笔记</title>
    <link href="https://www.itaru.xyz/blogs/d23db665.html"/>
    <id>https://www.itaru.xyz/blogs/d23db665.html</id>
    <published>2022-01-16T13:52:50.000Z</published>
    <updated>2022-01-21T02:48:19.961Z</updated>
    
    <content type="html"><![CDATA[<p>教程网址：<a href="https://www.entityframeworktutorial.net/what-is-entityframework.aspx">EF Basics - EntityFrameworkTutorial</a></p><p>Entity Framework 是一个对象关系映射器 (O/RM)，它使 .NET 开发人员能够使用 .NET 对象处理数据库。它消除了开发人员通常需要编写的大多数数据访问代码的问题。</p><h3 id="EF-如何工作"><a href="#EF-如何工作" class="headerlink" title="EF 如何工作"></a>EF 如何工作</h3><p>EF API（EF6 和 EF Core）包括将领域（实体）类（domain (entity) classes）映射到数据库架构、将 LINQ 查询转换成 SQL 并执行、跟踪实体在其生命周期内发生的更改以及将更改保存到数据库的能力。</p><p>EDM（Entity Data Model）是整个元数据的内存表示：概念模型、存储模型以及它们之间的映射。</p><h3 id="EF-的架构"><a href="#EF-的架构" class="headerlink" title="EF 的架构"></a><a href="https://www.entityframeworktutorial.net/EntityFramework-Architecture.aspx">EF 的架构</a></h3><p><img src="https://ih.itaru.xyz/images/20220113185746.png" alt="20220113185746"></p><h3 id="EF-特性"><a href="#EF-特性" class="headerlink" title="EF 特性"></a>EF 特性</h3><ul><li>EF 创建基于POCO（Plain Old CLR Object）实体的 EDM。</li><li>EF 在查询或保存数据时执行自动事务管理。它还提供了自定义事务管理的选项。</li><li>EF 包括开箱即用的第一级缓存。因此，<code>重复查询将从缓存中返回数据，而不是访问数据库</code>。</li></ul><h4 id="EF-默认采用乐观并发"><a href="#EF-默认采用乐观并发" class="headerlink" title="EF 默认采用乐观并发"></a>EF 默认采用乐观并发</h4><p><a href="https://docs.microsoft.com/en-us/sql/odbc/reference/develop-app/optimistic-concurrency?view=sql-server-ver15">Optimistic Concurrency</a> 乐观并发的名称源于乐观假设，即事务之间很少发生冲突。当另一个事务在当前事务<code>读取</code>和<code>更新或删除</code>的时间之间更新或删除一行数据时，就说发生了冲突。它与悲观并发或锁定相反，此时应用程序开发人员认为这种冲突是司空见惯的。</p><h3 id="EF-的三种实现方式"><a href="#EF-的三种实现方式" class="headerlink" title="EF 的三种实现方式"></a><a href="https://www.entityframeworktutorial.net/choosing-development-approach-with-entity-framework.aspx">EF 的三种实现方式</a></h3><ol><li><a href="https://www.entityframeworktutorial.net/entityframework6/introduction.aspx">Database-First</a> （EF Core 有限支持）</li><li><a href="https://www.entityframeworktutorial.net/code-first/what-is-code-first.aspx">Code-First</a></li><li><a href="https://www.entityframeworktutorial.net/model-first-with-entity-framework.aspx">Model-First</a> （F Core 不支持）</li></ol><h3 id="EF-中的持久性"><a href="#EF-中的持久性" class="headerlink" title="EF 中的持久性"></a><a href="https://www.entityframeworktutorial.net/EntityFramework4.3/persistence-in-entity-framework.aspx">EF 中的持久性</a></h3><ol><li>连接模式（Connected Scenario）<br>在连接模式中，相同的上下文类实例（从 DbContext 派生的 XXXContext）用于检索和保存实体。它在其生命周期内跟踪所有实体。  </li><li>断开模式（Disconnected Scenario）<br>在断开模式中，上下文的不同实例用于检索实体并将其保存到数据库中。检索数据后释放上下文的一个实例，并创建一个新实例以将实体保存到数据库中</li></ol><h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h3><p>Context 类是使用 EF 6 或 EF Core 时最重要的类。它表示与底层数据库的会话，您可以使用它执行 CRUD（创建、读取、更新、删除）操作。</p><p>Context 类用于查询或保存数据到数据库。它还用于配置领域类（domain classes）、与数据库相关的映射、更改跟踪设置、缓存、事务等。</p><h3 id="Entity"><a href="#Entity" class="headerlink" title="Entity"></a>Entity</h3><p>Entity Framework 中的实体是映射到数据库表的类。此类必须作为 DbSet<TEntity> 类型属性包含在 DbContext 类中。 EF API 将每个实体映射到表，将实体的每个属性映射到数据库中的列。</p><p>一个实体可以包括三种类型的属性：<code>标量属性</code>、<code>导航属性</code>和<code>复杂属性</code>（模型浏览器中可以看到复杂类型，一般为生成 EDM 时根据存储过程或者表值函数的返回值自动创建的类型）。</p><h4 id="Entity-数据模型"><a href="#Entity-数据模型" class="headerlink" title="Entity 数据模型"></a>Entity 数据模型</h4><ol><li>概念模型（Conceptual Model）</li><li>存储模型（Storage Model）</li><li>映射（Mappings）</li></ol><h4 id="Entity-的类型"><a href="#Entity-的类型" class="headerlink" title="Entity 的类型"></a>Entity 的类型</h4><p>实体框架中有两种类型的实体：POCO 实体（POCO Entities (Plain Old CLR Object)）和动态代理实体（Dynamic Proxy Entities (POCO Proxy)）。</p><p>Dynamic Proxy 是一个包装 POCO 实体的运行时代理类。动态代理实体允许<code>延迟加载</code>。POCO 实体应满足以下要求才能成为 POCO 代理（Dynamic Proxy）：</p><ol><li>类为 public，且非 sealed 和 abstract。</li><li>每个导航属性（Navigation Property）得定义为 public、virtual。</li><li>每个集合导航属性（Collection Navigation Property）必须是 ICollection<T>。</li><li>ProxyCreationEnabled 不能为 false。</li></ol><p>默认情况下，为每个实体启用动态代理。可以在上下文类中设置 context.Configuration.ProxyCreationEnabled = false 来禁用动态代理。</p><p>在运行时，EF API 将为实体（如  Student）创建一个动态代理实例。Student 的动态代理类型为 System.Data.Entity.DynamicProxies.Student</p><h4 id="Entity-的状态"><a href="#Entity-的状态" class="headerlink" title="Entity 的状态"></a>Entity 的状态</h4><p>EF API 在其生命周期内维护每个实体的状态。</p><ul><li>Added</li><li>Modified</li><li>Deleted</li><li>Unchanged</li><li>Detached</li></ul><p>实体状态从 Unchanged 到 Modified 状态的更改是唯一由上下文自动处理的状态。所有其他更改必须使用 DbContext 或 DbSet 的适当方法显式进行。</p><p>EF API 在调用 context.SaveChanges() 方法时根据实体的状态构建和执行 INSERT、UPDATE 和 DELETE 命令。</p>]]></content>
    
    
    <summary type="html">Entity Framework 是一个对象关系映射器 (O/RM)，它使 .NET 开发人员能够使用 .NET 对象处理数据库。它消除了开发人员通常需要编写的大多数数据访问代码的问题。</summary>
    
    
    
    <category term="C#" scheme="https://www.itaru.xyz/categories/C/"/>
    
    <category term="EF" scheme="https://www.itaru.xyz/categories/C/EF/"/>
    
    
    <category term="C#" scheme="https://www.itaru.xyz/tags/C/"/>
    
    <category term="EF" scheme="https://www.itaru.xyz/tags/EF/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Core 学习笔记</title>
    <link href="https://www.itaru.xyz/blogs/b931a597.html"/>
    <id>https://www.itaru.xyz/blogs/b931a597.html</id>
    <published>2022-01-12T13:52:04.000Z</published>
    <updated>2022-01-15T15:57:38.040Z</updated>
    
    <content type="html"><![CDATA[<p>教程网址：<a href="https://www.tutorialsteacher.com/core">TutorialSteacher - ASP.NET Core Tutorials</a><br>此教程使用的是 ASP.NET Core 2.1。</p><pre><code>都 .NET 6.0 了我还在看 .NET Core 。。</code></pre><h3 id="NET-Core-概述"><a href="#NET-Core-概述" class="headerlink" title=".NET Core 概述"></a>.NET Core 概述</h3><ul><li>.NET Core 是 .NET Framework 的新版本，它是由 Microsoft 维护的免费、开源、通用的开发平台。它是一个跨平台框架，可在 Windows、macOS 和 Linux 操作系统上运行。</li><li>.NET Core 可用于构建不同类型的应用程序，例如移动、桌面、Web、云、物联网、机器学习、微服务、游戏等。</li></ul><p>源码相关网站：<a href="https://source.dot.net/">Source Browser</a>、<a href="https://github.com/dotnet/runtime">runtime</a>、<a href="https://github.com/dotnet/sdk">sdk</a></p><h3 id="ASP-NET-Core-概述"><a href="#ASP-NET-Core-概述" class="headerlink" title="ASP.NET Core 概述"></a>ASP.NET Core 概述</h3><p>ASP.NET Core 是微软推出的新版 ASP.NET。它是一个开源 Web 框架，可以在 Windows、Mac 或 Linux 上运行。</p><p>源码：<a href="https://github.com/dotnet/aspnetcore">aspnetcore</a></p><h3 id="安装-NET-Core、ASP-NET-Core"><a href="#安装-NET-Core、ASP-NET-Core" class="headerlink" title="安装 .NET Core、ASP.NET Core"></a>安装 .NET Core、ASP.NET Core</h3><p>.NET Core 可以通过两种方式安装</p><ol><li><a href="https://visualstudio.microsoft.com/zh-hans/downloads/">安装 Visual Studio 2017/2019/2022</a></li><li><a href="https://dotnet.microsoft.com/en-us/download/dotnet">安装 .NET Core 运行时或 SDK</a></li></ol><p>您可以使用自己喜欢的 IDE，例如 Visual Studio、Visual Studio Code、Sublime Text 等来开发、恢复（restore）、构建和运行 .NET Core 应用程序。</p><ul><li>.NET Core Runtime 仅用于运行 .NET Core 应用程序。</li><li>.NET Core SDK 包含用于开发 .NET Core 应用程序的工具和库。</li></ul><p>在这里，我们将安装 .NET Core SDK，因为我们正在为构建 .NET Core 应用程序准备开发环境。如果您的目标是运行 .NET Core 应用程序，请在您的服务器、云或客户端桌面上安装 .NET Core Runtime。</p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>创建 ASP.NET Core Web Application</p><ul><li>csproj 文件包括与目标 .NET 框架、项目文件夹、NuGet 包引用等相关的设置。</li><li>ASP.NET Core 项目中的 Dependencies（依赖项） 包含所有已安装的服务器端 NuGet 包及其他依赖。</li><li>Properties 节点包含 launchSettings.json 文件，其中包含为调试设置的 Visual Studio 配置文件。我们还可以从项目属性的调试选项卡中编辑设置。右键单击项目-&gt;选择属性-&gt;单击调试选项卡。</li></ul><h4 id="wwwroot"><a href="#wwwroot" class="headerlink" title="wwwroot"></a>wwwroot</h4><p>默认情况下，ASP.NET Core 项目中的 wwwroot 文件夹被视为 Web 根文件夹。静态文件可以存储在 Web 根目录下的任何文件夹中，并通过该根目录的相对路径进行访问。<br>在标准的 ASP.NET 应用程序中，静态文件可以从应用程序的根文件夹或其下的任何其他文件夹提供。这已在 ASP.NET Core 中进行了更改。现在，只有那些位于 web 根目录（wwwroot） 文件夹中的文件才能通过 http 请求提供服务。<code>默认情况下</code>，所有其他文件都被阻止访问。</p><h4 id="Program-cs"><a href="#Program-cs" class="headerlink" title="Program.cs"></a>Program.cs</h4><p>ASP.NET Core Web 应用程序实际上是一个控制台项目，它从 Program 类中的入口点 public static void Main() 开始执行，我们可以在其中为 Web 应用程序创建 host。</p><h3 id="Startup-cs"><a href="#Startup-cs" class="headerlink" title="Startup.cs"></a>Startup.cs</h3><ul><li>ConfigureServices 方法是可以使用内置 IoC 容器注册依赖类的地方。注册依赖类后，可以在应用程序的任何地方使用。您只需要将它包含在要使用它的类的构造函数的参数中，IoC 容器会自动注入它。</li><li>Configure 方法中，您可以使用内置 IoC 容器提供的 IApplicationBuilder 实例为您的应用程序配置应用程序请求管道。</li></ul><p>在运行时，ConfigureServices 方法在 Configure 方法之前被调用。这样可以使用 IoC 容器注册自定义服务，您可以在 Configure 方法中使用该容器。</p><h3 id="Command-Line-Interface"><a href="#Command-Line-Interface" class="headerlink" title="Command-Line Interface"></a>Command-Line Interface</h3><p>.NET Core 命令行界面 (CLI) 是一种新的跨平台工具，用于创建、恢复包（restore packages），构建、运行和发布 .NET 应用程序。</p><p>安装 .NET Core SDK 时，包含 CLI。可在终端（如 cmd）中使用 <a href="https://www.tutorialsteacher.com/core/net-core-command-line-interface#:~:text=The%20following%20are%20.NET%20Core%202.x%20CLI%20commands.">dotnet</a> 命令。</p><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><p>ASP.NET Core 框架包含简单的开箱即用 IoC 容器，它没有其他第三方 IoC 容器那么多的功能。如果您想要更多功能，例如自动注册、扫描、拦截器或装饰器，则可以将内置 IoC 容器替换为第三方容器。</p><p>内置容器由默认支持构造函数注入的 IServiceProvider 为代表。由内置 IoC 容器管理的类型（或类）称为服务（services）。</p><p>ASP.NET Core 中基本上有两种类型的服务：</p><ol><li>框架服务：作为 ASP.NET Core 框架一部分的服务，例如 IApplicationBuilder、IHostingEnvironment、ILoggerFactory 等。</li><li>应用程序服务：您自己为应用程序创建的服务（自定义类型或类）。</li></ol><h3 id="代码共享"><a href="#代码共享" class="headerlink" title="代码共享"></a>代码共享</h3><p>实现 .NET Core、.NET Framework、Mono 等 .NET 框架的代码共享有以下<a href="https://www.tutorialsteacher.com/core/code-sharing-between-dotnet-frameworks#:~:text=To%20solve%20this%20problem%20of%20code%20sharing,%20we%20can%20use%20the%20following%20three%20approaches:">三种方式</a>:</p><ul><li>创建可移植类库</li><li>面向多个框架的 ASP.NET Core 应用程序</li><li>以 .NET 标准为目标</li></ul><h3 id="其他知识点"><a href="#其他知识点" class="headerlink" title="其他知识点"></a>其他知识点</h3><ul><li>Middleware 中间件：中间件是在 ASP.NET Core 应用程序中的每个请求都执行的组件。</li><li>Environment Variable 环境变量：Development、Staging、Production。 </li><li>Exception Handling：UseDeveloperExceptionPage UseExceptionHandler 位于 Microsoft.AspNetCore.Diagnostics。</li><li>提供静态文件：默认情况下，ASP.NET Core 应用程序无法提供静态文件。我们必须在请求管道中包含 Microsoft.AspNetCore.StaticFiles 中间件。</li><li>Serving Static Files：UseFileServer = UseDefaultFiles + UseStaticFiles</li><li>应用类型：便携式 独立式</li></ul>]]></content>
    
    
    <summary type="html">ASP.NET Core 是微软推出的新版 ASP.NET。它是一个开源 Web 框架，可以在 Windows、Mac 或 Linux 上运行。</summary>
    
    
    
    <category term="C#" scheme="https://www.itaru.xyz/categories/C/"/>
    
    <category term="ASP.NET Core" scheme="https://www.itaru.xyz/categories/C/ASP-NET-Core/"/>
    
    
    <category term="C#" scheme="https://www.itaru.xyz/tags/C/"/>
    
    <category term="ASP.NET Core" scheme="https://www.itaru.xyz/tags/ASP-NET-Core/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Web API 学习笔记</title>
    <link href="https://www.itaru.xyz/blogs/c0792448.html"/>
    <id>https://www.itaru.xyz/blogs/c0792448.html</id>
    <published>2022-01-07T14:07:13.000Z</published>
    <updated>2022-01-12T07:27:10.532Z</updated>
    
    <content type="html"><![CDATA[<p>教程网址：<a href="https://www.tutorialsteacher.com/webapi">TutorialSteacher - ASP.NET Web API Tutorials</a></p><p>ASP.NET Web API 是用于构建可从任何客户端（包括浏览器和移动设备）访问的 HTTP 服务的框架。它是在 .NET Framework 上构建 RESTful 应用程序的理想平台。</p><p>它的工作方式或多或少与 ASP.NET MVC Web 应用程序相同，不同之处在于它将数据作为响应而不是发送 html 视图。它就像一个 webservice 或 WCF 服务，但例外是它只支持 HTTP 协议。</p><h3 id="ASP-NET-Web-API-特性"><a href="#ASP-NET-Web-API-特性" class="headerlink" title="ASP.NET Web API 特性"></a>ASP.NET Web API 特性</h3><ul><li>ASP.NET Web API 建立在 ASP.NET 之上，支持 ASP.NET 请求/响应管道</li><li>ASP.NET Web API 将 HTTP 动词映射到方法名称。</li><li>ASP.NET Web API 支持不同格式的响应数据。内置支持 JSON、XML、BSON 格式。</li><li>ASP.NET Web API 可以托管在 IIS 中、自托管或托管在其他支持 .NET 4.0+ 的 Web 服务器中。</li></ul><p><a href="https://www.tutorialsteacher.com/webapi/what-is-web-api#:~:text=ASP.NET%20Web%20API%20vs%20WCF">ASP.NET Web API vs WCF</a></p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><ul><li>ASP.NET Web 应用程序 -&gt; Empty -&gt; 勾选 Web API。<br><img src="https://ih.itaru.xyz/images/20211227154117.png" alt="20211227154117"></li><li>也可以创建项目时选择 Web API，这个选项中 Web API 和 MVC 是默认无法取消勾选的。创建的项目和默认的 MVC 项目基本相同。具有两个特定的 Web API 文件，App_Start 文件夹中的 <code>WebApiConfig.cs</code> 和 Controllers 文件夹中的 <code>ValuesController.cs</code>。以及 Area 中多了 <code>HelpPage</code>（这个可以用来生成测试样例）。<br><img src="https://ih.itaru.xyz/images/20211227154028.png" alt="20211227154028"></li><li>可在 NuGet 中查看当前 WebAPI 版本。</li></ul><h3 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a>测试工具</h3><ul><li>Fiddler</li><li>Postman</li></ul><h3 id="配置-Web-API"><a href="#配置-Web-API" class="headerlink" title="配置 Web API"></a>配置 Web API</h3><ul><li>Web API 支持基于代码的配置（在 HttpConfiguration 中配置）。它不能在 web.config 文件中配置。</li><li>我们可以配置 Web API 来自定义 Web API 托管基础架构和组件的行为，例如路由、格式化程序、过滤器、DependencyResolver、MessageHandlers、ParamterBindingRules、属性、服务等。</li><li>可用 WebApiConfig.Register(HttpConfiguration config) 中的 config 重写默认配置。<a href="https://www.tutorialsteacher.com/webapi/configure-web-api#:~:text=override%20the%20default%20behaviour%20of%20Web%20API">HttpConfiguration</a></li></ul><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><ul><li>默认形式 api/{controller}/{id}</li><li>在路由模板中使用 api 的原因只是为了避免混淆 MVC 控制器和 Web API 控制器。您可以根据您的应用程序架构使用任何模式。</li><li>WebApiConfig 的 Register 加上 config.MapHttpAttributeRoutes() （默认就有的），可以使用 <code>[Route(&quot;api/student/names&quot;)]</code> 路由特性。</li></ul><h3 id="参数匹配"><a href="#参数匹配" class="headerlink" title="参数匹配"></a>参数匹配</h3><ul><li>和 <a href="/blogs/cd7c564f.html#%E5%8F%82%E6%95%B0%E5%8C%B9%E9%85%8D">MVC</a> 区别很大</li><li>默认情况下，如果参数类型是 .NET 原始类型，例如 int、bool、double、string、GUID、DateTime、decimal 或任何其他可以从 string 类型转换的类型，那么它会从 Url 中取值。如果参数类型是复杂类型，那么 Web API 会默认尝试从<code>请求体</code>中获取值。</li><li>用 Postman 测试时，POST 请求提交数据不能用 from-data，得用 raw -&gt; JSON（或 raw -&gt; 其他 WebAPI 支持的类型）。<br><img src="https://ih.itaru.xyz/images/20211228153229.png" alt="20211228153229"></li><li>请求体中的数据只会匹配到一个复杂类型中。类型中存在的字段则赋值，不存在的则忽略。</li><li>若 Action 方法参数中有多个复杂体，请求时会抛异常。</li><li><code>[FromUri]</code> 可让复杂类型从 Url 中取值，视作简单类型。<code>[FromBody]</code> 可以让原始类型从请求体中取值，视作复杂类型。<code>注意上一条。</code></li><li>GET 请求其实也可以取请求体中的数据，参数匹配逻辑其实和 POST 一样。（不过，正常 GET 请求不会带请求体，Postman 倒是可以。）</li></ul><p><img src="https://ih.itaru.xyz/images/20211228154753.png" alt="20211228154753"></p><h3 id="返回类型"><a href="#返回类型" class="headerlink" title="返回类型"></a>返回类型</h3><ol><li>Void： 204 “No Content”</li><li>原始类型或复杂类型：原始类型直接返回值，复杂类型返回 Json（可以设置为其他的）。</li><li>HttpResponseMessage：Web API 控制器始终返回这个类型（意思是说 前面两种都会自动封装成这个类型吗？）。<a href="https://www.asp.net/media/4071077/aspnet-web-api-poster.pdf">aspnet-web-api-poster</a><ul><li>从 Action 返回 HttpResponseMessage 的优点是您可以按照自己的方式配置响应。您可以根据需要设置状态代码、内容或错误消息。</li><li>Request.CreateResponse(HttpStatusCode.<code>NotFound</code>, <code>id</code>)，404 Not Found 都可以返回 id。</li></ul></li><li>IHttpActionResult：可以创建自己的类来实现 IHttpActionResult 或使用 ApiController 类的<a href="https://www.tutorialsteacher.com/webapi/action-method-return-type-in-web-api#:~:text=that%20implements%20IHttpActionResult%20interface">各种方法</a>（NotFound()，Ok() 等），返回实现 IHttpActionResult 的对象。</li></ol><h3 id="请求-响应数据格式"><a href="#请求-响应数据格式" class="headerlink" title="请求/响应数据格式"></a>请求/响应数据格式</h3><ul><li>在 HTTP 请求中，使用 Accept 和 Content-Type 属性在请求头中指定 MIME 类型。</li><li>Accept 头属性指定客户端期望的响应数据格式，Content-Type 头属性指定请求正文中数据的格式，以便接收者可以将其解析为适当的格式。</li><li><code>Web API 根据请求头（报文头）的 Content-Type 解析请求体（request body 或 报文体），根据 Accept 确定返回的数据格式，</code>返回中也包括 Content-Type。Web API 默认处理 JSON 和 XML 数据。</li><li>Web API 将请求数据转换为 CLR 对象，并将 CLR 对象序列化为基于 Accept 和 Content-Type 标头的响应数据。</li><li>Web API 包括对 JSON、XML、BSON 和 form-urlencoded 数据的内置支持。</li></ul><h4 id="Media-Type-Formatters"><a href="#Media-Type-Formatters" class="headerlink" title="Media-Type Formatters"></a>Media-Type Formatters</h4><ul><li>媒体类型格式化程序是负责序列化请求/响应数据的类，以便 Web API 可以理解请求数据格式并以客户端期望的格式发送数据。</li><li>GlobalConfiguration.Configuration.Formatters</li><li>可以在 WebApiConfig 中设置返回的 json 的格式，例如将命名从 Pascal 改为 Camel 等。（xml 等格式应该也可以设置。）</li><li>WebAPI 中 JSON 使用 <code>Json.NET</code> 序列化和反序列化，xml 使用 <code>System.Runtime.DataContractSerializer</code>。</li></ul><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><ul><li>添加控制器时有 MVC 和 WebAPI 两种控制器可供选择，选择 WebAPI 控制器。</li><li>它可以在项目根文件夹中的任何文件夹下创建。但是，建议按照约定在 Controllers 文件夹中创建控制器类。</li><li><a href="https://www.tutorialsteacher.com/webapi/web-api-controller#:~:text=Difference%20between%20Web%20API%20and%20MVC%20controller">Difference between Web API and MVC controller</a></li></ul><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><ul><li>控制器的所有公共方法都称为行为方法（Action）。</li><li>行为名称可以与 HTTP 动词名称相同，也可以以 HTTP 动词开头（区分大小写）加后缀，或者将 Http 动词特性（ <code>[HttpPost]</code> 等）应用于行为。</li><li>动作方法的返回类型可以是任何原始类型或复杂类型。</li><li><code>同一 HTTP 动词</code>不能有多个 Action 同时具有<code>相同数量</code>的<code>相同类型</code>和<code>相同参数名</code>的参数（参数名会根据你传过来的数据的名称匹配）。即使一个控制器中有多个 GET Action，Web API 可以根据请求的参数区分到底执行哪个 Action。</li></ul><h3 id="Web-API-Filters"><a href="#Web-API-Filters" class="headerlink" title="Web API Filters"></a>Web API Filters</h3><ul><li>Web API 包括过滤器，用于在 Action 之前或之后添加额外的逻辑。过滤器可用于提供横切功能，例如日志记录、异常处理、性能检测、身份验证和授权。</li><li>过滤器实际上是可以应用于 Web API 控制器和一种或多种行为的特性。每个过滤器特性类都必须实现包含在 System.Web.Http.Filters 命名空间中的 IFilter 接口（或继承于它的接口，如 IActionFilter）。</li><li><a href="https://www.tutorialsteacher.com/webapi/web-api-filters#:~:text=lists%20important%20interfaces%20and%20classes">System.Web.Http.Filters 中内置的重要接口和类</a></li><li><code>可以继承 ActionFilterAttribute 并重写部分方法；或者继承 IActionFilter ，实现所有方法。</code><br>LogAttribute : ActionFilterAttribute 或 LogAttribute : Attribute, IActionFilter。</li></ul><h4 id="IAuthenticationFilter-和-IAuthorizationFilter-的区别"><a href="#IAuthenticationFilter-和-IAuthorizationFilter-的区别" class="headerlink" title="IAuthenticationFilter 和 IAuthorizationFilter 的区别"></a>IAuthenticationFilter 和 IAuthorizationFilter 的区别</h4><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.web.mvc.filters.iauthenticationfilter?view=aspnet-mvc-5.2">IAuthenticationFilter</a> 进行身份过滤。<code>Authentication 身份验证</code>。例如，Alice 使用她的用户名和密码登录，服务器使用该密码对 Alice 进行身份验证。</li><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.web.mvc.iauthorizationfilter?view=aspnet-mvc-5.2">IAuthorizationFilter</a> 进行权限过滤。<code>Authorization 授权</code>。决定是否允许用户执行某项操作，例如，Alice 有权获取资源但不能创建资源。</li></ul><p>参考：<a href="https://docs.microsoft.com/en-us/aspnet/web-api/overview/security/authentication-and-authorization-in-aspnet-web-api">Authentication and Authorization in ASP.NET Web API</a></p><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><ul><li>不推荐从 Web API 返回 EF 实体对象，建议用 DTO（Data Transfer Object 数据传输对象）。<ol><li>即不返回和接收 EF Models 中的类（如 SchoolDBEntities 中的 Student），而是在 Web API 的 Models 中自己创建相关类与外部对接（如 StudentViewModel）。</li><li>ViewModel 类或 DTO 类仅用于从 Web API 控制器到客户端的数据传输。您可以根据自己的选择命名。</li></ol></li><li>根据 Web API 命名约定，以单词“Get”开头（如：GetAllStudents）的 Action 将处理 HTTP GET 请求，提高可读性。</li><li>HTTP POST 请求用于在 RESTful 架构中的数据源中创建新记录。HTTP PUT 方法用于更新现有记录。</li><li>同 MVC 一样，可以用 <code>ModelState.IsValid</code> 检测数据的有效性。</li><li>删除 <code>System.Data.Entity.EntityState.Deleted</code>（记得好像也可以直接用 <code>Remove()</code> 的）。</li></ul><h3 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h3><p>.NET 2.0 包含 <code>WebClient</code> 类以使用 HTTP 协议与 Web 服务器通信。但是，WebClient 类有一些限制。.NET 4.5 包含 <code>HttpClient</code> 类以克服 WebClient 的限制。</p><ul><li><p>从 TOOLS -&gt; NuGet Package Manager -&gt; Package Manager Console 打开 NuGet 包管理器控制台并执行以下命令：</p><p>  <code>Install-Package Microsoft.AspNet.WebApi.Client</code></p></li><li><p>GetAsync ReadAsAsync PostAsJsonAsync 以及其他<a href="https://www.tutorialsteacher.com/webapi/consuming-web-api-in-dotnet-using-httpclient#:~:text=The%20following%20table%20lists%20all%20the%20methods%20of%20HttpClient%20to%20send%20different%20HTTP%20requests.">HttpClien的方法</a>。</p></li></ul><h3 id="访问-Web-API"><a href="#访问-Web-API" class="headerlink" title="访问 Web API"></a>访问 Web API</h3><p>Web API 可以在 .NET 的服务器端代码中访问，也可以在客户端使用 JavaScript 框架（如 jQuery、AnguarJS、KnockoutJS 等）访问。（其实只要能发送 HTTP 请求，都能访问。）</p><h3 id="Web-API-配置依赖注入"><a href="#Web-API-配置依赖注入" class="headerlink" title="Web API 配置依赖注入"></a>Web API 配置依赖注入</h3><ul><li>有很多 IoC 容器可用于依赖注入，例如 Ninject、Unity、castleWidsor、structuremap 等，这里我们将<a href="https://www.tutorialsteacher.com/webapi/configure-dependency-injection-with-web-api#:~:text=The%20following%20is%20our%20sample%20Web%20API%20that%20uses%20instance%20of%20a%20class%20that%20implements%20IRepository.">使用 Ninject 进行依赖注入</a>。</li></ul><ol><li>NuGet 安装 WebApiContrib.IoC.Ninject 和 Ninject.Extensions.ChildKernel。</li><li>创建一个实现 IDependencyResolver 接口的解析器类，如 NinjectResolver。</li><li>WebApiConfig 的 Register 方法中设置 config.DependencyResolver = new NinjectResolver()。</li></ol><h3 id="Web-API-托管"><a href="#Web-API-托管" class="headerlink" title="Web API 托管"></a>Web API 托管</h3><ol><li>IIS 托管</li><li>自托管</li></ol><h4 id="自托管"><a href="#自托管" class="headerlink" title="自托管"></a>自托管</h4><p>可以将 Web API 作为独立于 ASP.NET 的进程托管。这意味着您可以在控制台应用程序、Windows 服务、OWIN 或任何其他由 .NET 框架管理的进程中托管 Web API。</p><p>需要执行以下步骤才能自托管 Web API：</p><ol><li>使用 HttpConfiguration 配置 Web API。</li><li>创建 HttpServer 并开始监听传入的 http 请求。</li></ol><p><a href="https://www.tutorialsteacher.com/webapi/web-api-hosting#:~:text=Let's%20see%20how%20to%20host%20a%20simple%20Web%20API%20in%20console%20application.">以控制台应用程序为例</a>：</p><ol><li>创建控制台应用程序，并用 NeGet 添加 <code>Microsoft ASP.NET Web API 2.2 Self Host</code>。</li><li>在 Main() 方法中设置监听。</li></ol><h3 id="选择-Web-API-还是-MVC"><a href="#选择-Web-API-还是-MVC" class="headerlink" title="选择 Web API 还是 MVC"></a>选择 Web API 还是 MVC</h3><p>这两者差别还是挺大的，如果说只需要返回数据，选择 Web API。如果需要返回视图（页面）则选择 MVC。</p><p>如果不仅需要和浏览器交互，还需要作为 API 接口与别的程序对接，还有一种选择是 Web API + MVC。</p><p>MVC 的设计初衷是每个请求都返回一个页面，如果你想要实现页面与服务器的 ajax 交互，也可以选择 <code>ASP.NET Single Page Application</code>。</p><p><img src="https://ih.itaru.xyz/images/20220112152627.png" alt="20220112152627"></p><p><a href="https://docs.microsoft.com/en-us/archive/msdn-magazine/2013/november/asp-net-single-page-applications-build-modern-responsive-web-apps-with-asp-net#:~:text=The%20Traditional%20Page%20Lifecycle%20vs.%20the%20SPA%20Lifecycle">ASP.NET - Single-Page Applications: Build Modern, Responsive Web Apps with ASP.NET</a><br><a href="https://docs.microsoft.com/en-us/aspnet/web-forms/overview/getting-started/getting-started-with-aspnet-45-web-forms/create-the-project#:~:text=Understanding%20the%20ASP.NET%20Frameworks">Understanding the ASP.NET Frameworks</a></p>]]></content>
    
    
    <summary type="html">ASP.NET Web API 是用于构建可从任何客户端（包括浏览器和移动设备）访问的 HTTP 服务的框架。它是在 .NET Framework 上构建 RESTful 应用程序的理想平台。</summary>
    
    
    
    <category term="C#" scheme="https://www.itaru.xyz/categories/C/"/>
    
    <category term="Web API" scheme="https://www.itaru.xyz/categories/C/Web-API/"/>
    
    
    <category term="C#" scheme="https://www.itaru.xyz/tags/C/"/>
    
    <category term="Web API" scheme="https://www.itaru.xyz/tags/Web-API/"/>
    
  </entry>
  
  <entry>
    <title>关于 Google SEO Mobile Usability 的问题</title>
    <link href="https://www.itaru.xyz/blogs/2f9a9158.html"/>
    <id>https://www.itaru.xyz/blogs/2f9a9158.html</id>
    <published>2022-01-06T07:25:24.000Z</published>
    <updated>2022-01-06T12:36:38.269Z</updated>
    
    <content type="html"><![CDATA[<p>最近几天网站改动了挺多，改完后 Google Search Console 提示 Mobile Usability，包括 Text too small to read、Clickable elements too close together、Content wider than screen 问题。</p><p><img src="https://ih.itaru.xyz/images/20220106152842.png" alt="20220106152842"></p><p><img src="https://ih.itaru.xyz/images/20220106154425.png" alt="20220106154425"></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><blockquote><p>robots.txt 是否设置为<code>禁止爬取 js 和 css</code> 了？如果是的话，把它们设置为允许爬取即可。</p></blockquote><hr><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>试着手机访问页面，一切正常，感觉没有上述问题，至少字体还比前两天调大了。但这个问题是近两天才出现的，并且以前移动适配的网站再次检测也出了问题，应该是近两天的哪个改动带来的影响。</p><p>先是将近两天的改动一个个回退，就连字体该调多大都研究了半个小时，最终还是觉得目前的大小正好。问题没有得到解决。</p><p><strong>再次检测时注意到好多内容被 robots.txt 禁止爬取了（原先就发现了，只是一开始没有把它当做原因）。</strong></p><p><img src="https://ih.itaru.xyz/images/20220106154320.png" alt="20220106154320"></p><p>而该页面在 Google 爬虫眼里，成了这样的。</p><p><img src="https://ih.itaru.xyz/images/20220106154400.png" alt="20220106154400"></p><p>robots.txt 内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Allow: /</span><br><span class="line">Allow: /blogs/</span><br><span class="line">Disallow: /js/</span><br><span class="line">Disallow: /css/</span><br><span class="line">Disallow: /fonts/</span><br><span class="line">Disallow: /archives/</span><br><span class="line">Disallow: /tags/</span><br><span class="line">Disallow: /categories/</span><br><span class="line">Disallow: /link/</span><br><span class="line">Disallow: /about/</span><br><span class="line">Disallow: /comments/</span><br><span class="line">Disallow: /gallery/</span><br><span class="line">Disallow: /page/</span><br></pre></td></tr></table></figure><p>改为允许爬取 js、css 和 fonts。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Allow: /</span><br><span class="line">Allow: /blogs/</span><br><span class="line">Allow: /js/</span><br><span class="line">Allow: /css/</span><br><span class="line">Allow: /fonts/</span><br><span class="line">Disallow: /archives/</span><br><span class="line">Disallow: /tags/</span><br><span class="line">Disallow: /categories/</span><br><span class="line">Disallow: /link/</span><br><span class="line">Disallow: /about/</span><br><span class="line">Disallow: /comments/</span><br><span class="line">Disallow: /gallery/</span><br><span class="line">Disallow: /page/</span><br></pre></td></tr></table></figure><p>爬取效果如下：</p><p><img src="https://ih.itaru.xyz/images/20220106154936.png" alt="20220106154936"></p><p>问题解决。</p>]]></content>
    
    
    <summary type="html">本站最近几天 Google Search Console 抓取的页面都提示 Mobile Usability，包括 Text too small to read、Clickable elements too close together、Content wider than screen 问题。</summary>
    
    
    
    <category term="博客搭建" scheme="https://www.itaru.xyz/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    <category term="SEO" scheme="https://www.itaru.xyz/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/SEO/"/>
    
    
    <category term="博客搭建" scheme="https://www.itaru.xyz/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    <category term="SEO" scheme="https://www.itaru.xyz/tags/SEO/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET MVC 学习笔记</title>
    <link href="https://www.itaru.xyz/blogs/cd7c564f.html"/>
    <id>https://www.itaru.xyz/blogs/cd7c564f.html</id>
    <published>2022-01-04T07:23:45.000Z</published>
    <updated>2022-01-06T12:01:45.445Z</updated>
    
    <content type="html"><![CDATA[<p>教程网址：<a href="https://www.tutorialsteacher.com/mvc">TutorialSteacher - ASP.NET MVC Tutorials</a></p><p>ASP.NET MVC <code>5</code> 是一个基于模型-视图-控制器 (MVC) 架构的 Web 框架。开发人员可以使用 ASP.NET MVC 框架构建动态 Web 应用程序，该框架实现了关注点的清晰分离、快速开发和 TDD 友好。</p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><ul><li>路由设置中 UrlParameter.Optional 表示可选参数。</li><li>路由可用 <code>constraints: new &#123; id = @&quot;\d+&quot; &#125;</code> 约束。</li></ul><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><ul><li>添加 Controller，可以根据自己的架构和编码标准使用 T4 模板开发自定义脚手架（Scaffolding）模板。</li></ul><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><ul><li>Action 方法必须得是 public，不能为 static，不能重载。（除非指定 Http动词 如：<code>[HttpPost]</code>，不然请求时会报方法不明确的错误。如果指定的了，会根据不同的 Http动词，执行不同的 Action。）</li><li>Action 方法 返回 XXXResult（如：ViewResult、JavaScriptResult 等），这些 Result 都继承于 <a href="https://www.tutorialsteacher.com/mvc/action-method-in-mvc#:~:text=MVC%20framework%20includes%20various%20Result%20classes">ActionResult</a>。故 ActionResult 其实可以放回多种结果。<code>Action 方法其实也可以将返回值设置为 string int 之类的。</code></li><li>View() 方法是继承 Controller 基类而来的，返回 ViewResult。Controler 类<a href="https://www.tutorialsteacher.com/mvc/action-method-in-mvc#:~:text=shown%20in%20the%20below%20table">还有 Content()、File()、Json() 等</a>。</li><li>行为选择器：ActionName、NonAction、ActionVerbs。<ol><li>测试的情况是 添加了 ActionVerbs（可添加多个）则只可以接受相应类型的请求。没有添加，则任何类型的请求都行。（<code>与文章中说的默认 GET 不符。</code>）</li><li>当返回使用 Json() 时，考虑到安全性，默认不能用 Get 请求。可将 JsonRequestBehavior 设置为 AllowGet。</li><li>浏览器搜索栏的 Url 请求，都是 Get 请求。</li></ol></li></ul><h4 id="参数匹配"><a href="#参数匹配" class="headerlink" title="参数匹配"></a>参数匹配</h4><ul><li> 默认情况下，Action 参数的值是从请求的数据集合中检索的。数据集合包括表单数据或查询字符串值或 <code>cookie 值的名称/值对</code>（这个没试过），对<code>参数名的匹配大小写不敏感</code>。可用 <code>[Bind(Include = &quot;StudentId, StudentName&quot;)]</code> 设置绑定的参数。</li><li>同名参数<a href="https://www.tutorialsteacher.com/mvc/model-binding-in-asp.net-mvc#:~:text=Default%20value%20provider%20collection%20evaluates%20values%20from%20the%20following%20sources:">匹配优先级 Form &gt; QueryString</a>。无论是 POST 请求还是 GET 请求。（Postman 中，Post 请求可以有 QueryString 数据，Get 请求也可以有 Form 数据。）</li><li>Action 非可控类型（如 int）的参数，如果没有赋值，会报错。可改用 int?。</li></ul><h3 id="Razor"><a href="#Razor" class="headerlink" title="Razor"></a>Razor</h3><ul><li>Razor  <code>@:</code> 或者 <code>&lt;text&gt;/&lt;text&gt;</code> 可在代码块中展示文本或 html 标签。文本中又可以使用 @ ，可多重嵌套。</li><li>@{} 中的内容默认当做代码，但是 <code>&lt;xxx&gt;aaa&lt;/xxx&gt;</code> 或 <code>&lt;/br&gt; 类的</code> 形式的内容会被当做 html 标签解析。</li></ul><h4 id="Html"><a href="#Html" class="headerlink" title="@Html"></a>@Html</h4><ul><li>还能这么用继承的？<code>WebViewPage&lt;TModel&gt; : WebViewPage</code>。</li><li>F12 <code>@Html</code> 去了解内部结构。</li><li>调用 HtmlHelper 方法和使用 HTML 标签之间的区别在于 HtmlHelper 方法旨在使绑定到查看数据或模型数据变得容易。</li><li>推荐使用泛型的 TextBoxFor&lt;TModel, TProperty&gt;() 方法，而不是 TextBox()。强类型，错误少，执行速度快。</li><li>@Html.<code>CheckBoxFor</code>(m =&gt; m.isActive) 会额外生成 <code>&lt;input name=&quot;isActive&quot; type=&quot;hidden&quot; value=&quot;false&quot; /&gt;</code>。当 check 未选中时，form 表单值提交 false（check 标签不提交内容）；选中时，提交 true 和 false 两个值，当有多个同名值时，Action 中的参数会<code>匹配第一个</code>。</li><li>Student 类中 <code>[Display(Name = &quot;Name&quot;)]</code> 是给 @Html.LabelFor(m =&gt; m.StudentName) 用的。生成 <code>&lt;label for=&quot;StudentName&quot;&gt;Name&lt;/label&gt;</code></li></ul><h3 id="处理异常的方式"><a href="#处理异常的方式" class="headerlink" title="处理异常的方式"></a>处理异常的方式</h3><ol><li>使用 web.config 中的 <code>&lt;customErrors&gt;</code>，加上 <code>HandleErrorAttribute</code>。<ul><li><code>&lt;customErrors&gt;</code> 有三种值 On、Off、RemoteOnly。</li><li>设置好这两步后，<code>500 错误</code>会返回 Views share 文件夹中的 Error.cshtml（默认情况）。</li><li>FilterConfig 的 RegisterGlobalFilters 中加 filters.Add(new HandleErrorAttribute())，并在 Global 的 Application_Start 中注册 FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters)，则全局都可以 HandelError。（这两步都是默认有的）</li><li>如果没加，<code>[HanderError]</code> 属性标记了的才会返回 Error.cshtml。</li><li> [HanderError] 可设置参数，如 [HandleError(ExceptionType =typeof(NullReferenceException), View =”~/Views/Error/NullReference.cshtm=l”)]。</li><li>这种设置 <code>只配置返回网页，无法将错误写入log，或执行其他逻辑。</code></li></ul></li><li>重写 <code>Controller.OnException</code> 方法，控制器级的。<ul><li>不需要设置 <code>&lt;customErrors&gt;</code>。</li><li> <code>1</code> 和 <code>2</code> 可以配合使用。设置了 <code>1</code>，filterContext.Result = Error.cshtml；如果重载了 OnException 则可替换成别的结果，或者执行一些其他操作。</li></ul></li><li>使用 HttpApplication 的 <code>Application_Error</code> 事件，在 Global 文件中，全局级别的。<ul><li>同样不需要设置 <code>&lt;customErrors&gt;</code>。</li><li>Application_Error 事件在<code>任何类型</code>的异常和错误代码上触发。</li></ul></li></ol><div class="note simple info flat"><p>暂时不知道 任何类型的异常和错误代码 和前面提到的 500 错误 有何区别。</p></div><h4 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h4><ul><li>如果都设置了，执行顺序 <code>1 -&gt; 2 -&gt; 3</code>。</li><li>建议使用全局 Application_Error 事件记录所有异常以及 web.config 中的 <code>&lt;customErrors&gt;</code> 元素以将其重定向到适当的页面。而重写 OnException 用于需要特殊处理的 Controller</li><li><code>上述异常处理技术将返回带有 200 状态码的响应。如果要返回 404 500 之类的，可以考虑用 web.config 的 &lt;httpErrors&gt;</code></li></ul><h3 id="数据有效性验证"><a href="#数据有效性验证" class="headerlink" title="数据有效性验证"></a>数据有效性验证</h3><ul><li>ModelState.IsValid</li><li>ValidationSummary ValidationMessageFor 要配合 return View(std) 使用，可添加参数使其更改为自定义提示信息。</li><li>ModelState.AddModelError 可添加自定义提示，如：ModelState.AddModelError(“StudentName”, “Student Name Already Exists.”)。添加的提示全部会显示在 ValidationSummary 中，并且会根据字段名匹配到相应字段（ValidationMessageFor）。</li></ul><h3 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h3><ul><li>_layout 有两种占位符 @RenderBody()、 @RenderSection(string name)。子页面中<code>相应名称</code>的 @section 会渲染到 RenderSection 中，其余渲染到 RenderBody 中。RenderSection 可设置是否 required。</li><li>_ViewStart.cshtml 可以用于指定 layout，子文件夹中也可以创建 _ViewStart.cshtml。另外，控制器中也可以指定 layout，return View(“Test”,”_layout2”)。<code>控制器指定的 layout &gt; 当前页面中指定的 layout（cshtml 文件最上方指定的） &gt; 当前文件夹 _ViewStart.cshtml 指定的 layout &gt; 大于全局的 layout（view 文件夹下的 _ViewStart.cshtml）</code>。</li></ul><h4 id="Partial-View。"><a href="#Partial-View。" class="headerlink" title="Partial View。"></a>Partial View。</h4><ul><li>@Html.Partial() 它返回一个 HTML 字符串，因此有机会在呈现之前修改 HTML（通过重载 Partial 方法）。</li><li>@html.RenderPartial() 方法与 @html.Partial() 方法相同，只是它将指定部分视图的结果 HTML 直接写入 HTTP 响应流，也可以在渲染之前修改它的 HTML。</li><li>@html.RenderAction(“RenderMenu”, “Home”)，前提得实现并调用一个<a href="https://www.tutorialsteacher.com/mvc/partial-view-in-asp.net-mvc#:~:text=The%20@html.RenderAction()%20method">符合规范的 Action</a>。</li><li>RenderPartial() <code>方法返回void，所以后需要一个分号</code>，因此它必须包含在@{} 中。</li></ul><h3 id="ViewBag-ViewData"><a href="#ViewBag-ViewData" class="headerlink" title="ViewBag ViewData"></a>ViewBag ViewData</h3><ul><li>ViewBag 是 ControllerBase 类的字段 <code>public dynamic ViewBag &#123; get; &#125;</code>（为何是只读的？）。原始类型或复杂类型对象都可以分配给 ViewBag 属性，重复给同一个名称分配值会覆盖。</li><li>ViewBag 和 ViewData 只将数据从控制器传输到视图，反之则不然。<code>如果发生重定向，ViewBag 值将为空。</code></li><li>ViewData 值在使用之前必须被转换为适当的类型。</li><li>ViewBag 是 dynamic 类型，而 ViewData 是 Object 类型。可以这么用 <code>ViewBag.Arr.Length</code>（即使没有智能提示），但不能 ViewData.Arr.Length。</li><li>ViewBag 是 ViewData 的包装器。如果 ViewBag 属性名称与 ViewData 的键匹配，它将抛出运行时异常。<br><code>*我自己测试的情况似乎不是这样的。</code></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MVC <span class="number">5.2</span><span class="number">.7</span> </span><br><span class="line">测试情况：</span><br><span class="line"><span class="number">1.</span> ViewBag 和 ViewData 如果有同名的赋值，会被覆盖为后一个。<span class="meta"># 说明它们内部应该是同一个容器</span></span><br><span class="line"><span class="number">2.</span> ViewBag 可以使用（也可以覆盖） ViewData 设置的值，反之亦然。</span><br><span class="line"></span><br><span class="line"><span class="meta"># ViewBag（MVC 3.0) 应该是 ViewData（MVC 1.0) 的升级版。毕竟功能差不多，ViewBag 不用类型转换。</span></span><br><span class="line"><span class="meta"># 原理还不清楚，最好被混着用。我选择 ViewBag。</span></span><br></pre></td></tr></table></figure><h3 id="TempData"><a href="#TempData" class="headerlink" title="TempData"></a>TempData</h3><ul><li>TempData 用于将数据从<code>视图传输到控制器</code>、控制器到视图，或从一个 Action 传输到相同或不同控制器的 Action。</li><li>TempData 临时存储数据并在<code>检索值后自动删除它</code>，TempData.Keep() 可使其保留待删除数据。</li></ul><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><ul><li>Filter 是一个自定义类，您可以在其中编写自定义逻辑以在 Action 执行之前或之后执行。</li><li>过滤器可以以<code>声明式</code>或<code>编程式</code>应用于行为或控制器。<code>声明式</code>是将过滤器特性应用于行为或控制器类，<code>编程式</code>是实现相应的接口。</li><li>MVC 提供了<a href="https://www.tutorialsteacher.com/mvc/filters-in-asp.net-mvc#:~:text=MVC%20provides%20different%20types%20of%20filters">四种类型</a>的过滤器：Authorization、Action、Result、Exception。</li></ul><h4 id="HandleErrorAttribute"><a href="#HandleErrorAttribute" class="headerlink" title="HandleErrorAttribute"></a>HandleErrorAttribute</h4><ul><li>HandleErrorAttribute 类是一个<code>内置</code>的异常过滤器类，它在发生未处理的异常时默认呈现 Error.cshtml。 HandleError 特性其实指的就是它。抛出一个未处理的异常时会执行它，未处理的异常是没有被 try-catch 捕捉的异常。可以设置全局，也可以给特定的 Controller 或 Action 添加特性。具体在<a href="#%E5%A4%84%E7%90%86%E5%BC%82%E5%B8%B8%E7%9A%84%E6%96%B9%E5%BC%8F">处理异常的方式</a>有说明。</li></ul><h4 id="自定过滤器"><a href="#自定过滤器" class="headerlink" title="自定过滤器"></a>自定过滤器</h4><ul><li>自定义异常过滤器 <code>class MyErrorHandler : FilterAttribute, IExceptionFilter</code>（没有测试是否继承其中一个就行） ，其他类型的过滤器同理（如：Action 过滤器继承 FilterAttribute、IActionFilter ）。</li><li>也可以<code>派生</code>一个内置过滤器类并<code>重写</code>适当的方法来扩展内置过滤器的功能。</li><li>它们使用方法和内置过滤器是一样的。</li></ul><h4 id="Action-Filters"><a href="#Action-Filters" class="headerlink" title="Action Filters"></a>Action Filters</h4><ul><li>OutputCache 是一个内置的 Action Filters，设置返回结果（没测试除 View 外，其他是否可以）的缓存时间。行为过滤器通常用于应用横切关注点，例如日志记录、缓存、授权<code>（不是有个专门的 Authorization 过滤器吗？）</code>等。</li><li>OnActionExecuting （Action 之前）-&gt; OnActionExecuted （Action 之后，View 渲染之前）-&gt; OnResultExecuting （View 渲染之前）-&gt; OnResultExecuted （View 渲染之后）。</li><li><a href="https://stackoverflow.com/a/20125845/8910566">OnActionExecuted 和 OnResultExecuting 却别在于他们有不同的 Context</a>。<ol><li>OnActionExecuted 有一个 <code>ActionExecutedContext</code>，可以在其中查看操作产生的结果。还可以查看操作是否遇到异常，并查看是否处理了异常。</li><li>OnResultExecuting 有一个 <code>ResultExecutingContext</code>。这个方法在 ActionResult 实例被调用之前被调用。可以用来检查方法的结果，也可以取消结果的执行，这通常会导致状态代码为 200 的空白响应。（没法在 OnActionExecuted 方法中执行此操作）。</li></ol></li></ul><h3 id="Bundling-and-Minification"><a href="#Bundling-and-Minification" class="headerlink" title="Bundling and Minification"></a>Bundling and Minification</h3><ul><li>捆绑允许我们在单个 HTTP 请求中从服务器加载一堆静态文件。缩小技术通过删除不必要的空格和注释<code>并将变量名称缩短为一个字符</code>来优化脚本或 CSS 文件大小。</li><li>ScriptBundle、StyleBundle、DynamicFolderBundle</li><li>BundleConfig 的 RegisterBundles 方法中设置 ScriptBundle、StyleBundle，View 使用 @Scripts.Render(“”) 或  @Styles.Render(“”)。需要在 Global 中注册 BundleConfig.RegisterBundles(BundleTable.Bundles) 。</li><li>生成的绑定文件在另一个文件夹中，那么类似于 <code>background:url(../images/border_btm.png)</code> 这样的包含相对路径的引用将会 404，<a href="https://www.tutorialsteacher.com/articles/how-to-set-image-path-in-style-bundle">可以用 CssRewriteUrlTransform 解决</a>。</li><li>其他设置<ol><li>IncludeDirectory 可绑定文件夹下的所有文件。</li><li>{version} 可自动匹配可用版本。</li><li>还可以设置 CDN。</li></ol></li></ul><h3 id="Area"><a href="#Area" class="headerlink" title="Area"></a>Area</h3><ol><li> Area 允许我们将大型应用程序划分为更小的单元，其中每个单元包含一个单独的 MVC 文件夹结构，与默认的 MVC 文件夹结构相同。</li><li> Area 中 AdminAreaRegistration (Admin为Area名）重写路由 ，<code>/Admin/profile</code> 请求会被映射到 Areas/Admin/controller/ProfileController。需要在 Global 中注册 AreaRegistration.RegisterAllAreas()。 </li><li> 如果项目中找不到添加 Area 的选项：添加 -&gt; 搭建基架的项目（New Scaffolded Item…） -&gt; MVC 中的 Area。</li></ol><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><code>C# 程序中比较，无论是 linq 还是其他，默认是区分大小写的。如果 linq 转换为 sql 语句，在数据库中查询，是否区分大小写得看数据库的设置（默认是不区分的）。</code> </li></ul>]]></content>
    
    
    <summary type="html">ASP.NET MVC 是一个基于模型-视图-控制器 (MVC) 架构的 Web 框架。开发人员可以使用 ASP.NET MVC 框架构建动态 Web 应用程序，该框架实现了关注点的清晰分离、快速开发和 TDD 友好。</summary>
    
    
    
    <category term="C#" scheme="https://www.itaru.xyz/categories/C/"/>
    
    <category term="MVC" scheme="https://www.itaru.xyz/categories/C/MVC/"/>
    
    
    <category term="C#" scheme="https://www.itaru.xyz/tags/C/"/>
    
    <category term="MVC" scheme="https://www.itaru.xyz/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title>关于 font-spider 踩的各种坑</title>
    <link href="https://www.itaru.xyz/blogs/ad93c862.html"/>
    <id>https://www.itaru.xyz/blogs/ad93c862.html</id>
    <published>2022-01-02T09:14:24.000Z</published>
    <updated>2022-01-21T02:45:22.162Z</updated>
    
    <content type="html"><![CDATA[<p>前几天看到 <a href="https://hin.cool/">LonelyGod</a> 的博客，字体太漂亮了，偷偷拿来用了。可是 5M 大小的字体，加载会比较慢。今天刚好看到 <a href="https://github.com/aui/font-spider">font-spider</a>，字蛛是一个智能 WebFont 压缩工具，它能自动分析出页面使用的 WebFont 并进行按需压缩。你的网站用了什么字，它给你从字体包里挑出来打包成另一个字体文件。</p><p>font-spider 的说明文档言简意赅，恕我不是很看得懂。GitHub 中的好多项目说明文档都很简洁，每当遇到看了说明文档，还不知道怎么用时，我都会搜一搜有没有谁写了更详细的使用说明。如没有，往往会陷入自我怀疑，难道大家都懂得怎么使用，就我看不懂说明文档？<a href="https://leetcode.com/problems/median-of-two-sorted-arrays/discuss/2471/Very-concise-O(log(min(MN)))-iterative-solution-with-detailed-explanation/170358">I don’t understand,I am foolish ,I hate myself。</a></p><p>这个项目已经几年没更新了，这个我是后面才发现的，或许是因为太久没更新才会出现各种各样的问题。</p><pre><code>StackOverflow 先看赞数，GitBub 先看更新时间。</code></pre><h3 id="web-font-not-found"><a href="#web-font-not-found" class="headerlink" title="web font not found"></a>web font not found</h3><p>按照说明文档，先给博客添加了个 <code>font.css</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*声明 WebFont*/</span></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;hytmr55&#x27;</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;/fonts/hytmr55.eot&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="attribute">src</span>:</span><br><span class="line">  </span><br><span class="line">      <span class="built_in">url</span>(<span class="string">&#x27;/fonts/hytmr55.eot?#font-spider&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;embedded-opentype&#x27;</span>),</span><br><span class="line">  </span><br><span class="line">      <span class="built_in">url</span>(<span class="string">&#x27;/fonts/hytmr55.woff&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>),</span><br><span class="line">  </span><br><span class="line">      <span class="built_in">url</span>(<span class="string">&#x27;/fonts/hytmr55.ttf&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>),</span><br><span class="line">  </span><br><span class="line">      <span class="built_in">url</span>(<span class="string">&#x27;/fonts/hytmr55.svg&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;svg&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  </span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后直接就在根目录运行 <code>font-spider *.html</code>，报错：<code>&lt;web font not found&gt;</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c:\Data\Blog&gt;font-spider *.html</span><br><span class="line">&lt;web font not found&gt;</span><br></pre></td></tr></table></figure><p>原因是该文件夹中没有 html 文件，没找到 <code>font-family</code> 标记。</p><h3 id="Error-does-not-support-remote-path"><a href="#Error-does-not-support-remote-path" class="headerlink" title="Error: does not support remote path"></a>Error: does not support remote path</h3><p>进入 <code>public</code> 文件夹，执行<code>font-spider index.html</code>，先输入一个文件吧。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c:\Data\Blog&gt;cd public</span><br><span class="line">c:\Data\Blog\public&gt;font-spider index.html</span><br></pre></td></tr></table></figure><p><img src="https://ih.itaru.xyz/images/20220102174823.png" alt="20220102174823"></p><p>既然不支持远程文件，那就用 <code>--ignore</code> 吧。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> font-spider --ignore <span class="string">&quot;^https://&quot;</span> index.html</span></span><br></pre></td></tr></table></figure><p><img src="https://ih.itaru.xyz/images/20220102175256.png" alt="20220102175256"></p><p>好的，进入下一个错误。</p><h3 id="Error-“xxx”-did-not-find-truetype-or-opentype-fonts"><a href="#Error-“xxx”-did-not-find-truetype-or-opentype-fonts" class="headerlink" title="Error: “xxx” did not find truetype or opentype fonts"></a>Error: “xxx” did not find truetype or opentype fonts</h3><p>这一步我花了好长时间，最终知道了找错应给配合 <code>--info</code> 和 <code>--debug</code>。</p><p>也知道了 <code>font-spider --ignore &quot;^https://&quot; index.html</code> 这一步其实没有意义。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> font-spider index.html --debug</span></span><br></pre></td></tr></table></figure><p><img src="https://ih.itaru.xyz/images/20220102175754.png" alt="20220102175754"></p><p>进入下一个错误。</p><h3 id="Error-ENOENT-load-“c-css-index-css”-failed"><a href="#Error-ENOENT-load-“c-css-index-css”-failed" class="headerlink" title="Error: : ENOENT, load “c:\css\index.css” failed"></a>Error: : ENOENT, load “c:\css\index.css” failed</h3><p><code>Error: : ENOENT, load &quot;c:\css\index.css&quot; failed: ENOENT: no such file or directory, open &#39;c:\css\index.css&#39;</code></p><p>博客添加 <code>fonts.css</code> 时用的是相对于博客主目录的路径 <code>\css\index.css</code>，而 font-spider 把它当成了相对C盘根目录的路径。</p><p>经 <a href="https://github.com/aui/font-spider/issues/40">font-spider 加载css报错</a> 启发，可以用 <code>--map</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> font-spider --map <span class="string">&quot;/css/(.*).css,css/<span class="variable">$1</span>.css&quot;</span>  index.html</span></span><br></pre></td></tr></table></figure><p><img src="https://ih.itaru.xyz/images/20220102184432.png" alt="20220102184432"></p><p>又是 <code>Error: does not support remote path</code>，有经验了，上 <code>--debug</code>。干脆没有成功之前，都 <code>--debug</code> 吧。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> font-spider --map <span class="string">&quot;/css/(.*).css,css/<span class="variable">$1</span>.css&quot;</span>  index.html --debug</span></span><br></pre></td></tr></table></figure><p><img src="https://ih.itaru.xyz/images/20220102184828.png" alt="20220102184828"></p><p>进入下一个错误。</p><h3 id="load-“https-xxx-css-quot-failed-Not-Found"><a href="#load-“https-xxx-css-quot-failed-Not-Found" class="headerlink" title="load “https://xxx.css&quot; failed: Not Found"></a>load “<a href="https://xxx.css&quot;/">https://xxx.css&quot;</a> failed: Not Found</h3><p><code>Error: : ENOENT, load &quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-freecss/all.min.css&quot; failed: Not Found</code></p><p>用 <code>--info</code> 看看。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> font-spider --map <span class="string">&quot;/css/(.*).css,css/<span class="variable">$1</span>.css&quot;</span>  index.html --info</span></span><br></pre></td></tr></table></figure><p><img src="https://ih.itaru.xyz/images/20220102185403.png" alt="20220102185403"></p><p>折腾了那么久，也差不多明白了 font-spider 是怎样工作的。</p><blockquote><p>扫描输入文件（如 index.html）以及该文件引用的 css 文件，检查这些文件是否有 <code>font-family</code>，有则编入 <code>--info</code>，然后根据设置找到相应的字体文件（必须是 ttf 格式的），生成筛选后的字体文件。</p></blockquote><p>先试试把这个 Not Found 的文件 <code>--ignore</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> font-spider --map <span class="string">&quot;/css/(.*).css,css/<span class="variable">$1</span>.css&quot;</span>  --ignore <span class="string">&quot;^https://&quot;</span>  index.html  --debug</span></span><br></pre></td></tr></table></figure><p><img src="https://ih.itaru.xyz/images/20220102190413.png" alt="20220102190413"></p><h3 id="Error-“Poem”-did-not-find-truetype-or-opentype-fonts"><a href="#Error-“Poem”-did-not-find-truetype-or-opentype-fonts" class="headerlink" title="Error: “Poem” did not find truetype or opentype fonts"></a>Error: “Poem” did not find truetype or opentype fonts</h3><p>写到这里，我又再次体会到了几个小时前，不断尝试时的 厌烦、无力和不甘 交织在一起的感觉。不想看源码，感觉那会花很长的时间，但现在可能花了更长的时间。</p><p>font-family Poem 是一个插件中的，Google F12 查看到底是哪里引入了它。</p><p><img src="https://ih.itaru.xyz/images/20220102191459.png" alt="20220102191459"></p><p>那些导致错误的 css 都在这里了，用 <code>--ignore</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> font-spider --map <span class="string">&quot;/css/(.*).css,css/<span class="variable">$1</span>.css&quot;</span>  --ignore <span class="string">&quot;icon\.css$,tag_plugins\.min\.css$,\.min\.css$&quot;</span>  index.html  --debug</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>\.min\.css$ 本该匹配到 <a href="https://cdn.jsdelivr.net/npm/hexo-butterfly-tag-plugins-plus@latest/lib/tag_plugins.min.css">https://cdn.jsdelivr.net/npm/hexo-butterfly-tag-plugins-plus@latest/lib/tag_plugins.min.css</a> 的，然而却没有，只能再加个 tag_plugins\.min\.css$。<br>好像 \ 得用两个 \\，但试了还是没用。</p></div><p><img src="https://ih.itaru.xyz/images/20220102191956.png" alt="20220102191956"></p><h3 id="File-not-found-with-singular-glob"><a href="#File-not-found-with-singular-glob" class="headerlink" title="File not found with singular glob"></a>File not found with singular glob</h3><p>依据上图可知，其实是字体文件也用了相对网站根目录的路径，而被解析成了相对C盘根目录的路径。</p><p>用 <code>--map</code> 将 <code>c:/fonts/hytmr55.ttf</code> 替换为 <code>fonts/hytmr55.ttf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> font-spider --map <span class="string">&quot;/css/(.*).css,css/<span class="variable">$1</span>.css,c:/fonts/hytmr55.ttf,fonts/hytmr55.ttf&quot;</span> --ignore <span class="string">&quot;icon\.css$,tag_plugins\.min\.css$,\.min\.css$&quot;</span> index.html --debug</span></span><br></pre></td></tr></table></figure><p><img src="https://ih.itaru.xyz/images/20220102194534.png" alt="20220102194534"></p><p>成功了，但是部分文件生成到 <code>c:/fonts</code> 里去了。</p><p><code>c:/fonts/</code> 改为 <code>fonts/</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> font-spider --map <span class="string">&quot;/css/(.*).css,css/<span class="variable">$1</span>.css,c:/fonts/,fonts/&quot;</span> --ignore <span class="string">&quot;icon[.]css$,tag_plugins\.min\.css,all\.min\.css&quot;</span> index.html --debug</span></span><br></pre></td></tr></table></figure><p>都生成到 public 的 <code>fonts/</code> 文件夹了。</p><p><img src="https://ih.itaru.xyz/images/20220102194828.png" alt="20220102194828"></p><h3 id="最终成果"><a href="#最终成果" class="headerlink" title="最终成果"></a>最终成果</h3><ol><li>改为输入 public 目录下的所有 html。</li><li>将需要用到的字体文件复制到 source 文件夹，部署的时候用。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> font-spider --map <span class="string">&quot;/css/(.*).css,css/<span class="variable">$1</span>.css,c:/fonts/,fonts/&quot;</span> --ignore <span class="string">&quot;icon\.css$,tag_plugins\.min\.css$,\.min\.css$&quot;</span> *.html **/*.html</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> copy C:\Data\Blog\public\fonts\hytmr55.woff C:\Data\Blog\<span class="built_in">source</span>\fonts\hytmr55.woff /y</span></span><br></pre></td></tr></table></figure><pre><code>每次部署博客又得多执行几个语句了。。</code></pre>]]></content>
    
    
    <summary type="html">字蛛是一个智能 WebFont 压缩工具，它能自动分析出页面使用的 WebFont 并进行按需压缩。你的网站用了什么字，它给你从字体包里挑出来打包成另一个字体文件。</summary>
    
    
    
    <category term="博客搭建" scheme="https://www.itaru.xyz/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    <category term="优化" scheme="https://www.itaru.xyz/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="博客搭建" scheme="https://www.itaru.xyz/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    <category term="博客优化" scheme="https://www.itaru.xyz/tags/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Valine 无法评论的解决方案</title>
    <link href="https://www.itaru.xyz/blogs/28b3acdd.html"/>
    <id>https://www.itaru.xyz/blogs/28b3acdd.html</id>
    <published>2022-01-02T00:09:14.000Z</published>
    <updated>2022-01-06T12:03:03.049Z</updated>
    
    <content type="html"><![CDATA[<p>本站使用的是 LeanCloud 国际版的开发版，hexo 主题是 butterfly。配置详情请见：<a href="/blogs/bfcce7e4.html" title="配置评论插件 Valine 的邮件提醒和后台管理系统 Valine Admin">配置评论插件 Valine 的邮件提醒和后台管理系统 Valine Admin</a>。</p><h3 id="问题原因和解决方案"><a href="#问题原因和解决方案" class="headerlink" title="问题原因和解决方案"></a>问题原因和解决方案</h3><ol><li>问题原因：LeanCloud 存储服务数据已归档。<ul><li>解决方案：登录 LeanCloud，点击激活。</li></ul></li><li>问题原因：请求的域名不正确。<ul><li>解决方法：主题配置文件的 valine 项<a href="#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">填上 serverURLs</a>。</li></ul></li></ol><hr><h3 id="LeanCloud-存储服务数据已归档"><a href="#LeanCloud-存储服务数据已归档" class="headerlink" title="LeanCloud 存储服务数据已归档"></a>LeanCloud 存储服务数据已归档</h3><p>30天没有访问，LeanCloud 会为你的数据做归档处理以节省服务器资源，<a href="https://www.tangruiping.com/post/hexo-valine-admin.html#:~:text=%E6%89%93%E5%BC%80LeanCloud%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%B8%BB%E9%A1%B5%E6%BF%80%E6%B4%BB%E5%8D%B3%E5%8F%AF">打开 LeanCloud 控制台主页激活即可</a>。</p><h3 id="请求的域名不正确"><a href="#请求的域名不正确" class="headerlink" title="请求的域名不正确"></a>请求的域名不正确</h3><p>我此次遇到的问题，报错是：</p><p><code>https://us.leancloud.cn/1.1/classes/Comment?where=%7B%22%24or%22%3A%5B%7B%22rid%22%3A%7B%22%24exists%22%3Afalse%7D%7D%2C%7B%22rid%22%3A%22%22%7D%5D%2C%22url%22%3A%22%2Fcomments%2F%22%7D&amp;order=-createdAt%2C-insertedAt&amp;limit=0&amp;count=1</code> <mark class="hl-label red">Failed to load resource: net::ERR_NAME_NOT_RESOLVED</mark> </p><p>错在这个 <code>https://us.leancloud.cn</code> 域名不正确。</p><p>butterfly 有两个文件对 leancloud 进行请求</p><ul><li><a href="https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js">https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js</a></li></ul><p><img src="https://ih.itaru.xyz/images/20220102082309.png" alt="20220102082309"></p><p>这个文件默认请求的域名是 <code>https://r+leancloud.cn</code></p><ul><li>themes\butterfly\layout\includes\third-party\newest-comments\valine.pug</li></ul><p><img src="https://ih.itaru.xyz/images/20220102082850.png" alt="20220102082850"></p><p>这个文件默认请求的域名是  <code>https://$&#123;theme.valine.appId.substring(0,8)&#125;.api.lncldglobal.com</code></p><pre><code>valine.pug 请求的域名是正确的，但是却走了 Valine.min.js 的请求。</code></pre><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p><code>我们可以在主题配置文件的 valine 项的 serverURLs 填上，https:// + appId的前8个字符 + .api.lncldglobal.com。</code></p><p>这个其实就是 leancloud 为我们提供的 REST API 服务器地址。</p><p><img src="https://ih.itaru.xyz/images/20220102083805.png" alt="20220102083805"></p>]]></content>
    
    
    <summary type="html">本站使用的是 LeanCloud 国际版的开发版，hexo 主题是 butterfly。本文阐述最近 Valine 无法评论的原因和解决方案。</summary>
    
    
    
    <category term="博客搭建" scheme="https://www.itaru.xyz/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    <category term="Valine" scheme="https://www.itaru.xyz/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/Valine/"/>
    
    
    <category term="博客搭建" scheme="https://www.itaru.xyz/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    <category term="Valine" scheme="https://www.itaru.xyz/tags/Valine/"/>
    
  </entry>
  
  <entry>
    <title>动漫资源汇总</title>
    <link href="https://www.itaru.xyz/blogs/9bec54e6.html"/>
    <id>https://www.itaru.xyz/blogs/9bec54e6.html</id>
    <published>2021-12-22T14:15:20.000Z</published>
    <updated>2022-01-06T13:43:39.719Z</updated>
    
    <content type="html"><![CDATA[<p>一些值得推荐的在线观看、下载以及获取动漫资讯的网站、APP。</p><blockquote><p><code>*</code> 标记的需要代理。</p></blockquote><h3 id="在线观看"><a href="#在线观看" class="headerlink" title="在线观看"></a>在线观看</h3><ul><li><a href="https://www.bilibili.com/">哔哩哔哩</a> 虽然近年来老是被削，永远支持小破站。</li><li><a href="https://space.bilibili.com/11783021/">哔哩哔哩番剧出差*</a> 哔哩哔哩港澳台地区的动漫都是在这里发布的，近年大陆禁播番越来越多，港澳台地区新番要比大陆多不少，而且没有修图。</li><li><a href="http://m.yinghuacd.com/">樱花动漫</a>、<a href="http://www.nicotv.me/">妮可动漫</a>、<a href="http://www.zzzfun.com/">zzzfun</a> 资源挺多的，就是视频清晰度不够</li><li><a href="https://ani.gamer.com.tw/">巴哈姆特動畫瘋*</a> 台湾地区的动画平台，没会员的话每集之前有30秒广告，并且要会员才能看高清。据说万能的淘宝有卖会员。</li><li><a href="https://www.nicovideo.jp/">ニコニコ*</a>、<a href="https://anime.dmkt-sp.jp/animestore/">dアニメストア*</a>、<a href="https://site.nicovideo.jp/danime/">dアニメストア ニコニコ支店*</a> 日本动画平台。<br>注：dアニメストア ニコニコ支店 的会员和 dアニメストア 的会员是不能互用的。</li></ul><h3 id="APP（Android）"><a href="#APP（Android）" class="headerlink" title="APP（Android）"></a>APP（Android）</h3><ul><li>哔哩哔哩<br>注：哔哩哔哩中番剧的搜索结果会随 IP 所在地区变化。并且哔哩哔哩在 Google Play 上架的版本和国内的有些不同，比如新番表显示的是港澳台地区的。</li><li><a href="http://dddh.pub/">嘀嘀动漫</a> 挺全的，并且有超清资源。目前永久会员66元（我开通的时候是18，后来涨价了），开个会员手机上看番需求基本可以满足，除了一些绅士番（本来表番也挺多的，不少被人举报下架了）。还有就是没有弹幕，少了部分乐趣。</li></ul><h3 id="BT-PT-站点"><a href="#BT-PT-站点" class="headerlink" title="BT/PT 站点"></a>BT/PT 站点</h3><h4 id="BT站点"><a href="#BT站点" class="headerlink" title="BT站点"></a>BT站点</h4><ul><li><a href="https://share.dmhy.org/">動漫花園*</a> 国内应该有不少 BT 站点搬运该网站的内容。</li><li><a href="https://nyaa.si/">nyaa*</a> 这个站点有个 18R 的姊妹站。</li><li><a href="https://www.tokyotosho.info/">Tokyo Toshokan*</a> 東京図書館。</li></ul><h4 id="PT站点"><a href="#PT站点" class="headerlink" title="PT站点"></a>PT站点</h4><ul><li><a href="https://www.skyey2.com/forum.php?mod=torrents">Skyey Snow</a> 天雪，动漫特色PT站点，入站无门槛。但得注意分享率，太低了会被封号。</li><li><a href="https://u2.dmhy.org/portal.php">U2*</a> 幼儿园，动漫花园内站。大佬聚集地，一号难求（我没账号，无法进去一观）。据说里面应有尽有。动辄上百G的资源也不是我这低宽带和小硬盘消受得起的。</li></ul><h4 id="字幕说明"><a href="#字幕说明" class="headerlink" title="字幕说明"></a>字幕说明</h4><ul><li>内封字幕：视频和字幕封装在同一个文件中，一般包含多种语言的字幕（但不一定有中文），可以切换或关闭字幕。多为 <a href="https://baike.baidu.com/item/mkv/1658908?fr=aladdin">MKV</a> 格式。</li><li>内嵌字幕：字幕与视频嵌在一起，无法分离。多压制成 MP4 格式，质量会有损失，但影响不大。</li><li>外挂字幕：无字幕的视频和字幕文件封在同一个资源中。和内封的区别在于，字幕是单独的文件。</li></ul><p>找无字幕的视频最好是找 MKV 资源。如果用中文名搜不到，用英文名搜一般是可以找到无字幕版的。可以先用中文名搜，资源一般都会附带英文名的。</p><h3 id="字幕"><a href="#字幕" class="headerlink" title="字幕"></a>字幕</h3><ul><li><a href="https://assrt.net/">射手网(伪)</a></li><li><a href="https://www.skyey2.com/forum.php?mod=torrents&cat=16#:~:text=%E5%AD%97%E5%B9%95">Skyey Snow</a> PT站往往也会有字幕。</li><li><a href="https://github.com/Nekomoekissaten-SUB/Nekomoekissaten-Subs">喵萌奶茶屋</a> 以及其他一些字幕组自己的资源库。</li></ul><h3 id="百科"><a href="#百科" class="headerlink" title="百科"></a>百科</h3><ul><li><a href="https://zh.moegirl.org.cn/Mainpage">萌娘百科</a> 这边有个新番列表想推荐下：<a href="https://zh.moegirl.org.cn/Template:%E6%97%A5%E6%9C%AC2022%E5%B9%B4%E5%8A%A8%E7%94%BB">日本2022年动画</a> -&gt; <a href="https://zh.moegirl.org.cn/%E6%97%A5%E6%9C%AC2022%E5%B9%B4%E5%86%AC%E5%AD%A3%E5%8A%A8%E7%94%BB">日本2022年冬季动画</a> -&gt; <a href="https://zh.moegirl.org.cn/%E6%97%A5%E6%9C%AC2022%E5%B9%B4%E5%86%AC%E5%AD%A3%E5%8A%A8%E7%94%BB#%E5%8F%82%E8%A7%81">日本2022年冬季动画播出时间</a></li><li><a href="https://dic.nicovideo.jp/">ニコニコ大百科*</a></li></ul>]]></content>
    
    
    <summary type="html">一些值得推荐的在线观看、下载动漫以及获取动漫资讯的网站、APP。</summary>
    
    
    
    <category term="动漫" scheme="https://www.itaru.xyz/categories/%E5%8A%A8%E6%BC%AB/"/>
    
    
    <category term="动漫" scheme="https://www.itaru.xyz/tags/%E5%8A%A8%E6%BC%AB/"/>
    
  </entry>
  
  <entry>
    <title>Butterfly主题 Markdown 语法显示效果</title>
    <link href="https://www.itaru.xyz/blogs/32ead7ca.html"/>
    <id>https://www.itaru.xyz/blogs/32ead7ca.html</id>
    <published>2021-12-19T11:17:22.000Z</published>
    <updated>2022-01-06T13:38:22.760Z</updated>
    
    <content type="html"><![CDATA[<p>Butterfly主题开启頁面美化后的一些效果，以及其他一些 Markdown 语法的汇总。</p><blockquote><p>得开启<a href="https://butterfly.js.org/posts/ceeb73f/#%E9%A0%81%E9%9D%A2%E7%BE%8E%E5%8C%96">頁面美化</a></p></blockquote><p>参考文章：<a href="https://whatsid.me/2019/08/21/hexo-markdown-syntax/">Hexo博客的Markdown语法</a><br><a href="https://butterfly.js.org/posts/4aa8abbe/">Butterfly 安裝文檔(三) 主題配置-1</a></p><h2 id="美化了的（部分）"><a href="#美化了的（部分）" class="headerlink" title="美化了的（部分）"></a>美化了的（部分）</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># h1   //一级标题 对应 <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span> <span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="section">## h2   //二级标题 对应 <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span></span> <span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="section">### h3  //三级标题 对应 <span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span></span> <span class="xml"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="section">#### h4  //四级标题 对应 <span class="xml"><span class="tag">&lt;<span class="name">h4</span>&gt;</span></span> <span class="xml"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span></span><br><span class="line"><span class="section">##### h5  //五级标题 对应 <span class="xml"><span class="tag">&lt;<span class="name">h5</span>&gt;</span></span> <span class="xml"><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span></span></span><br><span class="line"><span class="section">###### h6  //六级标题 对应 <span class="xml"><span class="tag">&lt;<span class="name">h6</span>&gt;</span></span> <span class="xml"><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure><h1 id="h1"><a href="#h1" class="headerlink" title="h1"></a>h1</h1><h2 id="h2"><a href="#h2" class="headerlink" title="h2"></a>h2</h2><h3 id="h3"><a href="#h3" class="headerlink" title="h3"></a>h3</h3><h4 id="h4"><a href="#h4" class="headerlink" title="h4"></a>h4</h4><h5 id="h5"><a href="#h5" class="headerlink" title="h5"></a>h5</h5><h6 id="h6"><a href="#h6" class="headerlink" title="h6"></a>h6</h6><h3 id="段落及区块引用"><a href="#段落及区块引用" class="headerlink" title="段落及区块引用"></a>段落及区块引用</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 这段文字将会被高亮显示</span></span><br></pre></td></tr></table></figure><blockquote><p>这段文字将会被高亮显示</p></blockquote><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 无序列表1 // <span class="emphasis">* 和 + 也行</span></span><br><span class="line"><span class="emphasis">- 无序列表2</span></span><br><span class="line"><span class="emphasis">- 无序列表3</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">1. 有序列表1</span></span><br><span class="line"><span class="emphasis">2. 有序列表2</span></span><br><span class="line"><span class="emphasis">3. 有序列表3</span></span><br></pre></td></tr></table></figure><ul><li>无序列表1</li><li>无序列表2</li><li>无序列表3</li></ul><ol><li>有序列表1</li><li>有序列表2</li><li>有序列表3</li></ol><h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--- //或 ***</span><br></pre></td></tr></table></figure><hr><h3 id="嵌套引用"><a href="#嵌套引用" class="headerlink" title="嵌套引用"></a>嵌套引用</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 动物</span></span><br><span class="line">&gt;&gt; 水生动物</span><br><span class="line">&gt;&gt; 陆生动物</span><br><span class="line">&gt;&gt;&gt; 猴子</span><br><span class="line">&gt;&gt;&gt; 人</span><br><span class="line">&gt;&gt;&gt;&gt; 程序猿</span><br><span class="line">&gt;&gt;&gt;&gt; 攻城狮</span><br><span class="line">&gt;&gt;产品狗 //这里需要注意，没有空行间隔，忽略降级引用标记</span><br><span class="line">射鸡虱   //这里需要注意，没有空行间隔，忽略降级引用标记</span><br><span class="line"></span><br><span class="line">&gt;&gt; 两栖类动物</span><br><span class="line">&gt;&gt;&gt; 大鳄鱼</span><br><span class="line">唐老鸭</span><br></pre></td></tr></table></figure><blockquote><p>动物</p><blockquote><p>水生动物<br>陆生动物</p><blockquote><p>猴子<br>人</p><blockquote><p>程序猿<br>攻城狮<br>产品狗 //这里需要注意，没有空行间隔，忽略降级引用标记<br>射鸡虱   //这里需要注意，没有空行间隔，忽略降级引用标记</p></blockquote></blockquote></blockquote></blockquote><blockquote><blockquote><p>两栖类动物</p><blockquote><p>大鳄鱼<br>唐老鸭</p></blockquote></blockquote></blockquote><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote 作者, 出处 %&#125;</span><br><span class="line">xxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">&#123;% endblockquote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% blockquote @作者 网络地址 %&#125;</span><br><span class="line">xxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>xxxxxxxxxxxxxxxxxxxxxxxxxxxx</p><footer><strong>作者</strong><cite>出处</cite></footer></blockquote><blockquote><p>xxxxxxxxxxxxxxxxxxxxxxxxxx</p><footer><strong>@作者 网络地址</strong></footer></blockquote><h3 id="lable标签"><a href="#lable标签" class="headerlink" title="lable标签"></a>lable标签</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">臣亮言：&#123;% label 先帝 %&#125;創業未半，而&#123;% label 中道崩殂 blue %&#125;。今天下三分，&#123;% label 益州疲敝 pink %&#125;，此誠&#123;% label 危急存亡之秋 red %&#125;也！然侍衞之臣，不懈於內；&#123;% label 忠志之士 purple %&#125;，忘身於外者，蓋追先帝之殊遇，欲報之於陛下也。誠宜開張聖聽，以光先帝遺德，恢弘志士之氣；不宜妄自菲薄，引喻失義，以塞忠諫之路也。</span><br><span class="line">宮中、府中，俱為一體；陟罰臧否，不宜異同。若有&#123;% label 作奸 orange %&#125;、&#123;% label 犯科 green %&#125;，及為忠善者，宜付有司，論其刑賞，以昭陛下平明之治；不宜偏私，使內外異法也。</span><br></pre></td></tr></table></figure><p>臣亮言：<mark class="hl-label default">先帝</mark> 創業未半，而<mark class="hl-label blue">中道崩殂</mark> 。今天下三分，<mark class="hl-label pink">益州疲敝</mark> ，此誠<mark class="hl-label red">危急存亡之秋</mark> 也！然侍衞之臣，不懈於內；<mark class="hl-label purple">忠志之士</mark> ，忘身於外者，蓋追先帝之殊遇，欲報之於陛下也。誠宜開張聖聽，以光先帝遺德，恢弘志士之氣；不宜妄自菲薄，引喻失義，以塞忠諫之路也。<br>宮中、府中，俱為一體；陟罰臧否，不宜異同。若有<mark class="hl-label orange">作奸</mark> 、<mark class="hl-label green">犯科</mark> ，及為忠善者，宜付有司，論其刑賞，以昭陛下平明之治；不宜偏私，使內外異法也。</p><h3 id="双-Tab"><a href="#双-Tab" class="headerlink" title="双 Tab"></a>双 Tab</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">两个 Tab 键</span><br></pre></td></tr></table></figure><pre><code>两个 Tab 键</code></pre><h2 id="解析错误的"><a href="#解析错误的" class="headerlink" title="解析错误的"></a>解析错误的</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> [ ] content </span><br><span class="line"><span class="bullet">-</span> [x] content</span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> content </li><li><input checked="" disabled="" type="checkbox"> content</li></ul><h2 id="未改变的"><a href="#未改变的" class="headerlink" title="未改变的"></a>未改变的</h2><h3 id="内容强调"><a href="#内容强调" class="headerlink" title="内容强调"></a>内容强调</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*这里是斜体*</span></span><br><span class="line"><span class="emphasis">_这里是斜体_</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**这里是加粗**</span></span><br><span class="line"><span class="strong">__这里是加粗__</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**<span class="emphasis">*这里是加粗并斜体<span class="strong">**<span class="emphasis">*</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"><span class="strong">__<span class="emphasis">_这里是加粗并斜体<span class="strong">__<span class="emphasis">_</span></span></span></span></span></span></span></span></span><br></pre></td></tr></table></figure><p><em>这里是斜体</em><br><em>这里是斜体</em></p><p><strong>这里是加粗</strong><br><strong>这里是加粗</strong></p><p><em><strong>这里是加粗并斜体</strong></em><br><em><strong>这里是加粗并斜体</strong></em></p><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>这样来<del>删除一段文本</del></p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐    |  右对齐 | 居中 |</span><br><span class="line">| :-------- | -------:| :--: |</span><br><span class="line">| Computer  | 5000 元 |  1台 |</span><br><span class="line">| Phone     | 1999 元 |  1部 |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中</th></tr></thead><tbody><tr><td align="left">Computer</td><td align="right">5000 元</td><td align="center">1台</td></tr><tr><td align="left">Phone</td><td align="right">1999 元</td><td align="center">1部</td></tr></tbody></table><h3 id="tab-标签"><a href="#tab-标签" class="headerlink" title="tab 标签"></a>tab 标签</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Tab标签列表 %&#125;</span><br><span class="line">  &lt;!-- tab 标签页1 --&gt;</span><br><span class="line"><span class="code">    标签页1文本内容</span></span><br><span class="line"><span class="code">  &lt;!-- endtab --&gt;</span></span><br><span class="line"><span class="code">  &lt;!-- tab 标签页2 --&gt;</span></span><br><span class="line"><span class="code">    标签页2文本内容</span></span><br><span class="line"><span class="code">  &lt;!-- endtab --&gt;</span></span><br><span class="line"><span class="code">  &lt;!-- tab 标签页3 --&gt;</span></span><br><span class="line"><span class="code">    标签页3文本内容</span></span><br><span class="line"><span class="code">  &lt;!-- endtab --&gt;</span></span><br><span class="line"><span class="code">&#123;% endtabs %&#125;</span></span><br></pre></td></tr></table></figure><div class="tabs" id="tab标签列表"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab标签列表-1">标签页1</button></li><li class="tab"><button type="button" data-href="#tab标签列表-2">标签页2</button></li><li class="tab"><button type="button" data-href="#tab标签列表-3">标签页3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab标签列表-1"><p>  标签页1文本内容</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab标签列表-2"><p>  标签页2文本内容</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab标签列表-3"><p>  标签页3文本内容</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p><a href="http://markdown.p2hp.com/extended-syntax/index.html#footnotes">Markdown扩展语法中的脚注</a> 试了，没效果。</p><p>但可以用以下方式：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">内容<span class="xml"><span class="tag">&lt;<span class="name">sup</span>&gt;</span></span>[<span class="string">[1</span>]](#1)<span class="xml"><span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span>[1]<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span> 说明</span><br></pre></td></tr></table></figure><p>内容<sup><a href="#1">[1]</a></sup></p><p><a id="1">[1]</a> 说明</p>]]></content>
    
    
    <summary type="html">Butterfly主题开启頁面美化后的一些效果，以及其他一些 Markdown 语法的汇总。</summary>
    
    
    
    <category term="博客搭建" scheme="https://www.itaru.xyz/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    <category term="butterfly" scheme="https://www.itaru.xyz/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/butterfly/"/>
    
    
    <category term="博客搭建" scheme="https://www.itaru.xyz/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    <category term="butterfly" scheme="https://www.itaru.xyz/tags/butterfly/"/>
    
  </entry>
  
  <entry>
    <title>.NET面试题 - 数据库基础</title>
    <link href="https://www.itaru.xyz/blogs/6a7cd97a.html"/>
    <id>https://www.itaru.xyz/blogs/6a7cd97a.html</id>
    <published>2021-12-17T10:39:51.000Z</published>
    <updated>2022-01-11T14:15:20.650Z</updated>
    
    <content type="html"><![CDATA[<p>.NET面试题中一些数据库的知识，问题来源于网络以及我自己的总结。与其说是面试题，这更像是数据库基础知识的部分汇总。</p><p>本文多数问题基于：<a href="https://zhuanlan.zhihu.com/p/355271573">.NET 面试题 - 数据库基础</a></p><h3 id="数据库（Database）和-数据库管理系统（DBMS）"><a href="#数据库（Database）和-数据库管理系统（DBMS）" class="headerlink" title="数据库（Database）和 数据库管理系统（DBMS）"></a>数据库（Database）和 数据库管理系统（DBMS）</h3><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p>数据库，又称为<code>数据</code>管理系统，简而言之可视为电子化的文件柜——存储电子文件的处所，用户可以对文件中的资料执行新增、截取、更新、删除等操作。</p><p>所谓“数据库”是以一定方式储存在一起、能予多个用户共享、具有尽可能小的冗余度、与应用程序彼此独立的数据集合。一个数据库由多个表空间（Tablespace）构成。</p><h4 id="数据库管理系统"><a href="#数据库管理系统" class="headerlink" title="数据库管理系统"></a>数据库管理系统</h4><p><code>数据库</code>管理系统（Database Management System，DBMS）是为管理数据库而设计的电脑软件系统，一般具有存储、截取、安全保障、备份等基础功能。</p><p>例如：Microsoft SQL Server 软件是数据库管理系统，里面有很多数据库。</p><p>详情：<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93#%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F">数据库 - wiki</a></p><h3 id="什么是-关系数据库？"><a href="#什么是-关系数据库？" class="headerlink" title="什么是 关系数据库？"></a>什么是 关系数据库？</h3><p>关系数据库是创建在关系模型基础上，数据项之间具有预定义关系的数据项的集合。这些项被组织为一组具有列和行的表。表用于保存要在数据库中表示的对象的信息。表中的每列都保存着特定类型的数据，字段存储着属性的实际值。表中的行表示一个对象或实体的相关值的集合。表中的每一行可标有一个称为主键的唯一标识符，并且可使用外键在多个表中的行之间建立关联。可以通过许多不同的方式访问此数据，而无需重新组织数据库表本身。</p><p>大多数主流数据库都属于关系数据库，例如 Oracle、MySQL、SQL Server 以及 PostgreSQL 等。另外，数据库领域还存在一些非关系模型的数据库（NoSQL），例如 Mongodb、Redis、Cassandra 等。</p><p>参考：<a href="https://aws.amazon.com/cn/relational-database/">什么是关系数据库？</a></p><h3 id="什么是-SQL？"><a href="#什么是-SQL？" class="headerlink" title="什么是 SQL？"></a>什么是 SQL？</h3><p>SQL（结构化查询语言）是用于与关系数据库通信的主要接口。SQL 可用于添加、更新或删除数据行，检索事务处理和分析应用程序的数据子集，以及管理数据库的所有方面。</p><p>SQL 包含四个部分：</p><ol><li>资料定义语言（Data Manipulation Language, DML）：SQL语言集中负责数据结构定义与数据库对象定义的语言，由 CREATE、ALTER 和 DROP 组成。</li><li>数据操纵语言（Data Manipulation Language, DML）：用于数据库操作，INSERT、UPDATE、DELETE 加上 SELECT（也有人把它单独归为 数据查询语言 DQL）。称为 CRUD（Create, Retrieve, Update, Delete）。</li><li>数据控制语言（Data Control Language, DCL）：是一种可对资料访问权进行控制的指令，它可以控制特定用户账户对资料表、查看表、存储程序、用户自定义函数等数据库对象的控制权。由 GRANT 和 REVOKE 两个指令组成。</li><li>事务控制语言（Transaction Control Language TCL）：用于编写事务。SET TRANSACTION、COMMIT、ROLLBACK 和 SAVEPOINT。</li></ol><p>参考：<a href="https://zh.wikipedia.org/wiki/SQL">SQL - Wiki</a></p><h3 id="什么是-数据完整性约束？"><a href="#什么是-数据完整性约束？" class="headerlink" title="什么是 数据完整性约束？"></a>什么是 数据完整性约束？</h3><p>关系的完整性约束通常包括<code>域完整性</code>、<code>实体完整性</code>、<code>参照完整性</code>和<code>用户定义完整性</code>。</p><ol><li><p>域完整性：是保证数据库字段取值的合理性，是最简单、最基本的约束。在当今的关系 DBMS 中，一般都有域完整性约束检查功能。</p></li><li><p>实体完整性：作用是在传输、存储信息或数据的过程中，确保信息或数据不被未授权的篡改或在篡改后能够被迅速发现。按实体完整性规则要求，主属性不得取空值，如主关键字是多个属性的组合，则所有这些属性均不得取空值。</p></li><li><p>参照完整性：作用是定义建立关系之间联系的主关键字与外部关键字引用的约束条件。关系数据库中通常都包含多个存在相互联系的关系，关系与关系之间的联系是通过公共属性来实现的。根据实体完整性要求，主关键字不得取空值。</p></li><li><p>用户定义完整性：作用是根据应用环境的要求和实际的需要，对某一具体应用所涉及的数据提出约束性条件。这一约束机制一般不应由应用程序提供，而应由关系模型提供定义并检验，用户定义完整性主要包括字段有效性约束和记录有效性。</p></li></ol><p>参考：<a href="https://zhuanlan.zhihu.com/p/122950702">关系数据库中的完整性约束</a><br><a href="https://en.wikipedia.org/wiki/Data_integrity#Types_of_integrity_constraints">Data integrity - Wiki</a></p><h3 id="SQL-Server-中的六种约束"><a href="#SQL-Server-中的六种约束" class="headerlink" title="SQL Server 中的六种约束"></a>SQL Server 中的六种约束</h3><ol><li>主键约束（PRIMARY KEY）</li><li>外键约束（FOREIGN KEY）</li><li>唯一约束（UNIQUE）</li><li>非空约束（NOT NULL）</li><li>检查约束（CHECK）</li><li>默认值约束（DEFAULT ）</li></ol><p>这些属于 用户定义完整性 约束。</p><p>详情：<a href="https://blog.csdn.net/a_lllll/article/details/87865407">SQL Server中的六种约束：主键约束，外键约束，唯一约束，非空约束，检查约束，默认约束</a></p><h3 id="数据库常见对象有哪些？"><a href="#数据库常见对象有哪些？" class="headerlink" title="数据库常见对象有哪些？"></a>数据库常见对象有哪些？</h3><p>表（Table）、视图（View）、序列（Sequence）、索引（Index）、存储过程（Stored Procedure）、触发器（Trigger）、用户（User）以及同义词（Synonym）等等。其中，表是关系数据库中存储数据的主要形式。</p><h3 id="CHAR-和-VARCHAR-类型的区别？"><a href="#CHAR-和-VARCHAR-类型的区别？" class="headerlink" title="CHAR 和 VARCHAR 类型的区别？"></a>CHAR 和 VARCHAR 类型的区别？</h3><ul><li>CAHR 是固定长度的字符串，如果输入的内容长度不够，则使用空格进行填充，通常用于存储固定长度的编码。</li><li>VARCHAR 是可变长度的字符串，通常用于存储姓名等长度不一致的数据。</li></ul><h3 id="数据库三范式"><a href="#数据库三范式" class="headerlink" title="数据库三范式"></a>数据库三范式</h3><ol><li><p>第一范式（1NF）：原子性</p><p>第一范式是为了要排除 重复组 的出现，要求数据库的每个列的论域都是由不可分割的原子值组成；每个字段的值都只能是单一值。</p></li><li><p>第二范式（2NF）：完全依赖关系</p><p>规则是要求资料表里的所有资料都要和该资料表的键（主键与候选键）有完全依赖关系：每个非键属性必须独立于任意一个候选键的任意一部分属性。如果有哪些资料只和一个键的一部分有关的话，就得把它们独立出来变成另一个资料表。如果一个资料表的键只有单个字段的话，它就一定符合第二范式。</p></li><li><p>第三范式（3NF）：消除传递依赖</p><p>要求所有非主键属性都只和候选键有相关性，也就是说非主键属性之间应该是独立无关的。</p></li></ol><p>其实不止三范式</p><p>参考：<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%84%E8%8C%83%E5%8C%96#:~:text=%E7%AC%AC%E4%B8%80%E8%8C%83%E5%BC%8F%E3%80%81%E7%AC%AC%E4%BA%8C%E8%8C%83%E5%BC%8F%E5%92%8C%E7%AC%AC%E4%B8%89%E8%8C%83%E5%BC%8F">数据库规范化 - Wiki</a></p><h3 id="视图-View"><a href="#视图-View" class="headerlink" title="视图(View)"></a>视图(View)</h3><p>视图是一个虚拟表，其内容由查询定义。同表一样，视图包含一系列带有名称的列和行数据。视图在数据库中并不是以数据值存储集形式存在，除非是索引视图。行和列的数据来自定义视图的查询所引用的表，并且在引用视图时动态生成。</p><p>对其中所引用的基础表来说，视图的作用类似于筛选。定义视图的筛选可以来自当前或其他数据库的一个或多个表，或者其他视图。</p><p>优点：</p><ul><li>替代复杂查询，减少复杂性；</li><li>提供一致性接口，实现业务规则；</li><li>控制对于表的访问，提高安全性。</li></ul><p>视图<code>按它们允许的操作</code>可分为:</p><ul><li>可删除视图</li><li>可更新视图</li><li>可插入视图</li><li>只读视图</li></ul><p>参考：<a href="https://docs.microsoft.com/zh-cn/sql/relational-databases/views/views?view=sql-server-ver15">视图 - Microsoft SQL 文档</a><br><a href="https://www.ibm.com/docs/zh/db2/11.1?topic=views-designing">设计视图</a></p><h3 id="触发器（Trigger）"><a href="#触发器（Trigger）" class="headerlink" title="触发器（Trigger）"></a>触发器（Trigger）</h3><p>触发器（Trigger）是 SQL Server 提供给程序员和数据分析员来保证数据完整性的一种方法，它是与表事件相关的特殊的存储过程，它的执行不是由程序调用，也不是手工启动，而是由事件来触发，当对一个表进行操作（ insert，delete， update）时就会激活它执行。触发器经常用于加强数据的完整性约束和业务规则等。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li>触发器是自动的。当对表中的数据做了修改之后立即被激活。</li><li>触发器可以通过数据库中的相关表进行层叠修改。</li><li>触发器可以强制限制。这些限制比用 CHECK 约束所定义的更复杂。与 CHECK 约束不同的是，触发器可以引用其他表中的列。</li></ol><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>触发器的主要作用就是其能够实现由主键和外键所不能保证的复杂参照完整性和数据的一致性，它能够对数据库中的相关表进行级联修改，提高比 CHECK 约束更复杂的的数据完整性，并自定义错误消息。触发器的主要作用主要有以下接个方面：</p><ol><li>强制数据库间的引用完整性。</li><li>级联修改数据库中所有相关的表，自动触发其它与之相关的操作。</li><li>跟踪变化，撤销或回滚违法操作，防止非法修改数据。</li><li>返回自定义的错误消息。约束无法返回信息，而触发器可以。</li><li>触发器可以调用更多的存储过程。</li></ol><p>详情：<a href="https://www.cnblogs.com/wangprince2017/p/7827091.html">SqlServer基础之(触发器)</a></p><h3 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h3><p>关系数据库所有的关系运算其实是集合与集合的运算，它的输入是集合，输出同样是集合。有时需要对结果集逐行进行处理，这时就需要用到游标。</p><h4 id="游标的使用（五步法）"><a href="#游标的使用（五步法）" class="headerlink" title="游标的使用（五步法）"></a>游标的使用（五步法）</h4><ol><li>声明游标</li><li>打开游标</li><li>读取数据</li><li>关闭游标</li><li>删除游标</li></ol><p>详情：<a href="https://www.cnblogs.com/myboke/p/3738912.html">SQLServer游标详解</a></p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul><li>加快数据的检索速度。（注：不仅是 select。update 和 delete 也会使用索引。）</li><li>通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>需要占用额外的存储空间。</li><li>索引会进行动态维护，这对新增、修改和删除等数据维护的速度有影响。（新增速度会减慢，修改和删除不一定。因为修改和删除包括两步：找数据和改（删）数据。）</li></ul><h4 id="索引按数据结构分类"><a href="#索引按数据结构分类" class="headerlink" title="索引按数据结构分类"></a>索引按数据结构分类</h4><ul><li>B树索引（B-Tree、B+Tree）</li><li>Hash索引</li><li>Full-Text索引</li><li>R-Tree索引</li></ul><h4 id="索引种类"><a href="#索引种类" class="headerlink" title="索引种类"></a>索引种类</h4><ul><li>聚集索引：聚集索引根据聚集索引键对表或视图的数据行进行排序和存储。聚集索引以 B树 索引结构实现。<br>注：<code>没有聚集索引的表，数据以堆的形式存储；有则以 B树 的结构存储。</code>一个表中只能有一个聚集索引。</li><li>非聚集索引：非聚集索引中的每个索引行都包含非聚集键值和行定位符。此定位符指向聚集索引或堆中具有键值的数据行。</li><li>唯一索引：唯一索引确保索引键不包含重复值。</li><li>计算列索引：从一个或多个其他列的值或某些确定性输入派生的列上的索引。</li><li>全文索引：支持全文搜索，它为字符串数据中的复杂单词搜索提供了有效的支持。</li></ul><p>还有其他索引。</p><p>参考：<a href="https://docs.microsoft.com/en-us/sql/relational-databases/indexes/indexes?view=sql-server-ver15">Indexes - Microsoft SQL Docs</a></p><h3 id="事务（Transaction）"><a href="#事务（Transaction）" class="headerlink" title="事务（Transaction）"></a>事务（Transaction）</h3><p>事务是单个工作单元。如果事务成功，则事务期间所做的所有数据修改都将被提交并成为数据库的永久部分。如果事务遇到错误并且必须取消或回滚，则所有数据修改都会被删除。</p><h4 id="事务具有-ACID-特性"><a href="#事务具有-ACID-特性" class="headerlink" title="事务具有 ACID 特性"></a>事务具有 ACID 特性</h4><ol><li>原子性（Atomicity）：原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</li><li>一致性（Consistency）：事务前后数据的完整性必须保持一致。<br>例：在存款取款的例子中，钱是不能凭空产生或销毁的，对于每个（收支）条目必须有一个相应的抵衡条目产生，以保证账户是平的。</li><li>隔离性（Isolation）：多个用户并发访问数据库时，数据库为每一个用户开启的事务，多个并发事务之间要相互隔离，不能被其他事务的操作数据所干扰。<br><code>隔离性一般是通过加锁的机制来实现的。</code></li><li>持续性（Durability）：一个事务一旦被提交，它对数据库中数据的修改就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响。</li></ol><h4 id="T-SQL事务语句"><a href="#T-SQL事务语句" class="headerlink" title="T-SQL事务语句"></a>T-SQL事务语句</h4><ul><li>开始事务：BEGIN TRANSACTION</li><li>提交事务：COMMIT TRANSACTION</li><li>回滚（撤销）事务：ROLLBACK TRANSACTION</li><li>存储点语句：SAVE TRANSACTION</li></ul><h3 id="维护数据库的完整性和一致性，你喜欢用触发器还是自写业务逻辑？为什么？"><a href="#维护数据库的完整性和一致性，你喜欢用触发器还是自写业务逻辑？为什么？" class="headerlink" title="维护数据库的完整性和一致性，你喜欢用触发器还是自写业务逻辑？为什么？"></a>维护数据库的完整性和一致性，你喜欢用触发器还是自写业务逻辑？为什么？</h3><ol><li>尽可能使用约束，如 CHECK、主键、外键、非空字段等来约束，这样做效率最高，也最方便。</li><li>其次是使用触发器，这种方法可以保证，无论什么业务系统访问数据库都可以保持数据的完整性和一致性。</li><li>最后考虑的是自写业务逻辑，但这样做麻烦，编程复杂，效率低下。</li></ol><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><p>SQL注入（SQL injection）是发生于应用程序与数据库层的安全漏洞。简而言之，是在输入的字符串之中注入 SQL 指令，在设计不良的程序当中忽略了字符检查，那么这些注入进去的恶意指令就会被数据库服务器误认为是正常的 SQL 指令而执行，因此遭到破坏或是入侵。</p><h4 id="导致的原因"><a href="#导致的原因" class="headerlink" title="导致的原因"></a>导致的原因</h4><p>在应用程序中若有下列状况，则可能应用程序正暴露在 SQL注入 的高风险情况下：</p><ul><li>在应用程序中使用字符串联结方式或联合查询方式组合 SQL 指令。</li><li>在应用程序链接数据库时使用权限过大的账户（例如很多开发人员都喜欢用最高权限的系统管理员账户（如常见的root，sa等）连接数据库）。</li><li>在数据库中开放了不必要但权力过大的功能（例如在Microsoft SQL Server数据库中的 xp_cmdshell 延伸存储程序或是 OLE Automation 存储程序等）。</li><li>太过于信任用户所输入的资料，未限制输入的特殊字符，以及未对用户输入的资料做潜在指令的检查。</li></ul><h4 id="作用原理"><a href="#作用原理" class="headerlink" title="作用原理"></a>作用原理</h4><ul><li>SQL命令可进行查询、插入、更新、删除等命令的串接。以分号字符为不同命令的区别。（原本的作用是用于 SubQuery 或作为查询、插入、更新、删除……等的条件式。）</li><li>SQL命令对于传入的字符串参数是用单引号字符所包起来的。（但连续2个单引号字符，在SQL数据库中，则视为字符串中的一个单引号字符。）</li><li>SQL命令中，可以注入注释。（连续2个减号字符 – 后的文字为注解，或“/*”与“*/”所包起来的文字为注释。）</li><li>因此，如果在组合SQL的命令字符串时，未针对单引号字符作转义处理的话，将导致该字符变量在填入命令字符串时，原本的SQL语法被恶意窜改。</li></ul><h4 id="避免的方法"><a href="#避免的方法" class="headerlink" title="避免的方法"></a>避免的方法</h4><ol><li>在设计应用程序时，完全使用参数化查询（Parameterized Query）来设计资料访问功能。</li><li>在组合SQL字符串时，先针对所传入的参数加入其他字符（将单引号字符前加上转义字符）。</li><li>使用其他更安全的方式连接SQL数据库。例如已修正过SQL注入问题的数据库连接组件，例如 ASP.NET 的 SqlDataSource 对象或是 LINQ to SQL。</li><li>增强WAF的防御力</li></ol><p>参考：<a href="https://zh.wikipedia.org/wiki/SQL%E6%B3%A8%E5%85%A5">SQL注入 - Wiki</a> （这篇绝对是机翻文，语句太不通顺了，很多句子都不懂他在表达什么。）</p><h3 id="WHERE子句与HAVING子句有何不同"><a href="#WHERE子句与HAVING子句有何不同" class="headerlink" title="WHERE子句与HAVING子句有何不同?"></a>WHERE子句与HAVING子句有何不同?</h3><ul><li>Where 是一个约束声明，是在查询结果集返回之前 约束来自数据库的数据，且 Where 中不能使用聚合函数。</li><li>Having 是一个过滤声明，是在查询结果集返回以后 对查询结果进行的过滤操作，在 Having 中可以使用聚合函数。</li></ul><h3 id="什么是子查询？子查询有哪些类型？"><a href="#什么是子查询？子查询有哪些类型？" class="headerlink" title="什么是子查询？子查询有哪些类型？"></a>什么是子查询？子查询有哪些类型？</h3><p>子查询（subquery）是将一个查询语句嵌套在另一个查询语句中。</p><p>在特定情况下，一个查询语句的条件需要另一个查询语句来获取，内层查询（inner query）语句的查询结果，可以为外层查询（outer query）语句提供查询条件。</p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul><li>标量子查询(scalar subquery)：返回 1 行 1 列一个值。</li><li>行子查询(row subquery)：返回的结果集是 1 行 N 列。</li><li>列子查询(column subquery)：返回的结果集是 N 行 1 列。</li><li>表子查询(table subquery)：返回的结果集是 N 行 N 列。</li></ul><p>基于子查询和外部查询的关系，也可以分为关联子查询（correlated subqueries）和非关联子查询（non-correlated subqueries）。关联子查询会引用外部查询中的列，因而与外部查询产生关联；非关联子查询与外部查询没有关联。</p><p>详情：<a href="https://www.cnblogs.com/geaozhang/p/6756825.html">SELECT中常用的子查询操作</a></p><h3 id="使用-EXISTS-关键字引入的子查询与使用-IN-关键字引入的子查询在语法上有哪些不同？"><a href="#使用-EXISTS-关键字引入的子查询与使用-IN-关键字引入的子查询在语法上有哪些不同？" class="headerlink" title="使用 EXISTS 关键字引入的子查询与使用 IN 关键字引入的子查询在语法上有哪些不同？"></a>使用 EXISTS 关键字引入的子查询与使用 IN 关键字引入的子查询在语法上有哪些不同？</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> A <span class="keyword">WHERE</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> B <span class="keyword">WHERE</span> B.Name<span class="operator">=</span>A.Name);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> A <span class="keyword">WHERE</span> Name <span class="keyword">IN</span> (<span class="keyword">SELECT</span> Name <span class="keyword">FROM</span> B);</span><br></pre></td></tr></table></figure><p>对语句字面上的理解是：</p><ul><li>EXISTS 语句：外部表的每一行套入子查询语句中，若有与子查询匹配的行（找到一行即可），则返回True。</li><li>IN 语句：先求出子查询的结果，对外部查询进行过滤。</li></ul><div class="note warning simple"><p>只是对语句字面上的解释不同，但这两个语句在逻辑上是等价的（至少上面的例子是），那么查询优化器可能会产生相同的执行计划。Sql 是声明性语言，即你只是描述你需要什么，至于怎么获取，查询优化器会自己决定。查询优化器挺聪明的，它会在多种解决方案中择优（大多数情况是这样的，但有时也会显得很蠢）。<br>如果换成 NOT EXISTS 和 NOT IN 两个查询就不等价了，因为这两者对 NULL 的处理逻辑不同。</p></div>]]></content>
    
    
    <summary type="html">.NET面试题中一些数据库的知识，问题来源于网络以及我自己的总结。与其说是面试题，这更像是数据库基础知识的部分汇总。</summary>
    
    
    
    <category term="sql" scheme="https://www.itaru.xyz/categories/sql/"/>
    
    <category term="面试题" scheme="https://www.itaru.xyz/categories/sql/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="sql" scheme="https://www.itaru.xyz/tags/sql/"/>
    
    <category term=".NET面试题" scheme="https://www.itaru.xyz/tags/NET%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>.NET面试题 - 编程基础知识</title>
    <link href="https://www.itaru.xyz/blogs/a2a26768.html"/>
    <id>https://www.itaru.xyz/blogs/a2a26768.html</id>
    <published>2021-12-17T00:41:27.000Z</published>
    <updated>2022-01-06T13:06:23.568Z</updated>
    
    <content type="html"><![CDATA[<p>.NET面试题中一些关于编程的基础知识，问题来源于网络以及我自己的总结。与其说是面试题，这更像是编程基础知识的部分汇总。本文知识不仅仅适用于 C# 程序员。</p><h3 id="面向过程、面向对象和面向切面"><a href="#面向过程、面向对象和面向切面" class="headerlink" title="面向过程、面向对象和面向切面"></a>面向过程、面向对象和面向切面</h3><ul><li>面向过程（PO）：一种源自结构编程，并基于调用过程的概念的编程方式。它遵循循序渐进的方式，通过一系列指令将任务分解为一组变量和例程。</li><li>面向对象（OO）：围绕<code>数据或对象</code>而不是<code>功能和逻辑</code>来进行软件设计的计算机编程设计理念或方法。</li><li>面向切面（AO）：在运行时，动态地将代码切入到类的指定方法、指定位置上的编程思想。</li></ul><p>参考：<a href="https://www.javatpoint.com/procedural-programming-vs-object-oriented-programming">Difference between procedural programming and object-oriented programming</a><br><a href="https://www.zhihu.com/question/24863332/answer/48376158">什么是面向切面编程AOP</a></p><h3 id="面向对象三大基本特性"><a href="#面向对象三大基本特性" class="headerlink" title="面向对象三大基本特性"></a>面向对象三大基本特性</h3><ol><li>封装：就是将客观事物抽象为逻辑实体，实体的属性和功能相结合，形成一个有机的整体。并对实体的属性和功能实现进行访问控制，向信任的实体开放，对不信任的实体隐藏。通过开放的外部接口即可访问，无需知道功能如何实现。</li><li>继承：在继承机制下形成有层级的类，使得低层级的类可以延用高层级类的特征和方法。继承的实现方式有两种：实现继承、接口继承。</li><li>多态：同一操作作用于不同的对象，可以有不同的解释，产生不同的执行结果，这就是多态性。简单的说:就是用基类的引用指向子类的对象。</li></ol><p>详情：<a href="https://segmentfault.com/a/1190000021898422">面向对象的三大基本特征和五大基本原则</a><br><a href="https://www.cnblogs.com/baichunyu/p/11006229.html">面试小问题——什么是多态？</a></p><h3 id="面向对象五大基本原则"><a href="#面向对象五大基本原则" class="headerlink" title="面向对象五大基本原则"></a>面向对象五大基本原则</h3><ol><li>单一职责原则 SRP(Single Responsibility Principle)：一个类应该有且只有一个去改变它的理由，这意味着一个类应该只有一项工作。</li><li>开放封闭原则 OCP(Open－Close Principle)：对象或实体应该对扩展开放，对修改封闭。</li><li>里式替换原则 LSP(the Liskov Substitution Principle LSP)：在对象 x 为类型 T 时 q(x) 成立，那么当 S 是 T 的子类时，对象 y 为类型 S 时 q(y) 也应成立。（即对父类的调用同样适用于子类）</li><li>接口分离原则 ISP(the Interface Segregation Principle ISP)：不应强迫客户端实现一个它用不上的接口，或是说客户端不应该被迫依赖它们不使用的方法。</li><li>依赖倒置原则 DIP(the Dependency Inversion Principle DIP)：实体必须依靠抽象而不是具体实现。它表示高层次的模块不应该依赖于低层次的模块，它们都应该依赖于抽象。</li></ol><p>详情：<a href="https://www.jianshu.com/p/b56e098575db">S.O.L.I.D：面向对象设计的头 5 大原则</a></p><h3 id="高内聚-低耦合"><a href="#高内聚-低耦合" class="headerlink" title="高内聚 低耦合"></a>高内聚 低耦合</h3><ul><li><p>高内聚：内聚度是指<code>一个模块/类</code>的元素之间的归属程度，建议相关联的代码应该彼此靠近，所以我们应该争取高内聚度，尽可能地将所有相关联的代码绑定在一起。它与模块/类中的元素有关。 </p></li><li><p>低耦合：耦合度是指<code>不同模块/类</code>相互依赖的程度，建议所有模块尽可能独立，这就是争取低耦合的原因。它与不同模块/类之间的元素有关。</p></li></ul><p>参考：<a href="https://stackoverflow.com/a/14000957/8910566">What does ‘low in coupling and high in cohesion’ mean</a></p><h3 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h3><p>序列化：序列化是将对象转化为可以写入流的形式的过程。它是将对象转换为一种形式以便将其存储在文件、数据库或内存中的过程，并且它可以通过网络传输。它的主要目的是保存对象的状态，以便在需要时可以重新创建。</p><p>反序列化：反序列化是序列化的逆过程。它是取回序列化对象以便将其加载到内存中的过程。它通过设置属性、字段等来恢复对象的状态。</p><p>参考：<a href="https://www.c-sharpcorner.com/article/serialization-and-deserialization-in-c-sharp/">Serialization and Deserialization in C#</a></p><h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><p>线程同步是一种机制，可确保两个或多个并发进程或线程不同时执行程序的某些特定部分，尤其是临界区。在这种技术中，一个线程执行程序的临界区，另一个线程等待第一个线程完成执行。如果不应用适当的同步机制，则会发生竞态条件。</p><p>实现方式：</p><ul><li>阻塞</li><li>加互斥锁</li><li>信号和句柄</li><li>非阻塞同步</li></ul><p>详情：<a href="https://www.c-sharpcorner.com/UploadFile/1c8574/thread-synchronization/">Thread Synchronization - C#Corner</a></p><h3 id="内存溢出-和-内存泄露"><a href="#内存溢出-和-内存泄露" class="headerlink" title="内存溢出 和 内存泄露"></a>内存溢出 和 内存泄露</h3><h4 id="内存溢出"><a href="#内存溢出" class="headerlink" title="内存溢出"></a>内存溢出</h4><p>指程序在运行的过程中，程序对内存的需求超过了计算机分配给程序的内存，从而造成“Out of memory”之类的错误，使程序不能正常运行。</p><p>造成内存溢出有几种情况： </p><ol><li>计算机本身的内存小。当同时运行多个软件时，计算机的内存不够用从而造成内存溢出。对于这种情况，只能增加计算机内存来解决。 </li><li>软件程序的问题。程序在运行时没能及时释放不用的内存，造成使用的内存越来越大从而造成内存溢出。对于这种情况，可以修改程序的代码来解决。</li></ol><h4 id="内存泄露"><a href="#内存泄露" class="headerlink" title="内存泄露"></a>内存泄露</h4><p>内存泄漏指由于疏忽或错误造成程序不能释放或不能及时释放已经不再使用的内存的情况，是应用程序分配某段内存后，由于设计错误，失去了对该段内存的控制，因而造成了内存不能回收或不能及时回收。当程序不能释放的内存越来越多时就会造成程序的性能下降或出现内存溢出的错误。</p><p>参考：<a href="https://www.cnblogs.com/bile/p/4966796.html">浅析c#内存泄漏</a></p>]]></content>
    
    
    <summary type="html">.NET面试题中一些关于编程的基础知识，问题来源于网络以及我自己的总结。与其说是面试题，这更像是编程基础知识的部分汇总。本文知识不仅仅适用于 C# 程序员。</summary>
    
    
    
    <category term="C#" scheme="https://www.itaru.xyz/categories/C/"/>
    
    <category term="面试题" scheme="https://www.itaru.xyz/categories/C/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="C#" scheme="https://www.itaru.xyz/tags/C/"/>
    
    <category term=".NET面试题" scheme="https://www.itaru.xyz/tags/NET%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>.NET面试题 - C#与网站</title>
    <link href="https://www.itaru.xyz/blogs/eb0f2435.html"/>
    <id>https://www.itaru.xyz/blogs/eb0f2435.html</id>
    <published>2021-12-16T14:01:35.000Z</published>
    <updated>2022-01-06T13:00:52.588Z</updated>
    
    <content type="html"><![CDATA[<p>.NET面试题中一些关于网站的知识，问题来源于网络以及我自己的总结。与其说是面试题，这更像是 C# 与网站相关知识的部分汇总。</p><h3 id="NET、ASP-NET、ASP-NET-MVC-和-C"><a href="#NET、ASP-NET、ASP-NET-MVC-和-C" class="headerlink" title=".NET、ASP.NET、ASP.NET MVC 和 C#"></a>.NET、ASP.NET、ASP.NET MVC 和 C#</h3><h4 id="NET"><a href="#NET" class="headerlink" title=".NET"></a>.NET</h4><p>.NET 是一个开发人员平台，由工具、编程语言、库组成，用于构建许多不同类型的应用程序。</p><p>基础平台提供适用于所有不同类型的应用的组件。附件框架（如 ASP.NET）通过 用于构建特定类型应用的组件 来扩展 .NET。</p><h4 id="ASP-NET"><a href="#ASP-NET" class="headerlink" title="ASP.NET"></a>ASP.NET</h4><p>ASP.NET 是 .NET 的扩展平台，拥有专门用于构建 Web 应用程序的工具和库。</p><h4 id="ASP-NET-MVC"><a href="#ASP-NET-MVC" class="headerlink" title="ASP.NET MVC"></a>ASP.NET MVC</h4><p>ASP.NET MVC 是用于清晰实现<code>关注点分离</code>的设计模式。</p><p>MVC 是一种设计模式，用于解耦用户界面（view 视图）、数据（model 模型）和应用程序逻辑（controller 控制器）。此模式有助于实现关注点分离。</p><h4 id="C"><a href="#C" class="headerlink" title="C#"></a>C#</h4><p>C# 是一种编程语言，而 .NET 是构建该语言的框架。</p><p>事实上，.NET 支持许多编程语言，并定义了这些语言使用的规则和相关库。它还为应用程序提供了一个运行时环境，公共语言运行时 (CLR)。C# 编写的应用程序可以在任何支持 .NET 的平台上运行。</p><p>参考：<a href="https://dotnet.microsoft.com/en-us/learn/aspnet/what-is-aspnet">What is ASP.NET?</a><br><a href="https://dotnet.microsoft.com/en-us/apps/aspnet/mvc">ASP.NET MVC Pattern</a><br><a href="https://www.capitaitresourcing.co.uk/blogs/whats-the-difference-between-c-and-net-81122210121">What’s the difference between C# and .NET?</a></p><h3 id="NET-Framework、-NET-Core-和-Xamarin"><a href="#NET-Framework、-NET-Core-和-Xamarin" class="headerlink" title=".NET Framework、.NET Core 和 Xamarin"></a>.NET Framework、.NET Core 和 Xamarin</h3><ul><li>.NET Standard 是 .NET 生态系统的标准（换言之，规范）。</li><li>.NET Framework 是一个基于 .NET 的框架，它支持 Windows 和 Web 应用程序。</li><li>.NET Core 也是一个基于 .NET 的框架。.NET Core 是新的开源和跨平台框​​架，用于为所有操作系统（包括 Windows、Mac 和 Linux）构建应用程序（网站属于 Web 应用程序）。</li><li>Xamarin 是一个使用 C# 开发跨平台移动应用程序（iOS、Android 和 Windows Mobile）的框架。</li></ul><p>参考：<a href="https://stackoverflow.com/a/54943555/8910566">What’s the difference between .NET Core, .NET Framework, and Xamarin?</a></p><h3 id="MVC-和-三层框架-的区别"><a href="#MVC-和-三层框架-的区别" class="headerlink" title="MVC 和 三层框架 的区别"></a>MVC 和 三层框架 的区别</h3><ul><li>三层架构：表现层（UI）、业务逻辑层（BLL）、数据访问层（DAL）。</li><li>MVC 设计模式：Model（模型），View（视图），Controller（控制器）。</li></ul><p>乍一看，三层似乎类似于 MVC，然而，在拓扑上它们是不同的。三层架构中的一个基本规则是客户端层从不直接与数据层通信，在三层模型中，所有通信都必须通过中间层。从概念上讲，三层架构是<code>线性</code>的。然而，MVC 是<code>三角形</code>的：视图向控制器发送更新，控制器更新模型，视图直接从模型更新。</p><p>参考；<a href="https://stackoverflow.com/a/10740045/8910566">what is the difference between 3 tier architecture and a mvc?</a></p><h3 id="Web-Service、WCF、WCF-Rest-和-Web-API-的区别"><a href="#Web-Service、WCF、WCF-Rest-和-Web-API-的区别" class="headerlink" title="Web Service、WCF、WCF Rest 和 Web API 的区别"></a>Web Service、WCF、WCF Rest 和 Web API 的区别</h3><h4 id="Web-Service"><a href="#Web-Service" class="headerlink" title="Web Service"></a>Web Service</h4><ul><li>它基于 SOAP 并以 XML 形式返回数据。</li><li>它仅支持 HTTP 协议。</li><li>它不是开源的，但可以被任何理解 xml 的客户端使用。</li><li>它只能托管在 IIS 上。</li></ul><h4 id="WCF"><a href="#WCF" class="headerlink" title="WCF"></a>WCF</h4><ul><li>它也是基于 SOAP 并以 XML 形式返回数据。</li><li>它是 Web 服务 (ASMX) 的演变，支持各种协议，如 TCP、HTTP、HTTPS、命名管道、MSMQ。</li><li>WCF 的主要问题是其繁琐而广泛的配置。</li><li>它不是开源的，但可以被任何理解 XML 的客户端使用。</li><li>它可以托管在应用程序中或在 IIS 上或使用窗口服务。</li></ul><h4 id="WCF-Rest"><a href="#WCF-Rest" class="headerlink" title="WCF Rest"></a>WCF Rest</h4><ul><li>要将 WCF 用作 WCF Rest 服务，您必须启用 webHttpBindings。</li><li>它分别通过 [WebGet] 和 [WebInvoke] 属性支持 HTTP GET 和 POST verbs。</li><li>要启用其他 HTTP verbs（应该指的是 <a href="#HTTP-%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95">HTTP 请求方法</a>），您必须在 IIS 中进行一些配置以接受该特定 verbs 对 .svc 文件的请求。</li><li>使用 WebGet 通过参数传递数据需要配置，必须指定 UriTemplate。</li><li>它支持 XML、JSON 和 ATOM 数据格式。</li></ul><h4 id="Web-API"><a href="#Web-API" class="headerlink" title="Web API"></a>Web API</h4><ul><li>这是一种以简单的方式构建 HTTP 服务的框架。</li><li>Web API 是开源的，是在 .NET Framework 上构建 REST-ful 服务的理想平台。</li><li>与 WCF Rest 服务不同，它使用 HTTP 的全部特性（如 URI、请求/响应标头、缓存、版本控制、各种内容格式）。</li><li>它还支持 MVC 特性，例如路由、控制器、行为（Action）、过滤器、模型绑定器、IOC 容器或依赖注入、单元测试，使其更加简单和健壮。</li><li>它可以托管在应用程序中或 IIS 上。</li><li>它是轻量级架构，适用于智能手机等带宽有限的设备。</li><li>响应由 Web API 的 MediaTypeFormatter 格式化为 JSON、XML 或任何您想要添加为 MediaTypeFormatter 的格式。</li></ul><h4 id="WCF-或-WEB-API-如何选择"><a href="#WCF-或-WEB-API-如何选择" class="headerlink" title="WCF 或 WEB API 如何选择"></a>WCF 或 WEB API 如何选择</h4><ul><li>如果要创建应支持特殊场景（例如单向消息传递、消息队列、双工通信等）的服务，请选择 WCF。 </li><li>当你想创建一个服务，可以用更快速的传输通道时，像TCP、NamedPipes或者甚至是UDP（在WCF4.5中）。在其他传输通道不可用的时候也可以支持HTTP。</li><li>当你想创建一个基于HTTP的面向资源的服务并且可以使用HTTP的全部特征时（比如URIs、request/response头，缓存，版本控制，多种内容格式），你应该选择WebAPI</li><li>当您希望将您的服务公开给各种客户端（包括浏览器、手机、iPhone 和平板电脑）时，请选择 Web API。</li></ul><p>参考：<a href="https://www.dotnettricks.com/learn/webapi/difference-between-wcf-and-web-api-and-wcf-rest-and-web-service">Difference between WCF and Web API and WCF REST and Web Service</a></p><h3 id="ASP-NET-MVC-和-ASP-NET-Web-API-的区别"><a href="#ASP-NET-MVC-和-ASP-NET-Web-API-的区别" class="headerlink" title="ASP.NET MVC 和 ASP.NET Web API 的区别"></a>ASP.NET MVC 和 ASP.NET Web API 的区别</h3><ul><li>Asp.Net MVC 用于创建同时返回视图和数据的 Web 应用程序。Asp.Net Web API 用 只返回数据，不返回视图 的简易的方式创建完整的 HTTP 服务。</li><li>Web API 有助于在 .NET Framework 上构建 REST-ful 服务，它还支持内容协商（确定客户端可接受的最佳响应格式化数据，可以是 JSON、XML、ATOM 或其他格式化数据）。</li><li>Web API 还负责根据请求中的 Accept 标头以特定格式（如 JSON、XML 或任何其他格式）返回数据。MVC 仅使用 JsonResult 以 JSON 格式返回数据。</li><li>在 Web API 中，请求被映射到基于 HTTP verbs（<a href="#HTTP-%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95">HTTP 请求方法</a>） 的动作，但在 MVC 中它被映射到行为（Action）名称。</li><li>Web API 中的模型绑定、过滤器、路由和其他 MVC 拥有的功能，存在于新的程序集 System.Web.Http 中。而在 MVC 中，这些特性存在于 System.Web.Mvc 中。因此 Web API 也可以与 Asp.Net 一起使用并作为独立的服务层。</li><li>您可以在单个项目中混合使用 Web API 和 MVC 控制器来处理高级 AJAX 请求，这些请求可能以 JSON、XML 或任何其他格式返回数据并构建完整的 HTTP 服务。通常，这将称为 Web API 自托管。</li><li>当您混合使用 MVC 和 Web API 控制器并且想要实现授权时，您必须创建两个过滤器，一个用于 MVC，另一个用于 Web API，因为两者是不同的。</li><li>此外，Web API 是轻量级架构，除了 Web 应用程序外，它还可以与智能手机应用程序一起使用。</li></ul><p>参考：<a href="https://www.dotnettricks.com/learn/webapi/difference-between-aspnet-mvc-and-aspnet-web-api">Difference between ASP.NET MVC and ASP.NET Web API</a></p><h3 id="SOAP、REST-和-RESTful-Webservice"><a href="#SOAP、REST-和-RESTful-Webservice" class="headerlink" title="SOAP、REST 和 RESTful Webservice"></a>SOAP、REST 和 RESTful Webservice</h3><ul><li>SOAP（Simple Object Access Protocol 简单对象访问协议）是一种基于 XML 的协议，与 REST 不同，它严格定义了请求和响应的结构。</li><li>REST（REpresentational State Transfer 表述性状态传递）摆脱了请求和响应的僵化结构。它不仅限于 XML 格式，消息可以以多种格式发送，例如 JSON 或 CSV 等。</li><li>RESTful Webservice  实现了 REST 架构风格的 Web 服务。</li></ul><p>参考：<a href="https://wkrzywiec.medium.com/rest-restful-web-service-api-soap-whats-the-difference-4f101953d0bd">REST, RESTful web service, API, SOAP…what’s the difference?</a></p><h3 id="ASP-NET页面之间传值方式？"><a href="#ASP-NET页面之间传值方式？" class="headerlink" title="ASP.NET页面之间传值方式？"></a>ASP.NET页面之间传值方式？</h3><ol><li>Request.QueryString</li><li>Request.Form</li><li>Session</li><li>Cookie</li><li>HttpContext.Items</li><li>Application</li><li>Cache</li><li>ViewState</li><li>config文件</li><li>static（静态全局变量）</li></ol><p>详情：<a href="https://www.cnblogs.com/wangjiming/p/6275854.html">浅谈ASP.NET 页面之间传值的几种方式</a></p><h3 id="什么是ABP框架？"><a href="#什么是ABP框架？" class="headerlink" title="什么是ABP框架？"></a>什么是ABP框架？</h3><p>ABP 是 ASP.NET Boilerplate（ASP.NET样板项目）的简称，ABP 是一个开源且文档友好的应用程序框架。ABP 不仅仅是一个框架，它还提供了一个最徍实践的基于领域驱动设计（DDD）的体系结构模型。</p><p>ABP 诞生的主要目的就是为了让 .NET 程序员“秒变”架构师，将 .NET 企业级项目的主流开发技术、最先进的架构整合起来，让 .NET 工程师能够更快的开发出更好的项目。</p><p>详情：<a href="https://www.cnblogs.com/wuhuacong/p/10919020.html">ABP开发框架前后端开发系列—（1）框架的总体介绍</a></p><h3 id="HTTP-请求方法"><a href="#HTTP-请求方法" class="headerlink" title="HTTP 请求方法"></a>HTTP 请求方法</h3><ol><li>GET</li><li>HEAD</li><li>POST</li><li>PUT</li><li>DELETE</li><li>CONNECT</li><li>OPTIONS</li><li>TRACE</li><li>PATCH</li></ol><p>参考: <a href="https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Methods">HTTP 請求方法 - MDN</a></p><h3 id="POST-和-GET"><a href="#POST-和-GET" class="headerlink" title="POST 和 GET"></a>POST 和 GET</h3><table><thead><tr><th></th><th>GET</th><th>POST</th></tr></thead><tbody><tr><td>后退按钮/刷新</td><td>无害</td><td>数据会被重新提交（浏览器应该告知用户数据会被重新提交）。</td></tr><tr><td>书签</td><td>可收藏为书签</td><td>不可收藏为书签</td></tr><tr><td>缓存</td><td>能被缓存</td><td>不能缓存</td></tr><tr><td>编码类型</td><td>application/x-www-form-urlencoded</td><td>application/x-www-form-urlencoded 或 multipart/form-data。为二进制数据使用多重编码。</td></tr><tr><td>历史</td><td>参数保留在浏览器历史中。</td><td>参数不会保存在浏览器历史中。</td></tr><tr><td>对数据长度的限制</td><td>是的。当发送数据时，GET 方法向 URL 添加数据；URL 的长度是受限制的（URL 的最大长度是 2048 个字符）。</td><td>无限制。(注：网站可能会限制)</td></tr><tr><td>对数据类型的限制</td><td>只允许 ASCII 字符。</td><td>没有限制。也允许二进制数据。</td></tr><tr><td>安全性</td><td>与 POST 相比，GET 的安全性较差，因为所发送的数据是 URL 的一部分。<br><br>在发送密码或其他敏感信息时绝不要使用 GET ！</td><td>POST 比 GET 更安全，因为参数不会被保存在浏览器历史或 web 服务器日志中。</td></tr><tr><td>可见性</td><td>数据在 URL 中对所有人都是可见的。</td><td>数据不会显示在 URL 中。</td></tr></tbody></table><p><a href="https://www.w3school.com.cn/tags/html_ref_httpmethods.asp">HTML 请求方法 - w3school</a></p><h3 id="跨域-和-同源策略（Same-origin-policy）"><a href="#跨域-和-同源策略（Same-origin-policy）" class="headerlink" title="跨域 和 同源策略（Same-origin policy）"></a>跨域 和 同源策略（Same-origin policy）</h3><h4 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h4><p>同源策略是一种关键的安全机制，它限制一个源加载的文档或脚本如何与来自另一个源的资源交互。如果两个 URL 的协议、端口（如果指定）和主机相同，则两个 URL 同源。</p><p>参考：<a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy">Same-origin policy</a></p><h4 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h4><ul><li>document.domain</li><li>跨文档通信 API：window.postMessage()</li><li>JSONP</li><li>CORS</li><li>webpack本地代理</li><li>websocket</li><li>Nginx反向代理</li></ul><p>详情：<a href="https://blog.csdn.net/qq_38128179/article/details/84956552">什么是跨域？跨域解决方法</a></p><h3 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h3><p>前后端分离是 Web 应用的一种架构模式。在开发阶段，前后端工程师约定好数据交互接口，实现并行开发和测试；在运行阶段前后端分离模式需要对 Web 应用进行分离部署，前后端之间使用 HTTP 或者其他协议进行交互请求。</p><p>参考：<a href="https://cloud.tencent.com/developer/article/1162258">大家都在说的前后端分离到底是什么？</a></p><h3 id="什么是自托管？"><a href="#什么是自托管？" class="headerlink" title="什么是自托管？"></a>什么是自托管？</h3><p>有两种解释：</p><ol><li>Web 应用程序不需要托管在网站管理服务程序中。例如：WebApi 不在 IIS 中托管运行，而是寄宿在 .NET控制台、WinForms 等程序中。</li><li>使用私有网络服务器运行和维护网站，而不是使用外部托管的网站。例如：本站就托管在 GitHub 中，不属于自托管。</li></ol>]]></content>
    
    
    <summary type="html">.NET面试题中一些关于网站的知识，问题来源于网络以及我自己的总结。与其说是面试题，这更像是 C# 与网站相关知识的部分汇总。</summary>
    
    
    
    <category term="C#" scheme="https://www.itaru.xyz/categories/C/"/>
    
    <category term="面试题" scheme="https://www.itaru.xyz/categories/C/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="C#" scheme="https://www.itaru.xyz/tags/C/"/>
    
    <category term=".NET面试题" scheme="https://www.itaru.xyz/tags/NET%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>.NET面试题 - C#与数据库</title>
    <link href="https://www.itaru.xyz/blogs/d8b002a3.html"/>
    <id>https://www.itaru.xyz/blogs/d8b002a3.html</id>
    <published>2021-12-15T00:49:22.000Z</published>
    <updated>2022-01-06T13:01:45.007Z</updated>
    
    <content type="html"><![CDATA[<p>.NET面试题中一些关于C#与数据库交互的知识，问题来源于网络以及我自己的总结。与其说是面试题，这更像是 C# 与数据库相关知识的部分汇总。</p><h3 id="数据库操作的相关类"><a href="#数据库操作的相关类" class="headerlink" title="数据库操作的相关类"></a>数据库操作的相关类</h3><ul><li><p>特定类：Connection，Command，CommandBuilder，DataAdapter，DataReader，Parameter，Transaction 等</p></li><li><p>共享类：DataSet，DataTable，DataRow，DataColumn，DataRealtion，Constraint，DataColumnMapping，DataTableMapping 等</p></li></ul><p>参考：<a href="https://www.cnblogs.com/AlinaL/p/12852153.html">C#学习笔记之——数据库操作的相关类</a><br><a href="https://www.c-sharpcorner.com/UploadFile/puranindia/ado-net-objects-part-i/">ADO.NET Objects: Part I - C#Corner</a></p><h3 id="ADO-NET-五大对象"><a href="#ADO-NET-五大对象" class="headerlink" title="ADO.NET 五大对象"></a>ADO.NET 五大对象</h3><ul><li><p>Connection(连接对象)：与数据源建立连接。Close以后还可以Open，Dispose以后则不能再用。</p></li><li><p>DataAdapter(适配器对象)：对数据源执行操作并返回结果，在DataSet与数据源之间建立通信，将数据源中的数据写入DataSet中，或根据DataSet中的数据绑定数据源。</p></li><li><p>DataSet(数据集对象)：内存中的数据库，是数据表的集合，它可以包含任意多个数据表。</p></li><li><p>Command(命令对象)：对数据源执行SQL命令并返回结果。</p></li><li><p>DataReader(数据流对象)：取数据源的数据，只允许对将数据源以只读、顺向的方式查看其中所存储的数据。其常用于检索大量数据，DataReader对象还是一种非常节省资源的数据对象。</p></li></ul><p>DataReader时刻与远程数据库服务器保持连接，将远程的数据通过“流”的形式单向传输给客户端，它是“只读”的。由于是直接访问数据库，所以效率较高，但使用起来不方便。</p><p>DataSet一次性从数据源获取数据到本地，并在本地建立一个微型数据库（包含表、行、列、规则、表之间的关系等），期间可以断开与服务器的连接，使用DataAdapter对象操作“本地微型数据库”，结束后通过DataAdapter一次性更新到远程数据库服务器。这种方式使用起来更方便，便简单。但性能较第一种稍微差一点。（在一般的情况下两者的性能差异可以忽略不计。）</p><p>参考：<a href="https://www.cnblogs.com/igqx/archive/2020/06/22/13175824.html">C# 连接SQL数据库以及操作数据库</a><br><a href="https://www.cnblogs.com/qi123/p/9217010.html">C# 连接SQL数据库以及操作数据库</a><br><a href="https://stackoverflow.com/a/17553377/8910566">C# Data Connections Best Practice? - D Stanley</a></p><h3 id="DataTable和DataSet"><a href="#DataTable和DataSet" class="headerlink" title="DataTable和DataSet"></a>DataTable和DataSet</h3><p>DataSet是数据集（可以比作一个内存中的数据库），DataTable是数据表，DataSet中存储多个DataTable。DataSet和DataTable像是专门存储数据的一个容器，你查询数据库得到的一些结果可以存在里面。</p><p>DataSet功能强大有浏览、排序、搜索、过滤、处理分级数据、缓存更改等功能，还可以与XML数据互换。</p><p>参考：<a href="https://www.cnblogs.com/vaevvaev/p/6815384.html">C# DataSet与DataTable的区别和用法</a></p><h3 id="什么是-ORM"><a href="#什么是-ORM" class="headerlink" title="什么是 ORM"></a>什么是 ORM</h3><p>ORM（对象关系映射 Object–relational mapping）是一种使用面向对象的编程语言在不兼容的类型系统之间转换数据的编程技术。它可以说是创建了一个可以在编程语言中使用的“虚拟对象数据库”。</p><p>说白了就是表映射成类，外键映射成指向另一个类的属性，索引、字段长度约束等等都可以映射。</p><p>参考：<a href="https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping">Object–relational mapping</a></p><h3 id="EF-Entity-Framework-与-ADO-Net"><a href="#EF-Entity-Framework-与-ADO-Net" class="headerlink" title="EF(Entity Framework) 与 ADO.Net"></a>EF(Entity Framework) 与 ADO.Net</h3><p><a href="https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/#:~:text=ADO.NET%20is%20a%20set%20of%20classes%20that%20expose%20data%20access%20services%20for%20.NET%20Framework%20programmers.">ADO.NET</a> 是为 .NET Framework 程序员提供的一组用于公开数据访问服务的类。</p><p><a href="https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/ef/overview#:~:text=The%20Entity%20Framework%20is%20a%20set%20of%20technologies%20in%20ADO.NET%20that%20support%20the%20development%20of%20data-oriented%20software%20applications.">实体框架（Entity Framework）</a>是 ADO.NET 中的一组技术，用于支持面向数据的软件应用程序的开发。</p><p><a href="https://en.wikipedia.org/wiki/Entity_Framework#:~:text=Entity%20Framework%20(EF)%20is%20an%20open%20source[3]%20object%E2%80%93relational%20mapping%20(ORM)%20framework%20for%20ADO.NET.">Wiki</a> 上也说：Entity Framework 是 ADO.NET 的开源对象关系映射 (ORM) 框架。</p><p>所以说 Entity Framework 其实是包括在 ADO.Net 里的，是个 ORM 模型。但其实 ADO.Net 不止与数据库对接，还包括许多其他和数据访问相关的组件。但业界普遍喜欢将（SQLCommand, SQLDataReader, SQLConnection 和 SQLDataAdapter）的一套组件 代指 ADO.NET 。如果是以这种区分方式，EF 就是基于 ADO.Net 的。</p><p>封装的组件往往更易用，但性能<code>可能</code>稍有不如底层组件。</p><h3 id="EF-的三种编程方式"><a href="#EF-的三种编程方式" class="headerlink" title="EF 的三种编程方式"></a>EF 的三种编程方式</h3><ul><li>Model First （ADO.NET Entity Data Model）</li><li>Database First</li><li>Code First</li></ul><h3 id="Entity-Framework（或者ORM）中的-延迟加载（Lazy-Loading）、直接加载（Eager-Loading）、显式加载（Explicit-Loading）"><a href="#Entity-Framework（或者ORM）中的-延迟加载（Lazy-Loading）、直接加载（Eager-Loading）、显式加载（Explicit-Loading）" class="headerlink" title="Entity Framework（或者ORM）中的 延迟加载（Lazy Loading）、直接加载（Eager Loading）、显式加载（Explicit Loading）"></a>Entity Framework（或者ORM）中的 延迟加载（Lazy Loading）、直接加载（Eager Loading）、显式加载（Explicit Loading）</h3><h4 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h4><p>延迟加载又叫惰性加载：即在需要或者使用的时候加载数据。默认情况下，EF会使用延迟加载方式加载数据，即数据库上下文的属性：Configuration.LazyLoadingEnabled = true。</p><ul><li>非常宽容，因为只在需要的时候加载数据，不需要预先计划</li><li>可能会因为数据访问的延迟而降低性能，考虑到每次访问父实体的子实体时，就需要访问数据库。</li></ul><h4 id="直接加载（预加载）"><a href="#直接加载（预加载）" class="headerlink" title="直接加载（预加载）"></a>直接加载（预加载）</h4><p>直接加载可一次性加载所有需要的实体。即相关对象（子对象）与其父对象一起自动加载。</p><ul><li>减少数据访问的延迟，在一次数据库的访问中返回所有的数据。</li><li>减少与数据库的交互次数</li></ul><h4 id="显式加载"><a href="#显式加载" class="headerlink" title="显式加载"></a>显式加载</h4><p>显式加载和延迟加载非常类似，不同的是显式加载要手动关闭 EF 的延迟加载属性，通过代码 Configuration.LazyLoadingEnabled = false 来完成。</p><h4 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h4><ul><li>当关系不是太多时，使用直接加载。因为，直接加载是减少服务器上进一步查询的好方法。</li><li>当您确定每当使用主实体时都会用到相关实体，请使用直接加载。</li><li>当您使用 一对多 集合时，请使用延迟加载。</li><li>当您确定不会立即使用相关实体时，请使用延迟加载。</li><li>当您关闭延迟加载时，如果您事先不确定是否会使用相关实体​​，请使用显式加载。</li></ul><p>参考：<a href="https://blog.csdn.net/u010028869/article/details/48531863">EF学习和使用（五）Lazy Loading and Eager Loading</a><br><a href="https://blog.csdn.net/u010028869/article/details/48791983">EF学习和使用（六）显式加载、按需加载</a><br><a href="https://www.c-sharpcorner.com/article/eager-loading-lazy-loading-and-explicit-loading-in-entity-framework/">Eager Loading, Lazy Loading And Explicit Loading In Entity Framework - C#Corner</a></p><h3 id="如何解决数据并发问题"><a href="#如何解决数据并发问题" class="headerlink" title="如何解决数据并发问题?"></a>如何解决数据并发问题?</h3><ul><li>加锁</li><li>数据库乐观锁（即：添加版本号字段）</li><li>使用消息队列</li></ul><p>处理并发的最终原理其实就是：将用户的<code>并行操作转换成串行操作</code>。</p><p>参考：<a href="https://blog.csdn.net/love1793912554/article/details/92437035">如何有效处理数据并发操作问题</a></p>]]></content>
    
    
    <summary type="html">.NET面试题中一些关于 C# 与数据库交互的知识，问题来源于网络以及我自己的总结。与其说是面试题，这更像是 C# 与数据库相关知识的部分汇总。</summary>
    
    
    
    <category term="C#" scheme="https://www.itaru.xyz/categories/C/"/>
    
    <category term="面试题" scheme="https://www.itaru.xyz/categories/C/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="C#" scheme="https://www.itaru.xyz/tags/C/"/>
    
    <category term=".NET面试题" scheme="https://www.itaru.xyz/tags/NET%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Git/GitHub 实例汇总</title>
    <link href="https://www.itaru.xyz/blogs/7402d6ca.html"/>
    <id>https://www.itaru.xyz/blogs/7402d6ca.html</id>
    <published>2021-12-14T14:12:14.000Z</published>
    <updated>2022-01-06T13:26:56.744Z</updated>
    
    <content type="html"><![CDATA[<p>这是我进行过的一些和 Git/GitHub 有关的值得记录下来的操作。</p><h3 id="GitHub-两种类型的-URL-地址"><a href="#GitHub-两种类型的-URL-地址" class="headerlink" title="GitHub 两种类型的 URL 地址"></a>GitHub 两种类型的 URL 地址</h3><p>以前将更改提交到 GitHub 老是报错：<code>SSL certificate problem: self signed certificate</code></p><p>也有尝试使用 <code>git config --global http.sslVerify false</code></p><p>但过段时间又报相同的错误，而且这个语句时灵时不灵，有时得执行好几次才能提交成功。就跟玄学一样。</p><p>后来发现了根源，<a href="https://docs.github.com/en/get-started/getting-started-with-git/about-remote-repositories">原来 GitHub 有两种中 Url</a>：</p><ul><li>HTTPS URL 如： <code>https://github.com/user/repo.git</code></li><li>SSH URL 如： <code>git@github.com:user/repo.git</code></li></ul><p>我原先一直使用的是 https 类型的 Url，改为 ssh 类型的后，就没有再报错了。</p><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><p>本地有一个 master 分支，GitHub 上有一个 main 分支。将 main 分支合并到 master 中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git pull //将 main 分支拉到本地。或者用 git fetch</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -a //查看所有分支</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch //查看当前分支。</span></span><br><span class="line"></span><br><span class="line">//若当前分支不是 master，则切换成 master：</span><br><span class="line"><span class="meta">$</span><span class="bash"> git chechout master</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge origin/main //合并分支</span></span><br><span class="line"></span><br><span class="line">//若提示 fatal: refusing to merge unrelated histories。请加上 --allow-unrelated-histories</span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge origin/main --allow-unrelated-histories</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push //将更改推送至GitHub</span></span><br><span class="line"></span><br><span class="line">//检查更新无误后，删除 main 分支。</span><br><span class="line">//git branch -d origin/main 会报：error: branch &#x27;origin/main&#x27; not found. 因为它是</span><br><span class="line">//删除本地分支的语句</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin --delete main //或者简化的语句 git push origin :main</span></span><br><span class="line">//若报错：! [remote rejected] main (refusing to delete the current branch: refs/heads/main)</span><br><span class="line">//GitHub页面 -&gt; Settings -&gt; Branchs -&gt; 将默认分区从 main 切换成 master。重新尝试命令。</span><br></pre></td></tr></table></figure><p>另外：<a href="https://www.cnblogs.com/runnerjack/p/9342362.html">git pull = git fetch + git merge</a></p>]]></content>
    
    
    <summary type="html">这是我进行过的一些和 Git/GitHub 有关的值得记录下来的操作。</summary>
    
    
    
    <category term="Git" scheme="https://www.itaru.xyz/categories/Git/"/>
    
    
    <category term="Git" scheme="https://www.itaru.xyz/tags/Git/"/>
    
  </entry>
  
</feed>
